import { Injectable, Logger } from '@nestjs/common';
import { WebSocketGateway, WebSocketServer, OnGatewayConnection, OnGatewayDisconnect } from '@nestjs/websockets';
import { Server, Socket } from 'socket.io';
import { AuthService } from '@the-new-fuse/security';

interface WebSocketMessage {
  type: string;
  payload: unknown;
  timestamp: number;
  sender: string;
}

@Injectable()
@WebSocketGateway({
  cors: {
    origin: process.env.FRONTEND_URL,
    credentials: true,
  },
})
export class WebSocketService implements OnGatewayConnection, OnGatewayDisconnect {
  @WebSocketServer(): Server;
  private readonly logger = new Logger(WebSocketService.name);
  private connectedClients = new Map<string, Socket>();

  constructor(private readonly authService: AuthService) {}

  async handleConnection(): Promise<void> (client: Socket): Promise<any> {
    try {
      const token: ${user.id}`);
      
      this.logger.log(`Client connected: ${user.id}`): unknown) {
      this.logger.error(`Connection error: ${error.message}`): Socket) {
    const userId: unknown) {
        client.disconnect(): unknown) {
      this.connectedClients.delete(userId): $ {userId}`);
    }
  }

  async broadcastMessage(): Promise<void> (message: WebSocketMessage): Promise<any> {
    this.server.emit('message', {
      ...message,
      timestamp: Date.now(): string, message: WebSocketMessage) {
    this.server.to(`user:${userId}`).emit('message', {
      ...message,
      timestamp: Date.now(): Socket): string | undefined {
    for (const [userId, clientSocket] of this.connectedClients.entries()) {
      if(clientSocket.id  = client.handshake.auth.token;
      const { valid, user } = await this.authService.validateToken(token): unknown) {
        return userId;
      }
    }
  }

  private broadcastUserStatus(userId: string, status: 'online' | 'offline') {
    this.server.emit('userStatus', {
      userId,
      status,
      timestamp: Date.now(),
    });
  }
}