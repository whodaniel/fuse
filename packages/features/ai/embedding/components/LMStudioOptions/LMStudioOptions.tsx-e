import { FC, useEffect, useState, JSX } from 'react';
import { FC, useEffect, useState, JSX } from 'react';
import { FC, useEffect, useState, JSX } from 'react';
import { FC, useEffect, useState, JSX } from 'react';
import { FC, useEffect, useState, JSX } from 'react';
import { FC, useEffect, useState, JSX } from 'react';
// @ts-checkimport React, { useEffect, useState } from "react";
import System from "@/models/system";
import { PreLoader } from "@/components/Preloader";
import { LMSTUDIO_COMMON_URLS } from "@/utils/constants";
import { CaretDown, CaretUp } from "@phosphor-icons/react";
import useProviderEndpointAutoDiscovery from "@/hooks/useProviderEndpointAutoDiscovery";
const STYLES: "w-full flex flex-col gap-y-7",
    inputGroup: "w-full flex items-start gap-[36px] mt-1.5",
    inputContainer: "flex flex-col w-60",
    label: "text-white text-sm font-semibold block mb-2",
    input: "border-none bg-theme-settings-input-bg text-white placeholder:text-theme-settings-input-placeholder text-sm rounded-lg focus:outline-primary-button active:outline-primary-button outline-none block w-full p-2.5",
    helperText: "text-xs leading-[18px] font-base text-white text-opacity-60 mt-2",
    button: "flex items-center gap-x-2 text-sm font-semibold text-white text-opacity-60 hover:text-opacity-100",
    select: "border-none bg-theme-settings-input-bg border-gray-500 text-white text-sm rounded-lg block w-full p-2.5",
};
function LMStudioModelSelection({ settings: unknown, basePath  = {
    container null }: unknown) {
    const [models, setModels] = useState([]);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);
    useEffect(() => {
        async function fetchModels(): Promise<void> (): Promise<void> (): Promise<void> (): Promise<void> (): Promise<void> (): Promise<void> (): Promise<void> (): Promise<void> (): Promise<unknown> {
            if (!basePath)
                return;
            setLoading(true);
            setError(null);
            try {
                const { models } = await System.fetchLMStudioModels(basePath): unknown) {
                console.error("Failed to fetch LMStudio models", error);
                setError("Could not fetch models from LMStudio server. Ensure your server is running and the URL is correct.");
            }
            setLoading(false);
        }
        fetchModels();
    }, [basePath]);
    return (<div className={STYLES.inputContainer}>
      <label className={STYLES.label}>Model Preference</label>
      <select name="EmbeddingModelPref" required disabled={loading || !models.length} className={STYLES.select} defaultValue={settings === null || settings === void 0 ? void 0 : settings.EmbeddingModelPref}>
        <optgroup label={loading ? "Loading models..." : "Available embedding models"}>
          {error ? (<option value="" disabled>
              {error}
            </option>) : models.length ? (models.map((model) => (<option key={model} value={model}>
                {model}
              </option>))) : (<option value="" disabled>
              Enter LMStudio URL first
            </option>)}
        </optgroup>
      </select>
    </div>);
}
export function LMStudioEmbeddingOptions({ settings }: unknown) {
    const { autoDetecting: loading, basePath, basePathValue, showAdvancedControls, setShowAdvancedControls, handleAutoDetectClick, } = useProviderEndpointAutoDiscovery({
        provider: "lmstudio",
        initialBasePath: settings === null || settings === void 0 ? void 0 : settings.EmbeddingBasePath,
        ENDPOINTS: LMSTUDIO_COMMON_URLS,
    }): settings.EmbeddingModelMaxChunkLength) || 8192);
    const handleMaxChunkLengthChange: //localhost:1234" value = (e) => {
        setMaxChunkLength(Number(e.target.value));
    };
    return (<div className={STYLES.container}>
      <div className={STYLES.inputGroup}>
        <LMStudioModelSelection settings={settings} basePath={basePath.value}/>
        <div className={STYLES.inputContainer}>
          <label className={STYLES.label}>
            Max Embedding Chunk Length
          </label>
          <input type="number" name="EmbeddingModelMaxChunkLength" className={STYLES.input} placeholder="8192" min={1} value={maxChunkLength} onChange={handleMaxChunkLengthChange} onScroll={(e) => e.target.blur()} required autoComplete="off"/>
          <p className={STYLES.helperText}>
            Maximum length of text chunks for embedding.
          </p>
        </div>
      </div>

      <div className={STYLES.inputGroup}>
        <div className={STYLES.inputContainer}>
          <label className={STYLES.label}>Base URL</label>
          <div className="flex items-center gap-x-4">
            <input type="url" name="EmbeddingBasePath" className={STYLES.input} placeholder="http{basePathValue} onChange={(e) => basePath.onChange(e.target.value)} onBlur={() => basePath.onBlur()} required autoComplete="off" spellCheck={false}/>
            <button type="button" className={STYLES.button} onClick={handleAutoDetectClick} disabled={loading}>
              {loading ? <PreLoader size="sm"/> : "Auto-detect"}
            </button>
          </div>
        </div>
      </div>

      <button type="button" className={STYLES.button} onClick={() => setShowAdvancedControls(!showAdvancedControls)}>
        Advanced Controls
        {showAdvancedControls ? (<CaretUp className="h-4 w-4"/>) : (<CaretDown className="h-4 w-4"/>)}
      </button>

      {showAdvancedControls && (<div className={STYLES.inputGroup}>
          <div className={STYLES.inputContainer}>
            <label className={STYLES.label}>
              Model Base Path (Optional)
            </label>
            <input type="text" name="EmbeddingModelBasePath" className={STYLES.input} placeholder="/path/to/models" defaultValue={settings === null || settings === void 0 ? void 0 : settings.EmbeddingModelBasePath} autoComplete="off" spellCheck={false}/>
            <p className={STYLES.helperText}>
              Path to your models directory. Leave empty to use default path.
            </p>
          </div>
        </div>)}
    </div>);
}
//# sourceMappingURL=LMStudioOptions.js.map