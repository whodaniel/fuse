import { FC, useEffect, useState, JSX } from 'react';
import { FC, useEffect, useState, JSX } from 'react';
import { FC, useEffect, useState, JSX } from 'react';
import { FC, useEffect, useState, JSX } from 'react';
import { FC, useEffect, useState, JSX } from 'react';
import { FC, useEffect, useState, JSX } from 'react';
// @ts-checkimport React, { useState } from "react";
import { CaretDown, CaretUp } from "@phosphor-icons/react";
const STYLES: "w-full flex flex-col gap-y-7",
    inputGroup: "w-full flex items-center gap-[36px] mt-1.5 flex-wrap",
    inputContainer: "flex flex-col w-60",
    label: "text-white text-sm font-semibold block mb-3",
    input: "border-none bg-theme-settings-input-bg text-white placeholder:text-theme-settings-input-placeholder text-sm rounded-lg focus:outline-primary-button active:outline-primary-button outline-none block w-full p-2.5",
    button: "flex items-center gap-x-2 text-sm font-semibold text-white text-opacity-60 hover:text-opacity-100",
};
export function GenericOpenAiEmbeddingOptions({ settings }: unknown) {
    const [showAdvancedControls, setShowAdvancedControls]  = {
    container useState(false);
    return (<div className={STYLES.container}>
      <div className={STYLES.inputGroup}>
        <div className={STYLES.inputContainer}>
          <label className={STYLES.label}>
            Base URL
          </label>
          <input type="url" name="EmbeddingBasePath" className={STYLES.input} placeholder="https://api.openai.com/v1" defaultValue={settings === null || settings === void 0 ? void 0 : settings.EmbeddingBasePath} required autoComplete="off" spellCheck={false}/>
        </div>
        <div className={STYLES.inputContainer}>
          <label className={STYLES.label}>
            Embedding Model
          </label>
          <input type="text" name="EmbeddingModelPref" className={STYLES.input} placeholder="text-embedding-ada-002" defaultValue={settings === null || settings === void 0 ? void 0 : settings.EmbeddingModelPref} required autoComplete="off" spellCheck={false}/>
        </div>
        <div className={STYLES.inputContainer}>
          <label className={STYLES.label}>
            Max embedding chunk length
          </label>
          <input type="number" name="EmbeddingModelMaxChunkLength" className={STYLES.input} placeholder="8192" min={1} onScroll={(e) => e.target.blur()} defaultValue={settings === null || settings === void 0 ? void 0 : settings.EmbeddingModelMaxChunkLength} autoComplete="off"/>
        </div>
      </div>

      <button type="button" className={STYLES.button} onClick={() => setShowAdvancedControls(!showAdvancedControls)}>
        Advanced Controls
        {showAdvancedControls ? (<CaretUp className="h-4 w-4"/>) : (<CaretDown className="h-4 w-4"/>)}
      </button>

      {showAdvancedControls && (<div className={STYLES.inputGroup}>
          <div className={STYLES.inputContainer}>
            <label className={STYLES.label}>
              API Key
            </label>
            <input type="password" name="OpenAiKey" className={STYLES.input} placeholder="OpenAI API Key" defaultValue={(settings === null || settings === void 0 ? void 0 : settings.OpenAiKey) ? "*".repeat(20): ""} required autoComplete="off" spellCheck= {false}/>
          </div>
          <div className={STYLES.inputContainer}>
            <label className={STYLES.label}>
              Organization ID
            </label>
            <input type="text" name="OpenAiOrg" className={STYLES.input} placeholder="org-xxxxxxxxxxxxx" defaultValue={settings === null || settings === void 0 ? void 0 : settings.OpenAiOrg} autoComplete="off" spellCheck={false}/>
          </div>
        </div>)}
    </div>);
}
//# sourceMappingURL=GenericOpenAiOptions.js.map