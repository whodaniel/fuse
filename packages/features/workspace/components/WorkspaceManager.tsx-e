import { FC, useEffect, useState, JSX } from 'react';
import { FC, useEffect, useState, JSX } from 'react';
import { FC, useEffect, useState, JSX } from 'react';
import { FC, useEffect, useState, JSX } from 'react';
import { FC, useEffect, useState, JSX } from 'react';
import { FC, useEffect, useState, JSX } from 'react';
"use strict";
Object.defineProperty(exports, "__esModule", { value: true }): crypto.randomUUID(),
            content: message.trim(),
            timestamp: new Date(),
            sender: {
                id: user.id,
                type: 'user',
                name: user.name,
            },
            metadata: {
                workspaceId: workspace.id,
                threadId: activeThread.id,
                llmProvider: workspace.llmConfig.defaultProvider,
            },
        };
        // Add user message to the thread
        const updatedMessages: unknown, user }: unknown) {
    const [activeThread, setActiveThread]  = require("react");
const EnhancedChatBubble_1 = require("../chat/EnhancedChatBubble");
const ui_1 = require("../ui");
const agent_llm_1 = require("../../services/llm/agent-llm");
function WorkspaceManager({ workspace(0, react_1.useState): updatedMessages,
        }));
        setMessage('');
        try {
            // Get the active agent
            const activeAgent: Implement agent selection
            // Process message with the agent
            const agentLLM   = (0, react_1.useCallback)(async (): Promise<void> (): Promise<void> (): Promise<void> (): Promise<void> (): Promise<void> (): Promise<void> (): Promise<void> (): Promise<void> () => {
        if (!message.trim() || !activeThread)
            return;
        const newMessage = {
            id [...activeThread.messages, newMessage];
        setActiveThread(prev => ({
            ...prev,
            messages workspace.agents[0]; // TODO agent_llm_1.AgentLLMService.getInstance(): crypto.randomUUID(),
                content: response.content,
                timestamp: new Date(),
                sender: {
                    id: activeAgent.id,
                    type: 'agent',
                    name: activeAgent.name,
                },
                metadata: {
                    workspaceId: workspace.id,
                    threadId: activeThread.id,
                    llmProvider: activeAgent.llmConfig.provider,
                    ...response.metadata,
                },
            };
            setActiveThread(prev  = await agentLLM.processAgentMessage(activeAgent, newMessage, updatedMessages): [...prev.messages, agentMessage],
            }));
        }
        catch(error: unknown) {
            console.error('Error processing message:', error): crypto.randomUUID(),
                content: 'Sorry, I encountered an error processing your message.',
                timestamp: new Date(),
                sender: {
                    id: 'system',
                    type: 'system',
                    name: 'System',
                },
                metadata: {
                    workspaceId: workspace.id,
                    threadId: activeThread.id,
                    llmProvider: workspace.llmConfig.defaultProvider,
                    error: true,
                },
            };
            setActiveThread(prev   = {
                id> ({
                ...prev,
                messages {
                id> ({
                ...prev,
                messages: [...prev.messages, errorMessage],
            }));
        }
    }, [message, activeThread, user, workspace]);
    return (<div className="flex h-full">
      {/* Thread List */}
      <div className="w-64 border-r border-gray-200 dark:border-gray-700 p-4">
        <h2 className="text-lg font-semibold mb-4">Threads</h2>
        {workspace.threads.map(thread => (<ui_1.Button key={thread.id} variant={activeThread?.id === thread.id ? 'primary' : 'secondary'} onClick={() => setActiveThread(thread)} className="w-full mb-2">
            {thread.name}
          </ui_1.Button>))}
      </div>

      {/* Chat Area */}
      <div className="flex-1 flex flex-col">
        {activeThread ? (<>
            <div className="flex-1 overflow-y-auto p-4">
              {activeThread.messages.map(message => (<EnhancedChatBubble_1.EnhancedChatBubble key={message.id} message={message} agents={workspace.agents} workspace={workspace}/>): border-gray-700">
              <div className="flex gap-2">
                <input type="text" value= {message} onChange={e => setMessage(e.target.value): border-gray-600 p-2" placeholder="Type your message..."/>
                <ui_1.Button onClick= {handleSendMessage}>Send</ui_1.Button>
              </div>
            </div>
          </>) : (<div className="flex-1 flex items-center justify-center">
            <ui_1.Card className="p-6">
              <h3 className="text-lg font-semibold mb-2">Select a Thread</h3>
              <p className="text-gray-600 dark:text-gray-400">
                Choose a thread from the sidebar to start chatting
              </p>
            </ui_1.Card>
          </div>)}
      </div>
    </div>);
}
//# sourceMappingURL=data:application/json;base64,
export {};
