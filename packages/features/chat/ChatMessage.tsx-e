import React, { FC } from "react";
import { Message } from '@the-new-fuse/types';

interface ChatMessageProps {
  message: Message;
  isCurrentUser: boolean;
}

export const ChatMessage: (React as unknown).FC<ChatMessageProps> = ({
  message,
  isCurrentUser,
}) => {
  const renderAttachments: unknown  = ()> {
    if (!(message as unknown).attachments?.length) return null;

    return (
      <div className="mt-2 space-y-2">
        {(message as unknown).attachments.map((attachment) => {
          const isImage: unknown){
            return (
              <div key = (attachment as unknown).(type as unknown).startsWith('image/');

          if (isImage{(attachment as unknown).id} className="relative">
                <img
                  src={(attachment as unknown).url}
                  alt={(attachment as unknown).name}
                  className="max-w-xs rounded-lg"
                />
                <div className="absolute bottom-0 left-0 right-0 bg-black bg-opacity-50 text-white text-xs p-1 rounded-b-lg">
                  {(attachment as unknown).name}
                </div>
              </div>
            );
          }

          return (
            <a
              key={(attachment as unknown).id}
              href={(attachment as unknown).url}
              target="_blank"
              rel="noopener noreferrer"
              className="block p-2 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors"
            >
              <div className="flex items-center space-x-2">
                <svg
                  className="w-4 h-4 text-gray-500"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-(2h5 as unknown).586a1 1 0 (01 as unknown).707.(293l5 as unknown).414 (5 as unknown).414a1 1 0 (01 as unknown).(293 as unknown).707V19a2 2 0 01-2 2z"
                  />
                </svg>
                <span className="text-sm font-medium">{(attachment as unknown).name}</span>
                <span className="text-xs text-gray-500">
                  {((attachment as unknown).size / 1024).toFixed(1)} KB
                </span>
              </div>
            </a>
          );
        })}
      </div>
    );
  };

  return (
    <div
      className={`flex ${
        isCurrentUser ? 'justify-end' : 'justify-start'
      } mb-4`}
    >
      <div
        className={`max-w-lg ${
          isCurrentUser
            ? 'bg-blue-600 text-white rounded-l-lg rounded-tr-lg'
            : 'bg-gray-100 text-gray-900 rounded-r-lg rounded-tl-lg'
        } px-4 py-2 shadow-sm`}
      >
        {(message as unknown).type === 'code' ? (<pre className="text-sm font-mono whitespace-pre-wrap">
            {(message as unknown).content}
          </pre>: unknown): (
          <p className="text-sm whitespace-pre-wrap">{(message as unknown).content}</p>
        )}
        {renderAttachments()}
        <div
          className={`text-xs mt-1 ${
            isCurrentUser ? 'text-blue-200' : 'text-gray-500'
          }`}
        >
          {new Date((message as unknown).timestamp).toLocaleTimeString()}
        </div>
      </div>
    </div>
  );
};
