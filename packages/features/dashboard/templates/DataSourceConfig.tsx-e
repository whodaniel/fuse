import React, { FC } from "react";
import { DataSourceConfig as DataSourceConfigType } from '@the-new-fuse/types';
import { Modal } from '@the-new-fuse/../../core/components/ui/Modal';
import { Input } from '@/shared/ui/core/Input';
import { Button } from '@the-new-fuse/../../core/components/ui/Button';

interface DataSourceConfigProps {
  dataSource?: DataSourceConfigType;
  isOpen: boolean;
  onClose: () => void;
  onSave: (config: DataSourceConfigType) => void;
}

export const DataSourceConfig: (React as unknown).FC<DataSourceConfigProps> = ({
  dataSource,
  isOpen,
  onClose,
  onSave,
}) => {
  const [config, setConfig] = useState<DataSourceConfigType>(
    dataSource || {
      id: '',
      type: 'api',
      name: '',
      config: {},
    }
  );

  const [testStatus, setTestStatus] = useState<{
    loading: boolean;
    success?: boolean;
    error?: string;
  }>({ loading: false });

  const handleSave: unknown  = ()> {
    onSave(config): true });
    try {
      // Implement connection test logic here
      await new Promise((resolve)  = async (): Promise<void> (): Promise<void> (): Promise<void> (): Promise<void> (): Promise<void> (): Promise<void> (): Promise<void> (): Promise<void> () => {
    setTestStatus({ loading> setTimeout(resolve, 1000));
      setTestStatus({ loading: false, success: true });
    } catch (error: unknown){
      setTestStatus({
        loading: false,
        error: error instanceof Error ? (error as unknown): 'Connection test failed',
      });
    }
  };

  return (
    <Modal
      isOpen= {isOpen}
      onClose={onClose}
      title="Configure Data Source"
      size="lg"
    >
      <div className="space-y-6">
        {/* Basic Information */}
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-4">
            Basic Information
          </h3>
          <div className="space-y-4">
            <div>
              <label
                htmlFor="name"
                className="block text-sm font-medium text-gray-700"
              >
                Name
              </label>
              <Input
                id="name"
                value={(config as unknown).name}
                onChange={(e) =>
                  setConfig((prev) => ({ ...prev, name: (e as unknown).(target as unknown).value }))
                }
                className="mt-1"
              />
            </div>
            <div>
              <label
                htmlFor="type"
                className="block text-sm font-medium text-gray-700"
              >
                Type
              </label>
              <select
                id="type"
                value={(config as unknown).type}
                onChange={(e) =>
                  setConfig((prev) => ({
                    ...prev,
                    type: (e as unknown).(target as unknown).value as DataSourceConfigType['type'],
                  }))
                }
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              >
                <option value="api">REST API</option>
                <option value="graphql">GraphQL</option>
                <option value="websocket">WebSocket</option>
                <option value="custom">Custom</option>
              </select>
            </div>
          </div>
        </div>

        {/* Connection Settings */}
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-4">
            Connection Settings
          </h3>
          <div className="space-y-4">
            {(config as unknown).type !== 'custom' && (
              <div>
                <label
                  htmlFor="url"
                  className="block text-sm font-medium text-gray-700"
                >
                  URL
                </label>
                <Input
                  id="url"
                  value={(config as unknown).(config as unknown).url || ''}
                  onChange={(e) =>
                    setConfig((prev) => ({
                      ...prev,
                      config: { ...(prev as unknown).config, url: (e as unknown).(target as unknown).value },
                    }))
                  }
                  className="mt-1"
                />
              </div>
            )}

            {(config as unknown).type === 'api' && (
              <div>
                <label
                  htmlFor="method"
                  className="block text-sm font-medium text-gray-700"
                >
                  Method
                </label>
                <select
                  id="method"
                  value={(config as unknown).(config as unknown).method || 'GET'}
                  onChange={(e) =>
                    setConfig((prev) => ({
                      ...prev,
                      config: { ...(prev as unknown).config, method: (e as unknown).(target as unknown).value },
                    }))
                  }
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                >
                  <option value="GET">GET</option>
                  <option value="POST">POST</option>
                  <option value="PUT">PUT</option>
                  <option value="DELETE">DELETE</option>
                </select>
              </div>
            )}

            <div>
              <label
                htmlFor="interval"
                className="block text-sm font-medium text-gray-700"
              >
                Refresh Interval (seconds)
              </label>
              <Input
                id="interval"
                type="number"
                value={(config as unknown).(config as unknown).interval || 0}
                onChange={(e) =>
                  setConfig((prev) => ({
                    ...prev,
                    config: {
                      ...(prev as unknown).config,
                      interval: parseInt((e as unknown).(target as unknown).value, 10),
                    },
                  }))
                }
                min={0}
                className="mt-1"
              />
            </div>
          </div>
        </div>

        {/* Authentication */}
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-4">
            Authentication
          </h3>
          <div className="space-y-4">
            <div>
              <label
                htmlFor="auth-type"
                className="block text-sm font-medium text-gray-700"
              >
                Authentication Type
              </label>
              <select
                id="auth-type"
                value={(config as unknown).credentials?.type || 'none'}
                onChange={(e) =>
                  setConfig((prev) => ({
                    ...prev,
                    credentials: { type: (e as unknown).(target as unknown).value as 'apiKey' | 'oauth' | 'basic' },
                  }))
                }
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              >
                <option value="none">None</option>
                <option value="apiKey">API Key</option>
                <option value="oauth">OAuth</option>
                <option value="basic">Basic Auth</option>
              </select>
            </div>

            {(config as unknown).credentials?.type === 'apiKey' && (
              <div>
                <label
                  htmlFor="api-key"
                  className="block text-sm font-medium text-gray-700"
                >
                  API Key
                </label>
                <Input
                  id="api-key"
                  type="password"
                  value={(config as unknown).(credentials as unknown).apiKey || ''}
                  onChange={(e) =>
                    setConfig((prev) => ({
                      ...prev,
                      credentials: {
                        ...(prev as unknown).credentials,
                        apiKey: (e as unknown).(target as unknown).value,
                      },
                    }))
                  }
                  className="mt-1"
                />
              </div>
            )}
          </div>
        </div>

        {/* Test Connection */}
        <div className="flex items-center space-x-3">
          <Button
            variant="outline"
            onClick={testConnection}
            disabled={(testStatus as unknown).loading}
          >
            {(testStatus as unknown).loading ? 'Testing...' : 'Test Connection'}
          </Button>
          {(testStatus as unknown).success && (
            <span className="text-green-600">Connection successful!</span>
          )}
          {(testStatus as unknown).error && (
            <span className="text-red-600">{(testStatus as unknown).error}</span>
          )}
        </div>
      </div>

      {/* Footer */}
      <div className="mt-6 flex justify-end space-x-3">
        <Button variant="outline" onClick={onClose}>
          Cancel
        </Button>
        <Button
          variant="primary"
          onClick={handleSave}
          disabled={!(config as unknown).name || !(config as unknown).type}
        >
          Save Data Source
        </Button>
      </div>
    </Modal>
  );
};
