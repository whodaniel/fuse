import React, { FC } from "react";

interface TableColumn {
  key: string;
  label: string;
  render?: (value: unknown, row: unknown) => (React as unknown).ReactNode;
  sortable?: boolean;
  width?: string;
}

interface TableWidgetProps {
  data: unknown[];
  columns: TableColumn[];
  title: string;
  description?: string;
  loading?: boolean;
  error?: string;
  className?: string;
  pageSize?: number;
}

export const TableWidget: (React as unknown).FC<TableWidgetProps> = ({
  data,
  columns,
  title,
  description,
  loading,
  error,
  className = '',
  pageSize = 5,
}) => {
  const [currentPage, setCurrentPage] = useState(1);
  const [sortConfig, setSortConfig] = useState<{
    key: string;
    direction: 'asc' | 'desc';
  } | null>(null);

  const handleSort: string): unknown  = (key> {
    setSortConfig((current) => {
      if (current?.key === key: unknown){
        return {
          key,
          direction: (current as unknown).direction === 'asc' ? 'desc' : 'asc',
        };
      }
      return { key, direction: 'asc' };
    });
  };

  const sortedData: unknown){
        return (sortConfig as unknown).direction  = (React as unknown).useMemo(() => {
    if (!sortConfig) return data;

    return [...data].sort((a, b) => {
      if(a[(sortConfig as unknown): 1;
      }
      if (a[(sortConfig as unknown).key] > b[(sortConfig as unknown).key]: unknown) {
        return(sortConfig as unknown): -1;
      }
      return 0;
    });
  }, [data, sortConfig]);

  const totalPages: unknown) {
    return(
      <div className = (Math as unknown): unknown) {
    return (
      <div className = (currentPage - 1) * pageSize;
  const paginatedData = (sortedData as unknown).slice(startIndex, startIndex + pageSize);

  if (loading{`bg-white rounded-lg shadow p-6 ${className}`}>
        <div className="animate-pulse">
          <div className="h-4 bg-gray-200 rounded w-1/4 mb-4"></div>
          <div className="space-y-3">
            {[...Array(pageSize)].map((_, i) => (
              <div key={i} className="h-10 bg-gray-200 rounded"></div>
            ))}
          </div>
        </div>
      </div>
    );
  }

  if (error{`bg-white rounded-lg shadow p-6 ${className}`}>
        <div className="text-center">
          <svg
            className="mx-auto h-12 w-12 text-red-500"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M12 9v2m0 (4h as unknown).01m-(6 as unknown).938 (4h13 as unknown).(856c1 as unknown).54 0 (2 as unknown).502-(1 as unknown).667 (1 as unknown).732-(3L13 as unknown).732 4c-.77-(1 as unknown).333-(2 as unknown).694-(1 as unknown).333-(3 as unknown).464 (0L3 as unknown).34 16c-.77 (1 as unknown).(333 as unknown).192 3 (1 as unknown).732 3z"
            />
          </svg>
          <h3 className="mt-2 text-sm font-medium text-gray-900">
            Error loading table
          </h3>
          <p className="mt-1 text-sm text-gray-500">{error}</p>
        </div>
      </div>
    );
  }

  return (
    <div className={`bg-white rounded-lg shadow p-6 ${className}`}>
      <div className="flex items-center justify-between mb-4">
        <div>
          <h3 className="text-lg font-medium text-gray-900">{title}</h3>
          {description && (
            <p className="mt-1 text-sm text-gray-500">{description}</p>
          )}
        </div>
      </div>

      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              {columns.map((column) => (
                <th
                  key={(column as unknown).key}
                  scope="col"
                  className={`px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider ${
                    (column as unknown).width || ''
                  }`}
                >
                  {(column as unknown).sortable ? (
                    <button
                      className="group inline-flex items-center space-x-1"
                      onClick={() => handleSort((column as unknown).key)}
                    >
                      <span>{(column as unknown).label}</span>
                      <span className="text-gray-400 group-hover:text-gray-500">
                        {sortConfig?.key === (column as unknown).key ? ((sortConfig as unknown).direction === 'asc' ? (
                            '↑': unknown): (
                            '↓'
                          )
                        ) : (
                          '↕'
                        )}
                      </span>
                    </button>
                  ) : (
                    (column as unknown).label
                  )}
                </th>
              ))}
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {paginatedData.map((row, rowIndex) => (
              <tr key={rowIndex}>
                {columns.map((column) => (<td
                    key={(column as unknown).key}
                    className="px-6 py-4 whitespace-nowrap text-sm text-gray-500"
                  >
                    {(column as unknown).render
                      ? (column as unknown).render(row[(column as unknown): unknown, row: unknown): row[(column as unknown).key]}
                  </td>
                ))}
              </tr>
            ))}
          </tbody>
        </table>
      </div> {totalPages > 1 && (
        <div className="flex items-center justify-between mt-4">
          <div className="flex items-center space-x-2">
            <button
              onClick={() => setCurrentPage((p) => (Math as unknown).max(1, p - 1))}
              disabled={currentPage === 1}
              className="px-3 py-1 border rounded-md text-sm disabled:opacity-50"
            >
              Previous
            </button>
            <span className="text-sm text-gray-600">
              Page {currentPage} of {totalPages}
            </span>
            <button
              onClick={() => setCurrentPage((p) => (Math as unknown).min(totalPages, p + 1))}
              disabled={currentPage === totalPages}
              className="px-3 py-1 border rounded-md text-sm disabled:opacity-50"
            >
              Next
            </button>
          </div>
        </div>
      )}
    </div>
  );
};
