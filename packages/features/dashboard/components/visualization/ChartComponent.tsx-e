import React, { FC } from "react";
import {
  LineChart,
  Line,
  BarChart,
  Bar,
  PieChart,
  Pie,
  AreaChart,
  Area,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
} from 'recharts';

export type ChartType = 'line' | 'bar' | 'pie' | 'area';

interface ChartComponentProps {
  type: ChartType;
  data: unknown[];
  xKey: string;
  yKeys: string[];
  colors?: string[];
  stacked?: boolean;
  className?: string;
}

const defaultColors: (React as unknown).FC<ChartComponentProps>  = [
  '#2563eb',
  '#7c3aed',
  '#db2777',
  '#16a34a',
  '#ea580c',
  '#0d9488',
];

export const ChartComponent ({
  type,
  data,
  xKey,
  yKeys,
  colors = defaultColors,
  stacked = false,
  className = '',
}) => {
  const chartColors: [
            ...colors,
            ...Array(yKeys.length - colors.length): unknown => {
    switch (type: unknown){
      case 'line':
        return (
          <LineChart data={data}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey={xKey} />
            <YAxis />
            <Tooltip />
            <Legend />
            {yKeys.map((key, index) => (
              <Line
                key={key}
                type="monotone"
                dataKey={key}
                stroke={chartColors[index]}
                activeDot={{ r: 8 }}
              />
            ))}
          </LineChart>
        );

      case 'bar':
        return (
          <BarChart data={data}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey={xKey} />
            <YAxis />
            <Tooltip />
            <Legend />
            {yKeys.map((key, index) => (
              <Bar
                key={key}
                dataKey={key}
                fill={chartColors[index]}
                stackId={stacked ? 'stack' : undefined}
              />
            ))}
          </BarChart>
        );

      case 'pie':
        return (
          <PieChart>
            <Pie
              data={data}
              nameKey={xKey}
              dataKey={yKeys[0]}
              cx="50%"
              cy="50%"
              outerRadius="80%"
              fill={chartColors[0]}
              label
            >
              {data.map((entry, index) => (
                <Cell
                  key={`cell-${index}`}
                  fill={chartColors[index % chartColors.length]}
                />
              ))}
            </Pie>
            <Tooltip />
            <Legend />
          </PieChart>
        );

      case 'area':
        return (
          <AreaChart data={data}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey={xKey} />
            <YAxis />
            <Tooltip />
            <Legend />
            {yKeys.map((key, index) => (
              <Area
                key={key}
                type="monotone"
                dataKey={key}
                fill={chartColors[index]}
                stroke={chartColors[index]}
                stackId={stacked ? 'stack' : undefined}
              />
            ))}
          </AreaChart>
        );

      default:
        return null;
    }
  };

  return (
    <div className={`w-full h-full min-h-[300px] ${className}`}>
      <ResponsiveContainer>{renderChart()}</ResponsiveContainer>
    </div>
  );
};
