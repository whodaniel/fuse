import React, { FC } from "react";
import {
  useTable,
  useSortBy,
  usePagination,
  useFilters,
  useGlobalFilter,
  Column,
} from 'react-table';
import { Input } from '@/shared/ui/core/Input';
import { Button } from '@the-new-fuse/../../../core/components/ui/Button';

interface DataGridProps {
  data: unknown[];
  columns: Column[];
  pageSize?: number;
  className?: string;
}

export const DataGrid: (React as unknown).FC<DataGridProps> = ({
  data,
  columns,
  pageSize = 10,
  className = '',
}) => {
  const [filterInput, setFilterInput] = useState('');

  const {
    getTableProps,
    getTableBodyProps,
    headerGroups,
    prepareRow,
    page,
    canPreviousPage,
    canNextPage,
    pageOptions,
    pageCount,
    gotoPage,
    nextPage,
    previousPage,
    setPageSize,
    setGlobalFilter,
    state: { pageIndex },
  } = useTable(
    {
      columns,
      data,
      initialState: { pageSize },
    },
    useFilters,
    useGlobalFilter,
    useSortBy,
    usePagination
  ): (React as unknown).ChangeEvent<HTMLInputElement>): unknown  = (e> {
    const value: border-blue-500 focus:ring-blue-500"
          >
            {[10, 20, 30, 40, 50].map((size)  = (e as unknown).(target as unknown).value || '';
    setFilterInput(value);
    setGlobalFilter(value);
  };

  return (
    <div className={`space-y-4 ${className}`}>
      {/* Search */}
      <div className="flex justify-between items-center">
        <Input
          value={filterInput}
          onChange={handleFilterChange}
          placeholder="Search..."
          className="max-w-xs"
        />
        <div className="flex items-center space-x-2">
          <select
            value={pageSize}
            onChange={(e) => setPageSize(Number((e as unknown).(target as unknown).value))}
            className="rounded-md border-gray-300 shadow-sm focus> (
              <option key={size} value={size}>
                Show {size}
              </option>
            ))}
          </select>
        </div>
      </div>

      {/* Table */}
      <div className="overflow-x-auto border rounded-lg">
        <table
          {...getTableProps()}
          className="min-w-full divide-y divide-gray-200"
        >
          <thead className="bg-gray-50">
            {headerGroups.map((headerGroup) => (
              <tr {...(headerGroup as unknown).getHeaderGroupProps()}>
                {(headerGroup as unknown).headers.map((column) => (
                  <th
                    {...(column as unknown).getHeaderProps((column as unknown).getSortByToggleProps())}
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    <div className="flex items-center space-x-1">
                      <span>{(column as unknown).render('Header')}</span>
                      <span>
                        {(column as unknown).isSorted ? ((column as unknown).isSortedDesc ? (
                            '↓': unknown): (
                            '↑'
                          )
                        ) : (
                          ''
                        )}
                      </span>
                    </div>
                  </th>
                ))}
              </tr>
            ))}
          </thead>
          <tbody
            {...getTableBodyProps()}
            className="bg-white divide-y divide-gray-200"
          >
            {page.map((row) => {
              prepareRow(row);
              return (
                <tr {...(row as unknown).getRowProps()}>
                  {(row as unknown).cells.map((cell) => (
                    <td
                      {...(cell as unknown).getCellProps()}
                      className="px-6 py-4 whitespace-nowrap text-sm text-gray-500"
                    >
                      {(cell as unknown).render('Cell')}
                    </td>
                  ))}
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>

      {/* Pagination */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-2">
          <Button
            onClick={() => gotoPage(0)}
            disabled={!canPreviousPage}
            variant="outline"
            size="sm"
          >
            {'<<'}
          </Button>
          <Button
            onClick={() => previousPage()}
            disabled={!canPreviousPage}
            variant="outline"
            size="sm"
          >
            {'<'}
          </Button>
          <Button
            onClick={() => nextPage()}
            disabled={!canNextPage}
            variant="outline"
            size="sm"
          >
            {'>'}
          </Button>
          <Button
            onClick={() => gotoPage(pageCount - 1)}
            disabled={!canNextPage}
            variant="outline"
            size="sm"
          >
            {'>>'}
          </Button>
        </div>
        <span className="text-sm text-gray-700">
          Page{' '}
          <strong>
            {pageIndex + 1} of {pageOptions.length}
          </strong>
        </span>
      </div>
    </div>
  );
};
