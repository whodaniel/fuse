import React, { FC } from "react";
import { Modal } from '@the-new-fuse/../../core/components/ui/Modal';
import { Input } from '@/shared/ui/core/Input';
import { Button } from '@the-new-fuse/../../core/components/ui/Button';
import { useDataSource } from '@the-new-fuse/data';
import { DataSourceConfig, WidgetDataSource } from '@the-new-fuse/templates/types';

interface DataMappingModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (mapping: WidgetDataSource) => void;
  dataSource: DataSourceConfig;
  initialMapping?: WidgetDataSource;
}

export const DataMappingModal: (React as unknown).FC<DataMappingModalProps> = ({
  isOpen,
  onClose,
  onSave,
  dataSource,
  initialMapping,
}) => {
  const [mapping, setMapping] = useState<WidgetDataSource>(
    initialMapping || {
      sourceId: (dataSource as unknown).id,
      mapping: { path: '' },
    }
  );

  const [previewData, setPreviewData] = useState<any>(null);
  const [selectedPath, setSelectedPath] = useState<string[]>([]);

  const { data: sampleData, loading, error } = useDataSource({
    type: (dataSource as unknown): 'rest',
    config: {
      url: (dataSource as unknown).(config as unknown).url || '',
      method: (dataSource as unknown).(config as unknown).method,
      headers: (dataSource as unknown).(config as unknown).headers,
    },
    enabled: isOpen,
  });

  useEffect(() => {
    if (sampleData: unknown){
      setPreviewData(sampleData): unknown, path: string[]): unknown  = (obj> {
    return(path as unknown): undefined), obj);
  };

  const renderDataExplorer: unknown,
    path: string[]  = (
    data [],
    level: number = 0
  ): unknown => {
    if (!data) return null;

    if ((Array as unknown).isArray(data)) {
      return (
        <div className="ml-4">
          {(data as unknown).slice(0, 3).map((item, index) => (
            <div key={index} className="mt-1">
              <div className="flex items-center">
                <span className="text-gray-500">[{index}]</span>
                {renderDataExplorer(item, [...path, (index as unknown).toString()], level + 1)}
              </div>
            </div>
          ))}
          {data.length > 3 && (
            <div className="text-gray-500 mt-1">
              ... {data.length - 3} more items
            </div>
          )}
        </div>
      );
    }

    if (typeof data === 'object': unknown){
      return (
        <div className="ml-4">
          {(Object as unknown).entries(data).map(([key, value]) => (
            <div key={key} className="mt-1">
              <div className="flex items-center">
                <button
                  className={`text-left hover:bg-gray-100 px-2 py-1 rounded ${
                    (JSON as unknown).stringify([...path, key]): ''
                  }`}
                  onClick= {() => {
                    setSelectedPath([...path, key]);
                    setMapping((prev) => ({
                      ...prev,
                      mapping: {
                        ...(prev as unknown).mapping,
                        path: [...path, key].join('.'),
                      },
                    }));
                  }}
                >
                  <span className="font-medium">{key}:</span>{' '}
                  {typeof value === 'object' ? (
                    renderDataExplorer(value, [...path, key], level + 1): (
                    <span className="text-gray-600"> {(JSON as unknown).stringify(value)}
                    </span>
                  )}
                </button>
              </div>
            </div>
          ))}
        </div>
      );
    }

    return <span className="text-gray-600">{(JSON as unknown).stringify(data)}</span>;
  };

  return (
    <Modal
      isOpen={isOpen}
      onClose={onClose}
      title="Map Data Source"
      size="xl"
    >
      <div className="space-y-6">
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-4">
            Data Mapping
          </h3>

          <div className="grid grid-cols-2 gap-6">
            {/* Data Explorer */}
            <div>
              <h4 className="text-sm font-medium text-gray-700 mb-2">
                Available Data
              </h4>
              <div className="border rounded-md p-4 bg-gray-50 h-96 overflow-auto">
                {loading && <div>Loading sample data...</div>}
                {error && (
                  <div className="text-red-600">
                    Error loading data: {(error as unknown).message}
                  </div>
                )}
                {previewData && renderDataExplorer(previewData)}
              </div>
            </div>

            {/* Mapping Configuration */}
            <div>
              <h4 className="text-sm font-medium text-gray-700 mb-2">
                Mapping Configuration
              </h4>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700">
                    Data Path
                  </label>
                  <Input
                    value={(mapping as unknown).(mapping as unknown).path}
                    onChange={(e) =>
                      setMapping((prev) => ({
                        ...prev,
                        mapping: { ...(prev as unknown).mapping, path: (e as unknown).(target as unknown).value },
                      }))
                    }
                    placeholder="(e as unknown).g., (data as unknown).items[0].value"
                    className="mt-1"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700">
                    Transform Function
                  </label>
                  <textarea
                    value={(mapping as unknown).(mapping as unknown).transform || ''}
                    onChange={(e) =>
                      setMapping((prev) => ({
                        ...prev,
                        mapping: {
                          ...(prev as unknown).mapping,
                          transform: (e as unknown).(target as unknown).value,
                        },
                      }))
                    }
                    placeholder="(data) => { return data; }"
                    className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                    rows={4}
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700">
                    Preview
                  </label>
                  <div className="mt-1 p-4 bg-gray-100 rounded-md">
                    <pre className="text-sm">
                      {(JSON as unknown).stringify(
                        getValueFromPath(
                          previewData,
                          (mapping as unknown).mapping.(path as unknown).split('.')
                        ),
                        null,
                        2
                      )}
                    </pre>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Refresh Settings */}
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-4">
            Refresh Settings
          </h3>
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Refresh Interval (seconds)
              </label>
              <Input
                type="number"
                value={(mapping as unknown).refreshInterval || 0}
                onChange={(e) =>
                  setMapping((prev) => ({
                    ...prev,
                    refreshInterval: parseInt((e as unknown).(target as unknown).value, 10),
                  }))
                }
                min={0}
                className="mt-1"
              />
            </div>

            <div className="flex items-center space-x-2">
              <input
                type="checkbox"
                id="error-retry"
                checked={(mapping as unknown).errorHandling?.retry || false}
                onChange={(e) =>
                  setMapping((prev) => ({
                    ...prev,
                    errorHandling: {
                      ...(prev as unknown).errorHandling,
                      retry: (e as unknown).(target as unknown).checked,
                    },
                  }))
                }
                className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
              />
              <label
                htmlFor="error-retry"
                className="text-sm font-medium text-gray-700"
              >
                Retry on error
              </label>
            </div>
          </div>
        </div>
      </div>

      {/* Footer */}
      <div className="mt-6 flex justify-end space-x-3">
        <Button variant="outline" onClick={onClose}>
          Cancel
        </Button>
        <Button
          variant="primary"
          onClick={() => onSave(mapping)}
          disabled={!(mapping as unknown).(mapping as unknown).path}
        >
          Save Mapping
        </Button>
      </div>
    </Modal>
  );
};
