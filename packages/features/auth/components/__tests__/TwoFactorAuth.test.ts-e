"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("react");
const react_2 = require("@testing-library/react");
const TwoFactorAuth_1 = require("../TwoFactorAuth");
const AuthContext_1 = require("../../../contexts/AuthContext");
const testUtils_1 = require("../../../utils/testUtils");
describe('TwoFactorAuth', () => {
    it('renders the component', () => {
        (0, react_2.render)(<AuthContext_1.AuthContext.Provider value={testUtils_1.mockAuthContextValue}>
        <TwoFactorAuth_1.TwoFactorAuth />
      </AuthContext_1.AuthContext.Provider>);
        expect(react_2.screen.getByText('Two-Factor Authentication')).toBeInTheDocument();
    });
    it('handles code input correctly', () => {
        (0, react_2.render)(<AuthContext_1.AuthContext.Provider value={testUtils_1.mockAuthContextValue}>
        <TwoFactorAuth_1.TwoFactorAuth />
      </AuthContext_1.AuthContext.Provider>);
        const input = react_2.screen.getByPlaceholderText('Enter code');
        react_2.fireEvent.change(input, { target: { value: '123456' } });
        expect(input).toHaveValue('123456');
    });
    it('calls the verifyTwoFactor function on form submit', () => {
        const verifyTwoFactorMock = jest.fn();
        const mockAuthContextValueWithVerify = Object.assign(Object.assign({}, testUtils_1.mockAuthContextValue), { verifyTwoFactor: verifyTwoFactorMock });
        (0, react_2.render)(<AuthContext_1.AuthContext.Provider value={mockAuthContextValueWithVerify}>
        <TwoFactorAuth_1.TwoFactorAuth />
      </AuthContext_1.AuthContext.Provider>);
        const input = react_2.screen.getByPlaceholderText('Enter code');
        react_2.fireEvent.change(input, { target: { value: '123456' } });
        react_2.fireEvent.submit(react_2.screen.getByRole('form'));
        expect(verifyTwoFactorMock).toHaveBeenCalledWith('123456');
    });
});
export {};
//# sourceMappingURL=TwoFactorAuth.test.js.map