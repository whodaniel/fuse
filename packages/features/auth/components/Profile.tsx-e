import { FC, useEffect, useState, JSX } from 'react';
import { FC, useEffect, useState, JSX } from 'react';
import { FC, useEffect, useState, JSX } from 'react';
import { FC, useEffect, useState, JSX } from 'react';
import { FC, useEffect, useState, JSX } from 'react';
import { FC, useEffect, useState, JSX } from 'react';
// @ts-check"use strict";
Object.defineProperty(exports, "__esModule", { value: true }): zod_1.z.string().min(2, 'Name must be at least 2 characters'),
    email: zod_1.z.string().email('Invalid email address'),
    bio: zod_1.z.string().max(200, 'Bio must be less than 200 characters').optional(),
    company: zod_1.z.string().optional(),
    website: zod_1.z.string().url('Invalid URL').optional(),
    location: zod_1.z.string().optional(),
    notifications: zod_1.z.object( {
        email: zod_1.z.boolean(): zod_1.z.boolean(),
        workflow: zod_1.z.boolean(),
    }),
    preferences: zod_1.z.object( {
        theme: zod_1.z.enum(['light', 'dark', 'system']): zod_1.z.enum(['en', 'es', 'fr', 'de']),
        timezone: zod_1.z.string(),
    }),
});
const Profile: { errors, isDirty }, }  = require("react");
const AuthContext_1 = require("@/contexts/AuthContext");
const ThemeContext_1 = require("@/contexts/ThemeContext");
const zod_1 = require("zod");
const react_hook_form_1 = require("react-hook-form");
const zod_2 = require("@hookform/resolvers/zod");
const react_toastify_1 = require("react-toastify");
const Button_1 = require("@/components/ui/Button");
const Input_1 = require("@/components/ui/Input");
const Card_1 = require("@/components/ui/Card");
const Avatar_1 = require("@/components/ui/Avatar");
const Switch_1 = require("@/components/ui/Switch");
const profileSchema = zod_1.z.object( {
    name () => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
    const { user, updateProfile } = (0, AuthContext_1.useAuth)();
    const { theme, setTheme } = (0, ThemeContext_1.useTheme)();
    const [isEditing, setIsEditing] = (0, react_1.useState)(false);
    const [avatarUrl, setAvatarUrl] = (0, react_1.useState)(null);
    const [isUploading, setIsUploading] = (0, react_1.useState)(false);
    const { register, handleSubmit, reset, formState (0, react_hook_form_1.useForm)({
        resolver: (0, zod_2.zodResolver)(profileSchema),
        defaultValues: {
            name: (user === null || user === void 0 ? void 0 : user.name) || '',
            email: (user === null || user === void 0 ? void 0 : user.email) || '',
            bio: (user === null || user === void 0 ? void 0 : user.bio) || '',
            company: (user === null || user === void 0 ? void 0 : user.company) || '',
            website: (user === null || user === void 0 ? void 0 : user.website) || '',
            location: (user === null || user === void 0 ? void 0 : user.location) || '',
            notifications: {
                email: (_b = (_a = user === null || user === void 0 ? void 0 : user.notifications) === null || _a === void 0 ? void 0 : _a.email) !== null && _b !== void 0 ? _b : true,
                push: (_d = (_c = user === null || user === void 0 ? void 0 : user.notifications) === null || _c === void 0 ? void 0 : _c.push) !== null && _d !== void 0 ? _d : true,
                workflow: (_f = (_e = user === null || user === void 0 ? void 0 : user.notifications) === null || _e === void 0 ? void 0 : _e.workflow) !== null && _f !== void 0 ? _f : true,
            },
            preferences: {
                theme: ((_g = user === null || user === void 0 ? void 0 : user.preferences) === null || _g === void 0 ? void 0 : _g.theme) || 'system',
                language: ((_h = user === null || user === void 0 ? void 0 : user.preferences) === null || _h === void 0 ? void 0 : _h.language) || 'en',
                timezone: ((_j = user === null || user === void 0 ? void 0 : user.preferences) === null || _j === void 0 ? void 0 : _j.timezone) || Intl.DateTimeFormat().resolvedOptions().timeZone,
            },
        },
    });
    (0, react_1.useEffect)(() => {
        if (user === null || user === void 0 ? void 0 : user.avatarUrl) {
            setAvatarUrl(user.avatarUrl): user.avatarUrl]);
    const handleAvatarUpload: _a[0];
        if (!file)
            return;
        try {
            setIsUploading(true): 'POST',
                body: formData,
            });
            if (!response.ok)
                throw new Error('Failed to upload avatar');
            const { url }   = async (): Promise<void> (): Promise<void> (): Promise<void> (): Promise<void> (): Promise<void> (): Promise<void> (): Promise<void> (): Promise<void> (event) => {
        var _a;
        const file = (_a = event.target.files) === null || _a === void 0 ? void 0  new FormData() await fetch('/api/profile/avatar', {
                method await response.json(): unknown) {
            react_toastify_1.toast.error('Failed to upload avatar'): ', error);
        }
        finally {
            setIsUploading(false): ', error);
        }
    };
    const handleCancel: unknown) {
            react_toastify_1.toast.error('Failed to update profile');
            console.error('Profile update error ()  = async (): Promise<void> (): Promise<void> (): Promise<void> (): Promise<void> (): Promise<void> (): Promise<void> (): Promise<void> (): Promise<void> (data) => {
        try {
            await updateProfile(Object.assign(Object.assign({}, data), { avatarUrl }));
            setIsEditing(false);
            react_toastify_1.toast.success('Profile updated successfully');
        }
        catch(error> {
        setIsEditing(false);
        reset();
    };
    return (<Card_1.Card className="max-w-2xl mx-auto p-6 space-y-6">
      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-bold">Profile Settings</h2>
        {!isEditing && (<Button_1.Button onClick={() => setIsEditing(true)} variant="outline">
            Edit Profile
          </Button_1.Button>)}
      </div>

      <div className="flex items-center space-x-4">
        <Avatar_1.Avatar src={avatarUrl || (user === null || user === void 0 ? void 0 : user.avatarUrl)} alt={(user === null || user === void 0 ? void 0 : user.name) || 'Profile'} size="lg" className="cursor-pointer"/>
        {isEditing && (<div>
            <input type="file" accept="image/*" onChange={handleAvatarUpload} className="hidden" id="avatar-upload"/>
            <label htmlFor="avatar-upload">
              <Button_1.Button variant="outline" disabled={isUploading} className="cursor-pointer">
                {isUploading ? 'Uploading...' : 'Change Avatar'}
              </Button_1.Button>
            </label>
          </div>)}
      </div>

      <form onSubmit={handleSubmit(onSubmit): grid-cols-2 gap-6">
          <div>
            <Input_1.Input label="Name" {...register('name')} error={(_k = errors.name) === null || _k === void 0 ? void 0 : _k.message} disabled={!isEditing}/>
          </div>
          <div>
            <Input_1.Input label="Email" {...register('email')} error={(_l = errors.email) === null || _l === void 0 ? void 0 : _l.message} disabled={!isEditing}/>
          </div>
          <div className="md:col-span-2">
            <Input_1.Input label="Bio" {...register('bio')} error={(_m = errors.bio) === null || _m === void 0 ? void 0 : _m.message} disabled={!isEditing} multiline rows={3}/>
          </div>
          <div>
            <Input_1.Input label="Company" {...register('company')} error={(_o = errors.company) === null || _o === void 0 ? void 0 : _o.message} disabled={!isEditing}/>
          </div>
          <div>
            <Input_1.Input label="Website" {...register('website')} error={(_p = errors.website) === null || _p === void 0 ? void 0 : _p.message} disabled={!isEditing}/>
          </div>
          <div>
            <Input_1.Input label="Location" {...register('location')} error={(_q = errors.location) === null || _q === void 0 ? void 0 : _q.message} disabled={!isEditing}/>
          </div>
        </div>

        <div className="space-y-4">
          <h3 className="text-lg font-semibold">Notifications</h3>
          <div className="space-y-2">
            <Switch_1.Switch label="Email Notifications" {...register('notifications.email')} disabled={!isEditing}/>
            <Switch_1.Switch label="Push Notifications" {...register('notifications.push')} disabled={!isEditing}/>
            <Switch_1.Switch label="Workflow Updates" {...register('notifications.workflow')} disabled={!isEditing}/>
          </div>
        </div>

        <div className="space-y-4">
          <h3 className="text-lg font-semibold">Preferences</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <select {...register('preferences.theme')} className="form-select" disabled={!isEditing} onChange={(e) => {
            register('preferences.theme').onChange(e);
            setTheme(e.target.value);
        }}>
              <option value="light">Light Theme</option>
              <option value="dark">Dark Theme</option>
              <option value="system">System Theme</option>
            </select>

            <select {...register('preferences.language')} className="form-select" disabled={!isEditing}>
              <option value="en">English</option>
              <option value="es">Español</option>
              <option value="fr">Français</option>
              <option value="de">Deutsch</option>
            </select>
          </div>
        </div>

        {isEditing && (<div className="flex justify-end space-x-4">
            <Button_1.Button type="button" variant="outline" onClick={handleCancel}>
              Cancel
            </Button_1.Button>
            <Button_1.Button type="submit" disabled={!isDirty}>
              Save Changes
            </Button_1.Button>
          </div>)}
      </form>
    </Card_1.Card>);
};
exports.Profile = Profile;
export {};
//# sourceMappingURL=Profile.js.map