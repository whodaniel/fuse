import React, { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { useToast } from '../../hooks/useToast';
import { Card } from '../ui/Card';
import { Input } from '../ui/Input';
import { Button } from '../ui/Button';
import { Link } from 'react-router-dom';

const forgotPasswordSchema = z.object({
  email: z.string().email('Please enter a valid email address'),
});

type ForgotPasswordData = z.infer<typeof forgotPasswordSchema>;

export const ForgotPassword: React.FC = () => {
  const [isSubmitted, setIsSubmitted] = useState(false);
  const { toast } = useToast();
  
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
  } = useForm<ForgotPasswordData>({
    resolver: zodResolver(forgotPasswordSchema),
  });

  const onSubmit = async (): Promise<void> (): Promise<void> (data: ForgotPasswordData) => {
    try {
      const response = await fetch('/api/auth/forgot-password', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });

      if (!response.ok) throw new Error('Failed to send reset email');

      setIsSubmitted(true);
      toast({
        title: 'Reset email sent',
        description: 'Check your email for password reset instructions.',
        variant: 'success',
      });
    } catch (error) {
      toast({
        title: 'Error',
        description: 'Failed to send reset email. Please try again.',
        variant: 'error',
      });
    }
  };

  return (
    <Card className="w-full max-w-md mx-auto mt-8 p-6">
      <div className="text-center mb-6">
        <h1 className="text-2xl font-bold">Reset Password</h1>
        <p className="text-gray-600 mt-2">
          Enter your email address to receive reset instructions
        </p>
      </div>

      {!isSubmitted ? (
        <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
          <Input
            label="Email"
            type="email"
            {...register('email')}
            error={errors.email?.message}
          />
          
          <Button
            type="submit"
            className="w-full"
            loading={isSubmitting}
          >
            Send Reset Instructions
          </Button>

          <div className="text-center mt-4">
            <Link
              to="/login"
              className="text-sm text-primary hover:text-primary-dark"
            >
              Back to Login
            </Link>
          </div>
        </form>
      ) : (
        <div className="text-center space-y-4">
          <div className="bg-green-50 p-4 rounded-lg">
            <p className="text-sm text-green-800">
              Check your email for password reset instructions.
            </p>
          </div>
          
          <Button
            variant="outline"
            onClick={() => setIsSubmitted(false)}
            className="mt-4"
          >
            Send Again
          </Button>
        </div>
      )}
    </Card>
  );
};