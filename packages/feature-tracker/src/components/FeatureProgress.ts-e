"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeatureProgress = void 0;
const react_1 = __importDefault(require("react"));
const types_1 = require("../types");
const ProgressBar = ({ percentage }) => (<div className="w-full h-2 bg-gray-200 rounded-full">
    <div className="h-full bg-blue-500 rounded-full transition-all duration-300" style={{ width: `${percentage}%` }}/>
  </div>);
const StageIndicator = ({ stage, isActive, isCompleted, }) => (<div className={`flex flex-col items-center ${isActive ? 'text-blue-500' : isCompleted ? 'text-green-500' : 'text-gray-400'}`}>
    <div className={`w-4 h-4 rounded-full ${isActive
        ? 'bg-blue-500'
        : isCompleted
            ? 'bg-green-500'
            : 'bg-gray-400'}`}/>
    <span className="text-sm mt-1">{stage}</span>
  </div>);
const FeatureProgress = ({ feature }) => {
    const stages = Object.values(types_1.FeatureStage);
    const currentStageIndex = stages.indexOf(feature.currentStage);
    return (<div className="p-4 bg-white rounded-lg shadow">
      <div className="mb-4">
        <h2 className="text-xl font-semibold">{feature.name}</h2>
        <p className="text-gray-600">{feature.description}</p>
      </div>

      <div className="mb-6">
        <div className="flex justify-between mb-2">
          {stages.map((stage, index) => (<StageIndicator key={stage} stage={stage} isActive={stage === feature.currentStage} isCompleted={index < currentStageIndex}/>))}
        </div>
        <ProgressBar percentage={feature.completionPercentage}/>
      </div>

      <div className="grid grid-cols-2 gap-4">
        <div>
          <h3 className="font-semibold mb-2">Code Metrics</h3>
          <ul className="space-y-1 text-sm">
            <li>Lines of Code: {feature.metrics.linesOfCode}</li>
            <li>Files Modified: {feature.metrics.filesModified.length}</li>
            <li>New Files: {feature.metrics.newFiles.length}</li>
            <li>Test Coverage: {feature.metrics.testCoverage}%</li>
          </ul>
        </div>

        <div>
          <h3 className="font-semibold mb-2">Challenges & Risks</h3>
          <ul className="space-y-1 text-sm">
            {feature.qualitativeAssessment.challenges.map((challenge, index) => (<li key={`challenge-${index}`} className="text-orange-600">
                {challenge}
              </li>))}
            {feature.qualitativeAssessment.risks.map((risk, index) => (<li key={`risk-${index}`} className="text-red-600">
                {risk}
              </li>))}
          </ul>
        </div>
      </div>

      {feature.qualitativeAssessment.notes && (<div className="mt-4">
          <h3 className="font-semibold mb-2">Notes</h3>
          <p className="text-sm text-gray-600">
            {feature.qualitativeAssessment.notes}
          </p>
        </div>)}
    </div>);
};
exports.FeatureProgress = FeatureProgress;
//# sourceMappingURL=FeatureProgress.js.mapexport {};
