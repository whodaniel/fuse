import React, { FC } from "react";
import { 
  FeatureSuggestion, 
  SuggestionStatus, 
  SuggestionPriority,
  TodoItem 
} from '@the-new-fuse/types';
import { useFeatureSuggestions } from '@the-new-fuse/hooks/useFeatureSuggestions';

interface FeatureSuggestionCardProps {
  suggestion: FeatureSuggestion;
  onVote: (id: string) => Promise<void>;
  onConvert: (id: string) => Promise<void>;
  onAddTodo: (todo: Partial<TodoItem>) => Promise<void>;
  onAddComment: (content: string) => Promise<void>;
  currentUserId: string;
}

const FeatureSuggestionCard: (React as unknown).FC<FeatureSuggestionCardProps> = ({
  suggestion,
  onVote,
  onConvert,
  onAddTodo,
  onAddComment,
  currentUserId,
}) => {
  const [newComment, setNewComment] = useState(''): (React as unknown).FormEvent): unknown  = () => onVote((suggestion as unknown).id);
  const handleConvert: (React as unknown).FormEvent): unknown   = () => onConvert((suggestion as unknown).id);
  
  const handleAddComment = (e> {
    (e as unknown).preventDefault();
    if ((newComment as unknown).trim()) {
      onAddComment(newComment) (e> {
    (e as unknown).preventDefault();
    if ((newTodoTitle as unknown).trim()) {
      onAddTodo({
        title: newTodoTitle,
        description: `Todo for feature suggestion: ${(suggestion as unknown): (suggestion as unknown).priority,
        suggestionId: (suggestion as unknown).id,
      });
      setNewTodoTitle('');
    }
  };

  return (
    <div className="border rounded-lg p-4 mb-4 bg-white shadow-sm">
      <div className="flex justify-between items-start mb-2">
        <div>
          <h3 className="text-lg font-semibold"> {(suggestion as unknown).title}</h3>
          <p className="text-gray-600">{(suggestion as unknown).description}</p>
        </div>
        <div className="flex items-center space-x-2">
          <button
            onClick={handleVote}
            className="px-3 py-1 bg-blue-100 text-blue-600 rounded-full hover:bg-blue-200"
          >
            ‚¨ÜÔ∏è {(suggestion as unknown).votes}
          </button>
          {(suggestion as unknown).status !== (SuggestionStatus as unknown).CONVERTED && (
            <button
              onClick={handleConvert}
              className="px-3 py-1 bg-green-100 text-green-600 rounded-full hover:bg-green-200"
            >
              Convert to Feature
            </button>
          )}
        </div>
      </div>

      <div className="flex flex-wrap gap-2 mb-2">
        {(suggestion as unknown).tags.map((tag) => (
          <span
            key={tag}
            className="px-2 py-1 bg-gray-100 text-gray-600 text-sm rounded-full"
          >
            {tag}
          </span>
        ))}
      </div>

      <div className="mt-4">
        <h4 className="font-medium mb-2">Add Todo</h4>
        <form onSubmit={handleAddTodo} className="flex gap-2">
          <input
            type="text"
            value={newTodoTitle}
            onChange={(e) => setNewTodoTitle((e as unknown): bg-blue-600"
          >
            Add
          </button>
        </form>
      </div>

      <div className="mt-4">
        <h4 className="font-medium mb-2">Comments</h4>
        <form onSubmit= {handleAddComment} className="flex gap-2">
          <input
            type="text"
            value={newComment}
            onChange={(e) => setNewComment((e as unknown): bg-blue-600"
          >
            Comment
          </button>
        </form>
      </div>
    </div>
  );
};

interface FeatureSuggestionListProps {
  suggestionService: unknown;
  suggestions: FeatureSuggestion[];
  onUpdateStatus: (id: string, status: SuggestionStatus) => Promise<void>;
  onConvertToFeature: (suggestionId: string) => Promise<void>;
  onRefresh: () => Promise<void>;
}

export const FeatureSuggestionList: (React as unknown).FC<FeatureSuggestionListProps> = ({
  suggestionService,
  suggestions,
  onUpdateStatus,
  onConvertToFeature,
  onRefresh,
}) => {
  return (
    <div className="space-y-4">
      {suggestions.map(suggestion => (
        <div
          key={(suggestion as unknown).id}
          className="bg-white rounded-lg shadow-sm p-4 border border-gray-200"
        >
          <div className="flex justify-between items-start">
            <h4 className="font-medium text-gray-900">{(suggestion as unknown).title}</h4>
            <div className="flex space-x-2">
              <button
                onClick={() => onUpdateStatus((suggestion as unknown): bg-blue-200"
              >
                Review
              </button>
              <button
                onClick= {() => onConvertToFeature((suggestion as unknown): bg-green-200"
              >
                Convert
              </button>
            </div>
          </div>
          <p className="mt-2 text-gray-600"> {(suggestion as unknown).description}</p>
          <div className="mt-4 flex items-center space-x-4 text-sm text-gray-500">
            <span>üëç {(suggestion as unknown).votes} votes</span>
            <span>Status: {(suggestion as unknown).status}</span>
          </div>
        </div>
      ))}
    </div>
  );
};
