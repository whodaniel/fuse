// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Task {
  id          String      @id @default(uuid())
  title       String
  description String?
  status      TaskStatus  @default(PENDING)
  priority    TaskPriority @default(MEDIUM)
  type        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  dueDate     DateTime?
  assignedTo  String?
  createdBy   String
  metadata    Json?
  tags        String[]    @default([])
  dependencies String[]   @default([])
  error       String?
  completedAt DateTime?

  @@map("tasks")
}

model Agent {
  id          String      @id @default(uuid())
  name        String
  description String?
  type        String
  status      AgentStatus @default(IDLE)
  capabilities String[]
  provider    String
  lastActive  DateTime    @default(now())
  metadata    Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Agency Association (optional for backward compatibility)
  agencyId    String?
  
  @@index([agencyId])
  @@map("agents")
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum AgentStatus {
  IDLE
  BUSY
  ERROR
  OFFLINE
}

// =====================================================
// AGENCY HUB MODELS
// =====================================================

model Agency {
  id String @id @default(uuid())
  
  // Basic Info
  name      String
  subdomain String @unique
  slug      String @unique
  
  // Subscription & Billing
  subscriptionTier   AgencyTier           @default(TRIAL)
  subscriptionStatus SubscriptionStatus   @default(TRIAL)
  billingEmail       String
  
  // Customization
  branding Json? // { logo, primaryColor, secondaryColor, favicon, fonts }
  settings Json? // { allowedFeatures, integrations, customDomain }
  
  // Limits & Quotas
  userLimit    Int @default(5)
  agentLimit   Int @default(10)
  storageLimit Int @default(1000) // MB
  
  // Lifecycle
  isActive    Boolean   @default(true)
  trialEndsAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  users         User[]
  chats         Chat[]
  sessions      Session[]
  subscriptions AgencySubscription[]
  auditLogs     AgencyAuditLog[]
  
  // Swarm Orchestration Relations
  swarmExecutions SwarmExecution[]
  serviceRequests ServiceRequest[]
  serviceProviders ServiceProvider[]
  
  @@map("agencies")
}

model User {
  id           String   @id @default(cuid())
  email        String   
  name         String?
  passwordHash String
  
  // Agency Scoping
  agencyId String
  agency   Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  
  // Enhanced Role System
  role        EnhancedUserRole @default(AGENCY_USER)
  permissions Json?            // Agency-specific permissions override
  
  // Lifecycle
  isActive            Boolean   @default(true)
  onboardingCompleted Boolean   @default(false)
  emailVerified       Boolean   @default(false)
  lastLoginAt         DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  createdChats   Chat[]    @relation("ChatCreator")
  sessions       Session[]
  auditLogs      AgencyAuditLog[] @relation("AuditUser")
  serviceRequests ServiceRequest[]
  providerReviews ProviderReview[]
  serviceReviews  ServiceReview[]
  
  @@unique([email, agencyId])
  @@index([agencyId])
  @@index([email])
  @@map("users")
}

model Chat {
  id       String @id @default(uuid())
  agencyId String
  agency   Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  
  title     String?
  createdBy String
  creator   User   @relation("ChatCreator", fields: [createdBy], references: [id])
  
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([agencyId])
  @@index([createdBy])
  @@map("chats")
}

model Session {
  id       String @id @default(uuid())
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  agencyId String
  agency   Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  @@index([userId])
  @@index([agencyId])
  @@index([token])
  @@map("sessions")
}

// =====================================================
// SWARM ORCHESTRATION MODELS
// =====================================================

model SwarmExecution {
  id String @id @default(uuid())
  
  // Core Info
  serviceRequestId String?
  agencyId         String
  agency           Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  
  // Execution State
  status        SwarmExecutionStatus @default(INITIALIZING)
  qualityScore  Float?               @default(0.0)
  
  // Agent Assignment
  activeAgents Json // Array of agent IDs
  
  // Execution Plan & Results
  executionPlan Json // Array of ExecutionStep objects
  results       Json? // Final consolidated results
  
  // Timing
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  
  // Relations
  executionSteps ExecutionStep[]
  messages       SwarmMessage[]
  
  @@index([agencyId])
  @@index([status])
  @@index([startedAt])
  @@map("swarm_executions")
}

model ExecutionStep {
  id String @id @default(uuid())
  
  // Execution Reference
  swarmExecutionId String
  swarmExecution   SwarmExecution @relation(fields: [swarmExecutionId], references: [id], onDelete: Cascade)
  
  // Step Details
  stepId       String
  agentId      String
  action       String
  input        Json?
  output       Json?
  
  // Status & Quality
  status       ExecutionStepStatus @default(PENDING)
  qualityScore Float?              @default(0.0)
  confidence   Float?              @default(0.0)
  
  // Timing
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  
  @@index([swarmExecutionId])
  @@index([agentId])
  @@index([status])
  @@map("execution_steps")
}

model SwarmMessage {
  id String @id @default(uuid())
  
  // Execution Context
  swarmExecutionId String
  swarmExecution   SwarmExecution @relation(fields: [swarmExecutionId], references: [id], onDelete: Cascade)
  
  // Message Details
  fromAgentId String
  toAgentId   String?
  type        MessageType @default(TASK_ASSIGNMENT)
  priority    MessagePriority @default(NORMAL)
  
  // Content
  content     Json
  metadata    Json?
  
  // Status
  status      MessageStatus @default(PENDING)
  processedAt DateTime?
  
  createdAt DateTime @default(now())
  
  @@index([swarmExecutionId])
  @@index([fromAgentId])
  @@index([toAgentId])
  @@index([status])
  @@map("swarm_messages")
}

// =====================================================
// SERVICE ROUTING MODELS
// =====================================================

model ServiceCategory {
  id String @id @default(uuid())
  
  // Hierarchy
  parentId String?
  parent   ServiceCategory? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children ServiceCategory[] @relation("CategoryHierarchy")
  
  // Category Details
  name        String
  description String?
  slug        String @unique
  
  // Configuration
  isActive           Boolean @default(true)
  requiresApproval   Boolean @default(false)
  estimatedDuration  Int?    // minutes
  basePricing        Json?   // { currency, basePrice, pricePerHour }
  complexityFactors  Json?   // { simple: 1.0, medium: 1.5, complex: 2.0 }
  
  // Relations
  serviceRequests ServiceRequest[]
  providers       ServiceProvider[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([parentId])
  @@index([slug])
  @@map("service_categories")
}

model ServiceProvider {
  id String @id @default(uuid())
  
  // Provider Details
  agencyId String
  agency   Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  agentId  String
  
  // Service Categories
  categoryId String
  category   ServiceCategory @relation(fields: [categoryId], references: [id])
  
  // Capability & Performance
  capabilities     Json  // { skills, tools, specializations }
  qualityRating    Float @default(0.0)
  completionRate   Float @default(0.0)
  averageRating    Float @default(0.0)
  totalCompletions Int   @default(0)
  
  // Availability
  isActive       Boolean @default(true)
  maxConcurrent  Int     @default(3)
  currentLoad    Int     @default(0)
  
  // Configuration
  pricingOverride Json? // Override category pricing
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  serviceRequests ServiceRequest[]
  reviews         ProviderReview[]
  
  @@unique([agencyId, agentId, categoryId])
  @@index([agencyId])
  @@index([categoryId])
  @@index([qualityRating])
  @@map("service_providers")
}

model ServiceRequest {
  id String @id @default(uuid())
  
  // Request Details
  agencyId String
  agency   Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  
  categoryId String
  category   ServiceCategory @relation(fields: [categoryId], references: [id])
  
  // Assignment
  providerId String?
  provider   ServiceProvider? @relation(fields: [providerId], references: [id])
  
  // Request Content
  title       String
  description String
  requirements Json?
  
  // Execution
  status          ServiceRequestStatus @default(PENDING)
  priority        RequestPriority      @default(NORMAL)
  estimatedCost   Decimal?             @db.Decimal(10, 2)
  actualCost      Decimal?             @db.Decimal(10, 2)
  
  // Quality & Completion
  qualityScore    Float?
  clientSatisfaction Float?
  
  // Timing
  requestedAt DateTime  @default(now())
  assignedAt  DateTime?
  startedAt   DateTime?
  completedAt DateTime?
  dueDate     DateTime?
  
  // Results
  deliverables Json?
  notes        String?
  
  // Relations
  reviews ServiceReview[]
  
  @@index([agencyId])
  @@index([userId])
  @@index([categoryId])
  @@index([providerId])
  @@index([status])
  @@map("service_requests")
}

model ProviderReview {
  id String @id @default(uuid())
  
  // Review Details
  providerId String
  provider   ServiceProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  
  reviewerId String
  reviewer   User   @relation(fields: [reviewerId], references: [id])
  
  // Rating & Feedback
  rating   Int    // 1-5 stars
  comment  String?
  criteria Json?  // { quality, speed, communication, accuracy }
  
  // Context
  serviceType String?
  
  createdAt DateTime @default(now())
  
  @@index([providerId])
  @@index([reviewerId])
  @@map("provider_reviews")
}

model ServiceReview {
  id String @id @default(uuid())
  
  // Review Details
  serviceRequestId String
  serviceRequest   ServiceRequest @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
  
  reviewerId String
  reviewer   User   @relation(fields: [reviewerId], references: [id])
  
  // Rating & Feedback
  overallRating   Int     // 1-5 stars
  qualityRating   Int?    // 1-5 stars
  speedRating     Int?    // 1-5 stars
  communicationRating Int? // 1-5 stars
  
  comment         String?
  recommendations String?
  
  createdAt DateTime @default(now())
  
  @@unique([serviceRequestId, reviewerId])
  @@index([serviceRequestId])
  @@map("service_reviews")
}

// =====================================================
// SUBSCRIPTION & BILLING MODELS
// =====================================================

model AgencySubscription {
  id       String @id @default(uuid())
  agencyId String
  agency   Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  
  // Subscription Details
  tier         AgencyTier
  status       SubscriptionStatus @default(ACTIVE)
  billingCycle BillingCycle       @default(MONTHLY)
  
  // Pricing
  pricePerMonth Decimal @db.Decimal(10, 2)
  currency      String  @default("USD")
  
  // Lifecycle
  startedAt  DateTime  @default(now())
  endsAt     DateTime?
  renewedAt  DateTime?
  cancelledAt DateTime?
  
  // Payment Integration
  stripeSubscriptionId String?
  paymentMethodId      String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([agencyId])
  @@index([status])
  @@index([stripeSubscriptionId])
  @@map("agency_subscriptions")
}

model AgencyAuditLog {
  id       String @id @default(uuid())
  agencyId String
  agency   Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  
  userId String?
  user   User?   @relation("AuditUser", fields: [userId], references: [id])
  
  action      String
  entityType  String
  entityId    String?
  changes     Json?
  metadata    Json?
  ipAddress   String?
  userAgent   String?
  
  createdAt DateTime @default(now())
  
  @@index([agencyId])
  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("agency_audit_logs")
}

// =====================================================
// ENUMS
// =====================================================

enum AgencyTier {
  TRIAL
  BASIC
  PROFESSIONAL
  ENTERPRISE
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PAST_DUE
  CANCELLED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  UNPAID
}

enum BillingCycle {
  MONTHLY
  QUARTERLY
  YEARLY
}

enum EnhancedUserRole {
  SUPER_ADMIN
  AGENCY_OWNER
  AGENCY_ADMIN
  AGENCY_MANAGER
  AGENCY_USER
  AGENT_OPERATOR
}

enum SwarmExecutionStatus {
  INITIALIZING
  PLANNING
  EXECUTING
  COORDINATING
  FINALIZING
  COMPLETED
  FAILED
  CANCELLED
}

enum ExecutionStepStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  SKIPPED
  RETRYING
}

enum MessageType {
  TASK_ASSIGNMENT
  STATUS_UPDATE
  RESULT_SHARING
  COORDINATION
  ERROR_REPORT
  RESOURCE_REQUEST
}

enum MessagePriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum MessageStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum ServiceRequestStatus {
  PENDING
  ASSIGNED
  IN_PROGRESS
  REVIEW
  COMPLETED
  CANCELLED
  FAILED
}

enum RequestPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}
