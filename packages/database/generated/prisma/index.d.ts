
/**
 * Client
**/

import * as runtime from './runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions

export type PrismaPromise<T> = $Public.PrismaPromise<T>


export type TaskPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Task"
  objects: {}
  scalars: $Extensions.GetResult<{
    id: string
    title: string
    description: string | null
    status: TaskStatus
    priority: TaskPriority
    type: string
    createdAt: Date
    updatedAt: Date
    dueDate: Date | null
    assignedTo: string | null
    createdBy: string
    metadata: Prisma.JsonValue | null
    tags: string[]
    dependencies: string[]
    error: string | null
    completedAt: Date | null
  }, ExtArgs["result"]["task"]>
  composites: {}
}

/**
 * Model Task
 * 
 */
export type Task = runtime.Types.DefaultSelection<TaskPayload>
export type AgentPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Agent"
  objects: {}
  scalars: $Extensions.GetResult<{
    id: string
    name: string
    description: string | null
    type: string
    status: AgentStatus
    capabilities: string[]
    provider: string
    lastActive: Date
    metadata: Prisma.JsonValue | null
    createdAt: Date
    updatedAt: Date
    agencyId: string | null
  }, ExtArgs["result"]["agent"]>
  composites: {}
}

/**
 * Model Agent
 * 
 */
export type Agent = runtime.Types.DefaultSelection<AgentPayload>
export type AgencyPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Agency"
  objects: {
    users: UserPayload<ExtArgs>[]
    chats: ChatPayload<ExtArgs>[]
    sessions: SessionPayload<ExtArgs>[]
    subscriptions: AgencySubscriptionPayload<ExtArgs>[]
    auditLogs: AgencyAuditLogPayload<ExtArgs>[]
    swarmExecutions: SwarmExecutionPayload<ExtArgs>[]
    serviceRequests: ServiceRequestPayload<ExtArgs>[]
    serviceProviders: ServiceProviderPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    name: string
    subdomain: string
    slug: string
    subscriptionTier: AgencyTier
    subscriptionStatus: SubscriptionStatus
    billingEmail: string
    branding: Prisma.JsonValue | null
    settings: Prisma.JsonValue | null
    userLimit: number
    agentLimit: number
    storageLimit: number
    isActive: boolean
    trialEndsAt: Date | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["agency"]>
  composites: {}
}

/**
 * Model Agency
 * 
 */
export type Agency = runtime.Types.DefaultSelection<AgencyPayload>
export type UserPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "User"
  objects: {
    agency: AgencyPayload<ExtArgs>
    createdChats: ChatPayload<ExtArgs>[]
    sessions: SessionPayload<ExtArgs>[]
    auditLogs: AgencyAuditLogPayload<ExtArgs>[]
    serviceRequests: ServiceRequestPayload<ExtArgs>[]
    providerReviews: ProviderReviewPayload<ExtArgs>[]
    serviceReviews: ServiceReviewPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    email: string
    name: string | null
    passwordHash: string
    agencyId: string
    role: EnhancedUserRole
    permissions: Prisma.JsonValue | null
    isActive: boolean
    onboardingCompleted: boolean
    emailVerified: boolean
    lastLoginAt: Date | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["user"]>
  composites: {}
}

/**
 * Model User
 * 
 */
export type User = runtime.Types.DefaultSelection<UserPayload>
export type ChatPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Chat"
  objects: {
    agency: AgencyPayload<ExtArgs>
    creator: UserPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    agencyId: string
    title: string | null
    createdBy: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["chat"]>
  composites: {}
}

/**
 * Model Chat
 * 
 */
export type Chat = runtime.Types.DefaultSelection<ChatPayload>
export type SessionPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Session"
  objects: {
    user: UserPayload<ExtArgs>
    agency: AgencyPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    userId: string
    agencyId: string
    token: string
    expiresAt: Date
    createdAt: Date
  }, ExtArgs["result"]["session"]>
  composites: {}
}

/**
 * Model Session
 * 
 */
export type Session = runtime.Types.DefaultSelection<SessionPayload>
export type SwarmExecutionPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "SwarmExecution"
  objects: {
    agency: AgencyPayload<ExtArgs>
    executionSteps: ExecutionStepPayload<ExtArgs>[]
    messages: SwarmMessagePayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    serviceRequestId: string | null
    agencyId: string
    status: SwarmExecutionStatus
    qualityScore: number | null
    activeAgents: Prisma.JsonValue
    executionPlan: Prisma.JsonValue
    results: Prisma.JsonValue | null
    startedAt: Date
    completedAt: Date | null
  }, ExtArgs["result"]["swarmExecution"]>
  composites: {}
}

/**
 * Model SwarmExecution
 * 
 */
export type SwarmExecution = runtime.Types.DefaultSelection<SwarmExecutionPayload>
export type ExecutionStepPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "ExecutionStep"
  objects: {
    swarmExecution: SwarmExecutionPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    swarmExecutionId: string
    stepId: string
    agentId: string
    action: string
    input: Prisma.JsonValue | null
    output: Prisma.JsonValue | null
    status: ExecutionStepStatus
    qualityScore: number | null
    confidence: number | null
    startedAt: Date
    completedAt: Date | null
  }, ExtArgs["result"]["executionStep"]>
  composites: {}
}

/**
 * Model ExecutionStep
 * 
 */
export type ExecutionStep = runtime.Types.DefaultSelection<ExecutionStepPayload>
export type SwarmMessagePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "SwarmMessage"
  objects: {
    swarmExecution: SwarmExecutionPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    swarmExecutionId: string
    fromAgentId: string
    toAgentId: string | null
    type: MessageType
    priority: MessagePriority
    content: Prisma.JsonValue
    metadata: Prisma.JsonValue | null
    status: MessageStatus
    processedAt: Date | null
    createdAt: Date
  }, ExtArgs["result"]["swarmMessage"]>
  composites: {}
}

/**
 * Model SwarmMessage
 * 
 */
export type SwarmMessage = runtime.Types.DefaultSelection<SwarmMessagePayload>
export type ServiceCategoryPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "ServiceCategory"
  objects: {
    parent: ServiceCategoryPayload<ExtArgs> | null
    children: ServiceCategoryPayload<ExtArgs>[]
    serviceRequests: ServiceRequestPayload<ExtArgs>[]
    providers: ServiceProviderPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    parentId: string | null
    name: string
    description: string | null
    slug: string
    isActive: boolean
    requiresApproval: boolean
    estimatedDuration: number | null
    basePricing: Prisma.JsonValue | null
    complexityFactors: Prisma.JsonValue | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["serviceCategory"]>
  composites: {}
}

/**
 * Model ServiceCategory
 * 
 */
export type ServiceCategory = runtime.Types.DefaultSelection<ServiceCategoryPayload>
export type ServiceProviderPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "ServiceProvider"
  objects: {
    agency: AgencyPayload<ExtArgs>
    category: ServiceCategoryPayload<ExtArgs>
    serviceRequests: ServiceRequestPayload<ExtArgs>[]
    reviews: ProviderReviewPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    agencyId: string
    agentId: string
    categoryId: string
    capabilities: Prisma.JsonValue
    qualityRating: number
    completionRate: number
    averageRating: number
    totalCompletions: number
    isActive: boolean
    maxConcurrent: number
    currentLoad: number
    pricingOverride: Prisma.JsonValue | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["serviceProvider"]>
  composites: {}
}

/**
 * Model ServiceProvider
 * 
 */
export type ServiceProvider = runtime.Types.DefaultSelection<ServiceProviderPayload>
export type ServiceRequestPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "ServiceRequest"
  objects: {
    agency: AgencyPayload<ExtArgs>
    user: UserPayload<ExtArgs>
    category: ServiceCategoryPayload<ExtArgs>
    provider: ServiceProviderPayload<ExtArgs> | null
    reviews: ServiceReviewPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    agencyId: string
    userId: string
    categoryId: string
    providerId: string | null
    title: string
    description: string
    requirements: Prisma.JsonValue | null
    status: ServiceRequestStatus
    priority: RequestPriority
    estimatedCost: Prisma.Decimal | null
    actualCost: Prisma.Decimal | null
    qualityScore: number | null
    clientSatisfaction: number | null
    requestedAt: Date
    assignedAt: Date | null
    startedAt: Date | null
    completedAt: Date | null
    dueDate: Date | null
    deliverables: Prisma.JsonValue | null
    notes: string | null
  }, ExtArgs["result"]["serviceRequest"]>
  composites: {}
}

/**
 * Model ServiceRequest
 * 
 */
export type ServiceRequest = runtime.Types.DefaultSelection<ServiceRequestPayload>
export type ProviderReviewPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "ProviderReview"
  objects: {
    provider: ServiceProviderPayload<ExtArgs>
    reviewer: UserPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    providerId: string
    reviewerId: string
    rating: number
    comment: string | null
    criteria: Prisma.JsonValue | null
    serviceType: string | null
    createdAt: Date
  }, ExtArgs["result"]["providerReview"]>
  composites: {}
}

/**
 * Model ProviderReview
 * 
 */
export type ProviderReview = runtime.Types.DefaultSelection<ProviderReviewPayload>
export type ServiceReviewPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "ServiceReview"
  objects: {
    serviceRequest: ServiceRequestPayload<ExtArgs>
    reviewer: UserPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    serviceRequestId: string
    reviewerId: string
    overallRating: number
    qualityRating: number | null
    speedRating: number | null
    communicationRating: number | null
    comment: string | null
    recommendations: string | null
    createdAt: Date
  }, ExtArgs["result"]["serviceReview"]>
  composites: {}
}

/**
 * Model ServiceReview
 * 
 */
export type ServiceReview = runtime.Types.DefaultSelection<ServiceReviewPayload>
export type AgencySubscriptionPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "AgencySubscription"
  objects: {
    agency: AgencyPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    agencyId: string
    tier: AgencyTier
    status: SubscriptionStatus
    billingCycle: BillingCycle
    pricePerMonth: Prisma.Decimal
    currency: string
    startedAt: Date
    endsAt: Date | null
    renewedAt: Date | null
    cancelledAt: Date | null
    stripeSubscriptionId: string | null
    paymentMethodId: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["agencySubscription"]>
  composites: {}
}

/**
 * Model AgencySubscription
 * 
 */
export type AgencySubscription = runtime.Types.DefaultSelection<AgencySubscriptionPayload>
export type AgencyAuditLogPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "AgencyAuditLog"
  objects: {
    agency: AgencyPayload<ExtArgs>
    user: UserPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    id: string
    agencyId: string
    userId: string | null
    action: string
    entityType: string
    entityId: string | null
    changes: Prisma.JsonValue | null
    metadata: Prisma.JsonValue | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date
  }, ExtArgs["result"]["agencyAuditLog"]>
  composites: {}
}

/**
 * Model AgencyAuditLog
 * 
 */
export type AgencyAuditLog = runtime.Types.DefaultSelection<AgencyAuditLogPayload>

/**
 * Enums
 */

export const TaskStatus: {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

export type TaskStatus = (typeof TaskStatus)[keyof typeof TaskStatus]


export const TaskPriority: {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

export type TaskPriority = (typeof TaskPriority)[keyof typeof TaskPriority]


export const AgentStatus: {
  IDLE: 'IDLE',
  BUSY: 'BUSY',
  ERROR: 'ERROR',
  OFFLINE: 'OFFLINE'
};

export type AgentStatus = (typeof AgentStatus)[keyof typeof AgentStatus]


export const AgencyTier: {
  TRIAL: 'TRIAL',
  BASIC: 'BASIC',
  PROFESSIONAL: 'PROFESSIONAL',
  ENTERPRISE: 'ENTERPRISE'
};

export type AgencyTier = (typeof AgencyTier)[keyof typeof AgencyTier]


export const SubscriptionStatus: {
  TRIAL: 'TRIAL',
  ACTIVE: 'ACTIVE',
  PAST_DUE: 'PAST_DUE',
  CANCELLED: 'CANCELLED',
  INCOMPLETE: 'INCOMPLETE',
  INCOMPLETE_EXPIRED: 'INCOMPLETE_EXPIRED',
  UNPAID: 'UNPAID'
};

export type SubscriptionStatus = (typeof SubscriptionStatus)[keyof typeof SubscriptionStatus]


export const EnhancedUserRole: {
  SUPER_ADMIN: 'SUPER_ADMIN',
  AGENCY_OWNER: 'AGENCY_OWNER',
  AGENCY_ADMIN: 'AGENCY_ADMIN',
  AGENCY_MANAGER: 'AGENCY_MANAGER',
  AGENCY_USER: 'AGENCY_USER',
  AGENT_OPERATOR: 'AGENT_OPERATOR'
};

export type EnhancedUserRole = (typeof EnhancedUserRole)[keyof typeof EnhancedUserRole]


export const SwarmExecutionStatus: {
  INITIALIZING: 'INITIALIZING',
  PLANNING: 'PLANNING',
  EXECUTING: 'EXECUTING',
  COORDINATING: 'COORDINATING',
  FINALIZING: 'FINALIZING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

export type SwarmExecutionStatus = (typeof SwarmExecutionStatus)[keyof typeof SwarmExecutionStatus]


export const ExecutionStepStatus: {
  PENDING: 'PENDING',
  RUNNING: 'RUNNING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  SKIPPED: 'SKIPPED',
  RETRYING: 'RETRYING'
};

export type ExecutionStepStatus = (typeof ExecutionStepStatus)[keyof typeof ExecutionStepStatus]


export const MessageType: {
  TASK_ASSIGNMENT: 'TASK_ASSIGNMENT',
  STATUS_UPDATE: 'STATUS_UPDATE',
  RESULT_SHARING: 'RESULT_SHARING',
  COORDINATION: 'COORDINATION',
  ERROR_REPORT: 'ERROR_REPORT',
  RESOURCE_REQUEST: 'RESOURCE_REQUEST'
};

export type MessageType = (typeof MessageType)[keyof typeof MessageType]


export const MessagePriority: {
  LOW: 'LOW',
  NORMAL: 'NORMAL',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

export type MessagePriority = (typeof MessagePriority)[keyof typeof MessagePriority]


export const MessageStatus: {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};

export type MessageStatus = (typeof MessageStatus)[keyof typeof MessageStatus]


export const ServiceRequestStatus: {
  PENDING: 'PENDING',
  ASSIGNED: 'ASSIGNED',
  IN_PROGRESS: 'IN_PROGRESS',
  REVIEW: 'REVIEW',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  FAILED: 'FAILED'
};

export type ServiceRequestStatus = (typeof ServiceRequestStatus)[keyof typeof ServiceRequestStatus]


export const RequestPriority: {
  LOW: 'LOW',
  NORMAL: 'NORMAL',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

export type RequestPriority = (typeof RequestPriority)[keyof typeof RequestPriority]


export const BillingCycle: {
  MONTHLY: 'MONTHLY',
  QUARTERLY: 'QUARTERLY',
  YEARLY: 'YEARLY'
};

export type BillingCycle = (typeof BillingCycle)[keyof typeof BillingCycle]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Tasks
 * const tasks = await prisma.task.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Tasks
   * const tasks = await prisma.task.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.task`: Exposes CRUD operations for the **Task** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tasks
    * const tasks = await prisma.task.findMany()
    * ```
    */
  get task(): Prisma.TaskDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.agent`: Exposes CRUD operations for the **Agent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Agents
    * const agents = await prisma.agent.findMany()
    * ```
    */
  get agent(): Prisma.AgentDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.agency`: Exposes CRUD operations for the **Agency** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Agencies
    * const agencies = await prisma.agency.findMany()
    * ```
    */
  get agency(): Prisma.AgencyDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.chat`: Exposes CRUD operations for the **Chat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chats
    * const chats = await prisma.chat.findMany()
    * ```
    */
  get chat(): Prisma.ChatDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.swarmExecution`: Exposes CRUD operations for the **SwarmExecution** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SwarmExecutions
    * const swarmExecutions = await prisma.swarmExecution.findMany()
    * ```
    */
  get swarmExecution(): Prisma.SwarmExecutionDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.executionStep`: Exposes CRUD operations for the **ExecutionStep** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ExecutionSteps
    * const executionSteps = await prisma.executionStep.findMany()
    * ```
    */
  get executionStep(): Prisma.ExecutionStepDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.swarmMessage`: Exposes CRUD operations for the **SwarmMessage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SwarmMessages
    * const swarmMessages = await prisma.swarmMessage.findMany()
    * ```
    */
  get swarmMessage(): Prisma.SwarmMessageDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.serviceCategory`: Exposes CRUD operations for the **ServiceCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ServiceCategories
    * const serviceCategories = await prisma.serviceCategory.findMany()
    * ```
    */
  get serviceCategory(): Prisma.ServiceCategoryDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.serviceProvider`: Exposes CRUD operations for the **ServiceProvider** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ServiceProviders
    * const serviceProviders = await prisma.serviceProvider.findMany()
    * ```
    */
  get serviceProvider(): Prisma.ServiceProviderDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.serviceRequest`: Exposes CRUD operations for the **ServiceRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ServiceRequests
    * const serviceRequests = await prisma.serviceRequest.findMany()
    * ```
    */
  get serviceRequest(): Prisma.ServiceRequestDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.providerReview`: Exposes CRUD operations for the **ProviderReview** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProviderReviews
    * const providerReviews = await prisma.providerReview.findMany()
    * ```
    */
  get providerReview(): Prisma.ProviderReviewDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.serviceReview`: Exposes CRUD operations for the **ServiceReview** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ServiceReviews
    * const serviceReviews = await prisma.serviceReview.findMany()
    * ```
    */
  get serviceReview(): Prisma.ServiceReviewDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.agencySubscription`: Exposes CRUD operations for the **AgencySubscription** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AgencySubscriptions
    * const agencySubscriptions = await prisma.agencySubscription.findMany()
    * ```
    */
  get agencySubscription(): Prisma.AgencySubscriptionDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.agencyAuditLog`: Exposes CRUD operations for the **AgencyAuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AgencyAuditLogs
    * const agencyAuditLogs = await prisma.agencyAuditLog.findMany()
    * ```
    */
  get agencyAuditLog(): Prisma.AgencyAuditLogDelegate<GlobalReject, ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export type Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export type Args<T, F extends $Public.Operation> = $Public.Args<T, F>
  export type Payload<T, F extends $Public.Operation> = $Public.Payload<T, F>
  export type Result<T, A, F extends $Public.Operation> = $Public.Result<T, A, F>
  export type Exact<T, W> = $Public.Exact<T, W>

  /**
   * Prisma Client JS version: 4.16.2
   * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Task: 'Task',
    Agent: 'Agent',
    Agency: 'Agency',
    User: 'User',
    Chat: 'Chat',
    Session: 'Session',
    SwarmExecution: 'SwarmExecution',
    ExecutionStep: 'ExecutionStep',
    SwarmMessage: 'SwarmMessage',
    ServiceCategory: 'ServiceCategory',
    ServiceProvider: 'ServiceProvider',
    ServiceRequest: 'ServiceRequest',
    ProviderReview: 'ProviderReview',
    ServiceReview: 'ServiceReview',
    AgencySubscription: 'AgencySubscription',
    AgencyAuditLog: 'AgencyAuditLog'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'task' | 'agent' | 'agency' | 'user' | 'chat' | 'session' | 'swarmExecution' | 'executionStep' | 'swarmMessage' | 'serviceCategory' | 'serviceProvider' | 'serviceRequest' | 'providerReview' | 'serviceReview' | 'agencySubscription' | 'agencyAuditLog'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Task: {
        payload: TaskPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.TaskFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TaskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TaskFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TaskPayload>
          }
          findFirst: {
            args: Prisma.TaskFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TaskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TaskFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TaskPayload>
          }
          findMany: {
            args: Prisma.TaskFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TaskPayload>[]
          }
          create: {
            args: Prisma.TaskCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TaskPayload>
          }
          createMany: {
            args: Prisma.TaskCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TaskDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TaskPayload>
          }
          update: {
            args: Prisma.TaskUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TaskPayload>
          }
          deleteMany: {
            args: Prisma.TaskDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TaskUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TaskUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TaskPayload>
          }
          aggregate: {
            args: Prisma.TaskAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTask>
          }
          groupBy: {
            args: Prisma.TaskGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TaskGroupByOutputType>[]
          }
          count: {
            args: Prisma.TaskCountArgs<ExtArgs>,
            result: $Utils.Optional<TaskCountAggregateOutputType> | number
          }
        }
      }
      Agent: {
        payload: AgentPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.AgentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AgentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgentPayload>
          }
          findFirst: {
            args: Prisma.AgentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AgentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgentPayload>
          }
          findMany: {
            args: Prisma.AgentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgentPayload>[]
          }
          create: {
            args: Prisma.AgentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgentPayload>
          }
          createMany: {
            args: Prisma.AgentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AgentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgentPayload>
          }
          update: {
            args: Prisma.AgentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgentPayload>
          }
          deleteMany: {
            args: Prisma.AgentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AgentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AgentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgentPayload>
          }
          aggregate: {
            args: Prisma.AgentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAgent>
          }
          groupBy: {
            args: Prisma.AgentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AgentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AgentCountArgs<ExtArgs>,
            result: $Utils.Optional<AgentCountAggregateOutputType> | number
          }
        }
      }
      Agency: {
        payload: AgencyPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.AgencyFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgencyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AgencyFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgencyPayload>
          }
          findFirst: {
            args: Prisma.AgencyFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgencyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AgencyFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgencyPayload>
          }
          findMany: {
            args: Prisma.AgencyFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgencyPayload>[]
          }
          create: {
            args: Prisma.AgencyCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgencyPayload>
          }
          createMany: {
            args: Prisma.AgencyCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AgencyDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgencyPayload>
          }
          update: {
            args: Prisma.AgencyUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgencyPayload>
          }
          deleteMany: {
            args: Prisma.AgencyDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AgencyUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AgencyUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgencyPayload>
          }
          aggregate: {
            args: Prisma.AgencyAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAgency>
          }
          groupBy: {
            args: Prisma.AgencyGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AgencyGroupByOutputType>[]
          }
          count: {
            args: Prisma.AgencyCountArgs<ExtArgs>,
            result: $Utils.Optional<AgencyCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: UserPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Chat: {
        payload: ChatPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ChatFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatPayload>
          }
          findFirst: {
            args: Prisma.ChatFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatPayload>
          }
          findMany: {
            args: Prisma.ChatFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatPayload>[]
          }
          create: {
            args: Prisma.ChatCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatPayload>
          }
          createMany: {
            args: Prisma.ChatCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ChatDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatPayload>
          }
          update: {
            args: Prisma.ChatUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatPayload>
          }
          deleteMany: {
            args: Prisma.ChatDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ChatUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ChatUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ChatPayload>
          }
          aggregate: {
            args: Prisma.ChatAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateChat>
          }
          groupBy: {
            args: Prisma.ChatGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ChatGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatCountArgs<ExtArgs>,
            result: $Utils.Optional<ChatCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: SessionPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>,
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      SwarmExecution: {
        payload: SwarmExecutionPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.SwarmExecutionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SwarmExecutionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SwarmExecutionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SwarmExecutionPayload>
          }
          findFirst: {
            args: Prisma.SwarmExecutionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SwarmExecutionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SwarmExecutionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SwarmExecutionPayload>
          }
          findMany: {
            args: Prisma.SwarmExecutionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SwarmExecutionPayload>[]
          }
          create: {
            args: Prisma.SwarmExecutionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SwarmExecutionPayload>
          }
          createMany: {
            args: Prisma.SwarmExecutionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SwarmExecutionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SwarmExecutionPayload>
          }
          update: {
            args: Prisma.SwarmExecutionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SwarmExecutionPayload>
          }
          deleteMany: {
            args: Prisma.SwarmExecutionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SwarmExecutionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SwarmExecutionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SwarmExecutionPayload>
          }
          aggregate: {
            args: Prisma.SwarmExecutionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSwarmExecution>
          }
          groupBy: {
            args: Prisma.SwarmExecutionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SwarmExecutionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SwarmExecutionCountArgs<ExtArgs>,
            result: $Utils.Optional<SwarmExecutionCountAggregateOutputType> | number
          }
        }
      }
      ExecutionStep: {
        payload: ExecutionStepPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ExecutionStepFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ExecutionStepPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExecutionStepFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ExecutionStepPayload>
          }
          findFirst: {
            args: Prisma.ExecutionStepFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ExecutionStepPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExecutionStepFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ExecutionStepPayload>
          }
          findMany: {
            args: Prisma.ExecutionStepFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ExecutionStepPayload>[]
          }
          create: {
            args: Prisma.ExecutionStepCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ExecutionStepPayload>
          }
          createMany: {
            args: Prisma.ExecutionStepCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ExecutionStepDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ExecutionStepPayload>
          }
          update: {
            args: Prisma.ExecutionStepUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ExecutionStepPayload>
          }
          deleteMany: {
            args: Prisma.ExecutionStepDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ExecutionStepUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ExecutionStepUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ExecutionStepPayload>
          }
          aggregate: {
            args: Prisma.ExecutionStepAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateExecutionStep>
          }
          groupBy: {
            args: Prisma.ExecutionStepGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ExecutionStepGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExecutionStepCountArgs<ExtArgs>,
            result: $Utils.Optional<ExecutionStepCountAggregateOutputType> | number
          }
        }
      }
      SwarmMessage: {
        payload: SwarmMessagePayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.SwarmMessageFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SwarmMessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SwarmMessageFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SwarmMessagePayload>
          }
          findFirst: {
            args: Prisma.SwarmMessageFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SwarmMessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SwarmMessageFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SwarmMessagePayload>
          }
          findMany: {
            args: Prisma.SwarmMessageFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SwarmMessagePayload>[]
          }
          create: {
            args: Prisma.SwarmMessageCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SwarmMessagePayload>
          }
          createMany: {
            args: Prisma.SwarmMessageCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SwarmMessageDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SwarmMessagePayload>
          }
          update: {
            args: Prisma.SwarmMessageUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SwarmMessagePayload>
          }
          deleteMany: {
            args: Prisma.SwarmMessageDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SwarmMessageUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SwarmMessageUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SwarmMessagePayload>
          }
          aggregate: {
            args: Prisma.SwarmMessageAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSwarmMessage>
          }
          groupBy: {
            args: Prisma.SwarmMessageGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SwarmMessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.SwarmMessageCountArgs<ExtArgs>,
            result: $Utils.Optional<SwarmMessageCountAggregateOutputType> | number
          }
        }
      }
      ServiceCategory: {
        payload: ServiceCategoryPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ServiceCategoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ServiceCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServiceCategoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ServiceCategoryPayload>
          }
          findFirst: {
            args: Prisma.ServiceCategoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ServiceCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServiceCategoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ServiceCategoryPayload>
          }
          findMany: {
            args: Prisma.ServiceCategoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ServiceCategoryPayload>[]
          }
          create: {
            args: Prisma.ServiceCategoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ServiceCategoryPayload>
          }
          createMany: {
            args: Prisma.ServiceCategoryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ServiceCategoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ServiceCategoryPayload>
          }
          update: {
            args: Prisma.ServiceCategoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ServiceCategoryPayload>
          }
          deleteMany: {
            args: Prisma.ServiceCategoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ServiceCategoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ServiceCategoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ServiceCategoryPayload>
          }
          aggregate: {
            args: Prisma.ServiceCategoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateServiceCategory>
          }
          groupBy: {
            args: Prisma.ServiceCategoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ServiceCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServiceCategoryCountArgs<ExtArgs>,
            result: $Utils.Optional<ServiceCategoryCountAggregateOutputType> | number
          }
        }
      }
      ServiceProvider: {
        payload: ServiceProviderPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ServiceProviderFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ServiceProviderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServiceProviderFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ServiceProviderPayload>
          }
          findFirst: {
            args: Prisma.ServiceProviderFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ServiceProviderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServiceProviderFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ServiceProviderPayload>
          }
          findMany: {
            args: Prisma.ServiceProviderFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ServiceProviderPayload>[]
          }
          create: {
            args: Prisma.ServiceProviderCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ServiceProviderPayload>
          }
          createMany: {
            args: Prisma.ServiceProviderCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ServiceProviderDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ServiceProviderPayload>
          }
          update: {
            args: Prisma.ServiceProviderUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ServiceProviderPayload>
          }
          deleteMany: {
            args: Prisma.ServiceProviderDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ServiceProviderUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ServiceProviderUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ServiceProviderPayload>
          }
          aggregate: {
            args: Prisma.ServiceProviderAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateServiceProvider>
          }
          groupBy: {
            args: Prisma.ServiceProviderGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ServiceProviderGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServiceProviderCountArgs<ExtArgs>,
            result: $Utils.Optional<ServiceProviderCountAggregateOutputType> | number
          }
        }
      }
      ServiceRequest: {
        payload: ServiceRequestPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ServiceRequestFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ServiceRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServiceRequestFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ServiceRequestPayload>
          }
          findFirst: {
            args: Prisma.ServiceRequestFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ServiceRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServiceRequestFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ServiceRequestPayload>
          }
          findMany: {
            args: Prisma.ServiceRequestFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ServiceRequestPayload>[]
          }
          create: {
            args: Prisma.ServiceRequestCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ServiceRequestPayload>
          }
          createMany: {
            args: Prisma.ServiceRequestCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ServiceRequestDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ServiceRequestPayload>
          }
          update: {
            args: Prisma.ServiceRequestUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ServiceRequestPayload>
          }
          deleteMany: {
            args: Prisma.ServiceRequestDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ServiceRequestUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ServiceRequestUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ServiceRequestPayload>
          }
          aggregate: {
            args: Prisma.ServiceRequestAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateServiceRequest>
          }
          groupBy: {
            args: Prisma.ServiceRequestGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ServiceRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServiceRequestCountArgs<ExtArgs>,
            result: $Utils.Optional<ServiceRequestCountAggregateOutputType> | number
          }
        }
      }
      ProviderReview: {
        payload: ProviderReviewPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ProviderReviewFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProviderReviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProviderReviewFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProviderReviewPayload>
          }
          findFirst: {
            args: Prisma.ProviderReviewFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProviderReviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProviderReviewFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProviderReviewPayload>
          }
          findMany: {
            args: Prisma.ProviderReviewFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProviderReviewPayload>[]
          }
          create: {
            args: Prisma.ProviderReviewCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProviderReviewPayload>
          }
          createMany: {
            args: Prisma.ProviderReviewCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProviderReviewDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProviderReviewPayload>
          }
          update: {
            args: Prisma.ProviderReviewUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProviderReviewPayload>
          }
          deleteMany: {
            args: Prisma.ProviderReviewDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProviderReviewUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProviderReviewUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProviderReviewPayload>
          }
          aggregate: {
            args: Prisma.ProviderReviewAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProviderReview>
          }
          groupBy: {
            args: Prisma.ProviderReviewGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProviderReviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProviderReviewCountArgs<ExtArgs>,
            result: $Utils.Optional<ProviderReviewCountAggregateOutputType> | number
          }
        }
      }
      ServiceReview: {
        payload: ServiceReviewPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ServiceReviewFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ServiceReviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServiceReviewFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ServiceReviewPayload>
          }
          findFirst: {
            args: Prisma.ServiceReviewFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ServiceReviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServiceReviewFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ServiceReviewPayload>
          }
          findMany: {
            args: Prisma.ServiceReviewFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ServiceReviewPayload>[]
          }
          create: {
            args: Prisma.ServiceReviewCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ServiceReviewPayload>
          }
          createMany: {
            args: Prisma.ServiceReviewCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ServiceReviewDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ServiceReviewPayload>
          }
          update: {
            args: Prisma.ServiceReviewUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ServiceReviewPayload>
          }
          deleteMany: {
            args: Prisma.ServiceReviewDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ServiceReviewUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ServiceReviewUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ServiceReviewPayload>
          }
          aggregate: {
            args: Prisma.ServiceReviewAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateServiceReview>
          }
          groupBy: {
            args: Prisma.ServiceReviewGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ServiceReviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServiceReviewCountArgs<ExtArgs>,
            result: $Utils.Optional<ServiceReviewCountAggregateOutputType> | number
          }
        }
      }
      AgencySubscription: {
        payload: AgencySubscriptionPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.AgencySubscriptionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgencySubscriptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AgencySubscriptionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgencySubscriptionPayload>
          }
          findFirst: {
            args: Prisma.AgencySubscriptionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgencySubscriptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AgencySubscriptionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgencySubscriptionPayload>
          }
          findMany: {
            args: Prisma.AgencySubscriptionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgencySubscriptionPayload>[]
          }
          create: {
            args: Prisma.AgencySubscriptionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgencySubscriptionPayload>
          }
          createMany: {
            args: Prisma.AgencySubscriptionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AgencySubscriptionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgencySubscriptionPayload>
          }
          update: {
            args: Prisma.AgencySubscriptionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgencySubscriptionPayload>
          }
          deleteMany: {
            args: Prisma.AgencySubscriptionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AgencySubscriptionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AgencySubscriptionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgencySubscriptionPayload>
          }
          aggregate: {
            args: Prisma.AgencySubscriptionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAgencySubscription>
          }
          groupBy: {
            args: Prisma.AgencySubscriptionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AgencySubscriptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.AgencySubscriptionCountArgs<ExtArgs>,
            result: $Utils.Optional<AgencySubscriptionCountAggregateOutputType> | number
          }
        }
      }
      AgencyAuditLog: {
        payload: AgencyAuditLogPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.AgencyAuditLogFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgencyAuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AgencyAuditLogFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgencyAuditLogPayload>
          }
          findFirst: {
            args: Prisma.AgencyAuditLogFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgencyAuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AgencyAuditLogFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgencyAuditLogPayload>
          }
          findMany: {
            args: Prisma.AgencyAuditLogFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgencyAuditLogPayload>[]
          }
          create: {
            args: Prisma.AgencyAuditLogCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgencyAuditLogPayload>
          }
          createMany: {
            args: Prisma.AgencyAuditLogCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AgencyAuditLogDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgencyAuditLogPayload>
          }
          update: {
            args: Prisma.AgencyAuditLogUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgencyAuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AgencyAuditLogDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AgencyAuditLogUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AgencyAuditLogUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AgencyAuditLogPayload>
          }
          aggregate: {
            args: Prisma.AgencyAuditLogAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAgencyAuditLog>
          }
          groupBy: {
            args: Prisma.AgencyAuditLogGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AgencyAuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AgencyAuditLogCountArgs<ExtArgs>,
            result: $Utils.Optional<AgencyAuditLogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AgencyCountOutputType
   */


  export type AgencyCountOutputType = {
    users: number
    chats: number
    sessions: number
    subscriptions: number
    auditLogs: number
    swarmExecutions: number
    serviceRequests: number
    serviceProviders: number
  }

  export type AgencyCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    users?: boolean | AgencyCountOutputTypeCountUsersArgs
    chats?: boolean | AgencyCountOutputTypeCountChatsArgs
    sessions?: boolean | AgencyCountOutputTypeCountSessionsArgs
    subscriptions?: boolean | AgencyCountOutputTypeCountSubscriptionsArgs
    auditLogs?: boolean | AgencyCountOutputTypeCountAuditLogsArgs
    swarmExecutions?: boolean | AgencyCountOutputTypeCountSwarmExecutionsArgs
    serviceRequests?: boolean | AgencyCountOutputTypeCountServiceRequestsArgs
    serviceProviders?: boolean | AgencyCountOutputTypeCountServiceProvidersArgs
  }

  // Custom InputTypes

  /**
   * AgencyCountOutputType without action
   */
  export type AgencyCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgencyCountOutputType
     */
    select?: AgencyCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AgencyCountOutputType without action
   */
  export type AgencyCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * AgencyCountOutputType without action
   */
  export type AgencyCountOutputTypeCountChatsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ChatWhereInput
  }


  /**
   * AgencyCountOutputType without action
   */
  export type AgencyCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }


  /**
   * AgencyCountOutputType without action
   */
  export type AgencyCountOutputTypeCountSubscriptionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AgencySubscriptionWhereInput
  }


  /**
   * AgencyCountOutputType without action
   */
  export type AgencyCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AgencyAuditLogWhereInput
  }


  /**
   * AgencyCountOutputType without action
   */
  export type AgencyCountOutputTypeCountSwarmExecutionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SwarmExecutionWhereInput
  }


  /**
   * AgencyCountOutputType without action
   */
  export type AgencyCountOutputTypeCountServiceRequestsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ServiceRequestWhereInput
  }


  /**
   * AgencyCountOutputType without action
   */
  export type AgencyCountOutputTypeCountServiceProvidersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ServiceProviderWhereInput
  }



  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    createdChats: number
    sessions: number
    auditLogs: number
    serviceRequests: number
    providerReviews: number
    serviceReviews: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    createdChats?: boolean | UserCountOutputTypeCountCreatedChatsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    auditLogs?: boolean | UserCountOutputTypeCountAuditLogsArgs
    serviceRequests?: boolean | UserCountOutputTypeCountServiceRequestsArgs
    providerReviews?: boolean | UserCountOutputTypeCountProviderReviewsArgs
    serviceReviews?: boolean | UserCountOutputTypeCountServiceReviewsArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedChatsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ChatWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AgencyAuditLogWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountServiceRequestsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ServiceRequestWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProviderReviewsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ProviderReviewWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountServiceReviewsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ServiceReviewWhereInput
  }



  /**
   * Count Type SwarmExecutionCountOutputType
   */


  export type SwarmExecutionCountOutputType = {
    executionSteps: number
    messages: number
  }

  export type SwarmExecutionCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    executionSteps?: boolean | SwarmExecutionCountOutputTypeCountExecutionStepsArgs
    messages?: boolean | SwarmExecutionCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes

  /**
   * SwarmExecutionCountOutputType without action
   */
  export type SwarmExecutionCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwarmExecutionCountOutputType
     */
    select?: SwarmExecutionCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SwarmExecutionCountOutputType without action
   */
  export type SwarmExecutionCountOutputTypeCountExecutionStepsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ExecutionStepWhereInput
  }


  /**
   * SwarmExecutionCountOutputType without action
   */
  export type SwarmExecutionCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SwarmMessageWhereInput
  }



  /**
   * Count Type ServiceCategoryCountOutputType
   */


  export type ServiceCategoryCountOutputType = {
    children: number
    serviceRequests: number
    providers: number
  }

  export type ServiceCategoryCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    children?: boolean | ServiceCategoryCountOutputTypeCountChildrenArgs
    serviceRequests?: boolean | ServiceCategoryCountOutputTypeCountServiceRequestsArgs
    providers?: boolean | ServiceCategoryCountOutputTypeCountProvidersArgs
  }

  // Custom InputTypes

  /**
   * ServiceCategoryCountOutputType without action
   */
  export type ServiceCategoryCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategoryCountOutputType
     */
    select?: ServiceCategoryCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ServiceCategoryCountOutputType without action
   */
  export type ServiceCategoryCountOutputTypeCountChildrenArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ServiceCategoryWhereInput
  }


  /**
   * ServiceCategoryCountOutputType without action
   */
  export type ServiceCategoryCountOutputTypeCountServiceRequestsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ServiceRequestWhereInput
  }


  /**
   * ServiceCategoryCountOutputType without action
   */
  export type ServiceCategoryCountOutputTypeCountProvidersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ServiceProviderWhereInput
  }



  /**
   * Count Type ServiceProviderCountOutputType
   */


  export type ServiceProviderCountOutputType = {
    serviceRequests: number
    reviews: number
  }

  export type ServiceProviderCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    serviceRequests?: boolean | ServiceProviderCountOutputTypeCountServiceRequestsArgs
    reviews?: boolean | ServiceProviderCountOutputTypeCountReviewsArgs
  }

  // Custom InputTypes

  /**
   * ServiceProviderCountOutputType without action
   */
  export type ServiceProviderCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceProviderCountOutputType
     */
    select?: ServiceProviderCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ServiceProviderCountOutputType without action
   */
  export type ServiceProviderCountOutputTypeCountServiceRequestsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ServiceRequestWhereInput
  }


  /**
   * ServiceProviderCountOutputType without action
   */
  export type ServiceProviderCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ProviderReviewWhereInput
  }



  /**
   * Count Type ServiceRequestCountOutputType
   */


  export type ServiceRequestCountOutputType = {
    reviews: number
  }

  export type ServiceRequestCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    reviews?: boolean | ServiceRequestCountOutputTypeCountReviewsArgs
  }

  // Custom InputTypes

  /**
   * ServiceRequestCountOutputType without action
   */
  export type ServiceRequestCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceRequestCountOutputType
     */
    select?: ServiceRequestCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ServiceRequestCountOutputType without action
   */
  export type ServiceRequestCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ServiceReviewWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Task
   */


  export type AggregateTask = {
    _count: TaskCountAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  export type TaskMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    status: TaskStatus | null
    priority: TaskPriority | null
    type: string | null
    createdAt: Date | null
    updatedAt: Date | null
    dueDate: Date | null
    assignedTo: string | null
    createdBy: string | null
    error: string | null
    completedAt: Date | null
  }

  export type TaskMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    status: TaskStatus | null
    priority: TaskPriority | null
    type: string | null
    createdAt: Date | null
    updatedAt: Date | null
    dueDate: Date | null
    assignedTo: string | null
    createdBy: string | null
    error: string | null
    completedAt: Date | null
  }

  export type TaskCountAggregateOutputType = {
    id: number
    title: number
    description: number
    status: number
    priority: number
    type: number
    createdAt: number
    updatedAt: number
    dueDate: number
    assignedTo: number
    createdBy: number
    metadata: number
    tags: number
    dependencies: number
    error: number
    completedAt: number
    _all: number
  }


  export type TaskMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    priority?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    dueDate?: true
    assignedTo?: true
    createdBy?: true
    error?: true
    completedAt?: true
  }

  export type TaskMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    priority?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    dueDate?: true
    assignedTo?: true
    createdBy?: true
    error?: true
    completedAt?: true
  }

  export type TaskCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    priority?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    dueDate?: true
    assignedTo?: true
    createdBy?: true
    metadata?: true
    tags?: true
    dependencies?: true
    error?: true
    completedAt?: true
    _all?: true
  }

  export type TaskAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Task to aggregate.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: Enumerable<TaskOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tasks
    **/
    _count?: true | TaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaskMaxAggregateInputType
  }

  export type GetTaskAggregateType<T extends TaskAggregateArgs> = {
        [P in keyof T & keyof AggregateTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTask[P]>
      : GetScalarType<T[P], AggregateTask[P]>
  }




  export type TaskGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
    orderBy?: Enumerable<TaskOrderByWithAggregationInput>
    by: TaskScalarFieldEnum[]
    having?: TaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaskCountAggregateInputType | true
    _min?: TaskMinAggregateInputType
    _max?: TaskMaxAggregateInputType
  }


  export type TaskGroupByOutputType = {
    id: string
    title: string
    description: string | null
    status: TaskStatus
    priority: TaskPriority
    type: string
    createdAt: Date
    updatedAt: Date
    dueDate: Date | null
    assignedTo: string | null
    createdBy: string
    metadata: JsonValue | null
    tags: string[]
    dependencies: string[]
    error: string | null
    completedAt: Date | null
    _count: TaskCountAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  type GetTaskGroupByPayload<T extends TaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaskGroupByOutputType[P]>
            : GetScalarType<T[P], TaskGroupByOutputType[P]>
        }
      >
    >


  export type TaskSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dueDate?: boolean
    assignedTo?: boolean
    createdBy?: boolean
    metadata?: boolean
    tags?: boolean
    dependencies?: boolean
    error?: boolean
    completedAt?: boolean
  }, ExtArgs["result"]["task"]>

  export type TaskSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dueDate?: boolean
    assignedTo?: boolean
    createdBy?: boolean
    metadata?: boolean
    tags?: boolean
    dependencies?: boolean
    error?: boolean
    completedAt?: boolean
  }


  type TaskGetPayload<S extends boolean | null | undefined | TaskArgs> = $Types.GetResult<TaskPayload, S>

  type TaskCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<TaskFindManyArgs, 'select' | 'include'> & {
      select?: TaskCountAggregateInputType | true
    }

  export interface TaskDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Task'], meta: { name: 'Task' } }
    /**
     * Find zero or one Task that matches the filter.
     * @param {TaskFindUniqueArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TaskFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TaskFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Task'> extends True ? Prisma__TaskClient<$Types.GetResult<TaskPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__TaskClient<$Types.GetResult<TaskPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Task that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TaskFindUniqueOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TaskFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TaskFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TaskClient<$Types.GetResult<TaskPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Task that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TaskFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TaskFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Task'> extends True ? Prisma__TaskClient<$Types.GetResult<TaskPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__TaskClient<$Types.GetResult<TaskPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Task that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TaskFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TaskFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TaskClient<$Types.GetResult<TaskPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tasks
     * const tasks = await prisma.task.findMany()
     * 
     * // Get first 10 Tasks
     * const tasks = await prisma.task.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const taskWithIdOnly = await prisma.task.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TaskFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TaskFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<TaskPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Task.
     * @param {TaskCreateArgs} args - Arguments to create a Task.
     * @example
     * // Create one Task
     * const Task = await prisma.task.create({
     *   data: {
     *     // ... data to create a Task
     *   }
     * })
     * 
    **/
    create<T extends TaskCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TaskCreateArgs<ExtArgs>>
    ): Prisma__TaskClient<$Types.GetResult<TaskPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Tasks.
     *     @param {TaskCreateManyArgs} args - Arguments to create many Tasks.
     *     @example
     *     // Create many Tasks
     *     const task = await prisma.task.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TaskCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TaskCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Task.
     * @param {TaskDeleteArgs} args - Arguments to delete one Task.
     * @example
     * // Delete one Task
     * const Task = await prisma.task.delete({
     *   where: {
     *     // ... filter to delete one Task
     *   }
     * })
     * 
    **/
    delete<T extends TaskDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TaskDeleteArgs<ExtArgs>>
    ): Prisma__TaskClient<$Types.GetResult<TaskPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Task.
     * @param {TaskUpdateArgs} args - Arguments to update one Task.
     * @example
     * // Update one Task
     * const task = await prisma.task.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TaskUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TaskUpdateArgs<ExtArgs>>
    ): Prisma__TaskClient<$Types.GetResult<TaskPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Tasks.
     * @param {TaskDeleteManyArgs} args - Arguments to filter Tasks to delete.
     * @example
     * // Delete a few Tasks
     * const { count } = await prisma.task.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TaskDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TaskDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tasks
     * const task = await prisma.task.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TaskUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TaskUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Task.
     * @param {TaskUpsertArgs} args - Arguments to update or create a Task.
     * @example
     * // Update or create a Task
     * const task = await prisma.task.upsert({
     *   create: {
     *     // ... data to create a Task
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Task we want to update
     *   }
     * })
    **/
    upsert<T extends TaskUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TaskUpsertArgs<ExtArgs>>
    ): Prisma__TaskClient<$Types.GetResult<TaskPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskCountArgs} args - Arguments to filter Tasks to count.
     * @example
     * // Count the number of Tasks
     * const count = await prisma.task.count({
     *   where: {
     *     // ... the filter for the Tasks we want to count
     *   }
     * })
    **/
    count<T extends TaskCountArgs>(
      args?: Subset<T, TaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaskAggregateArgs>(args: Subset<T, TaskAggregateArgs>): Prisma.PrismaPromise<GetTaskAggregateType<T>>

    /**
     * Group by Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskGroupByArgs['orderBy'] }
        : { orderBy?: TaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Task.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TaskClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Task base type for findUnique actions
   */
  export type TaskFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findUnique
   */
  export interface TaskFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends TaskFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Task findUniqueOrThrow
   */
  export type TaskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }


  /**
   * Task base type for findFirst actions
   */
  export type TaskFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: Enumerable<TaskOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: Enumerable<TaskScalarFieldEnum>
  }

  /**
   * Task findFirst
   */
  export interface TaskFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends TaskFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Task findFirstOrThrow
   */
  export type TaskFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: Enumerable<TaskOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: Enumerable<TaskScalarFieldEnum>
  }


  /**
   * Task findMany
   */
  export type TaskFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Filter, which Tasks to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: Enumerable<TaskOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    distinct?: Enumerable<TaskScalarFieldEnum>
  }


  /**
   * Task create
   */
  export type TaskCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * The data needed to create a Task.
     */
    data: XOR<TaskCreateInput, TaskUncheckedCreateInput>
  }


  /**
   * Task createMany
   */
  export type TaskCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tasks.
     */
    data: Enumerable<TaskCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Task update
   */
  export type TaskUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * The data needed to update a Task.
     */
    data: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
    /**
     * Choose, which Task to update.
     */
    where: TaskWhereUniqueInput
  }


  /**
   * Task updateMany
   */
  export type TaskUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tasks.
     */
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     */
    where?: TaskWhereInput
  }


  /**
   * Task upsert
   */
  export type TaskUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * The filter to search for the Task to update in case it exists.
     */
    where: TaskWhereUniqueInput
    /**
     * In case the Task found by the `where` argument doesn't exist, create a new Task with this data.
     */
    create: XOR<TaskCreateInput, TaskUncheckedCreateInput>
    /**
     * In case the Task was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
  }


  /**
   * Task delete
   */
  export type TaskDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Filter which Task to delete.
     */
    where: TaskWhereUniqueInput
  }


  /**
   * Task deleteMany
   */
  export type TaskDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tasks to delete
     */
    where?: TaskWhereInput
  }


  /**
   * Task without action
   */
  export type TaskArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
  }



  /**
   * Model Agent
   */


  export type AggregateAgent = {
    _count: AgentCountAggregateOutputType | null
    _min: AgentMinAggregateOutputType | null
    _max: AgentMaxAggregateOutputType | null
  }

  export type AgentMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    type: string | null
    status: AgentStatus | null
    provider: string | null
    lastActive: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    agencyId: string | null
  }

  export type AgentMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    type: string | null
    status: AgentStatus | null
    provider: string | null
    lastActive: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    agencyId: string | null
  }

  export type AgentCountAggregateOutputType = {
    id: number
    name: number
    description: number
    type: number
    status: number
    capabilities: number
    provider: number
    lastActive: number
    metadata: number
    createdAt: number
    updatedAt: number
    agencyId: number
    _all: number
  }


  export type AgentMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    type?: true
    status?: true
    provider?: true
    lastActive?: true
    createdAt?: true
    updatedAt?: true
    agencyId?: true
  }

  export type AgentMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    type?: true
    status?: true
    provider?: true
    lastActive?: true
    createdAt?: true
    updatedAt?: true
    agencyId?: true
  }

  export type AgentCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    type?: true
    status?: true
    capabilities?: true
    provider?: true
    lastActive?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    agencyId?: true
    _all?: true
  }

  export type AgentAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Agent to aggregate.
     */
    where?: AgentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agents to fetch.
     */
    orderBy?: Enumerable<AgentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AgentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Agents
    **/
    _count?: true | AgentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AgentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AgentMaxAggregateInputType
  }

  export type GetAgentAggregateType<T extends AgentAggregateArgs> = {
        [P in keyof T & keyof AggregateAgent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAgent[P]>
      : GetScalarType<T[P], AggregateAgent[P]>
  }




  export type AgentGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AgentWhereInput
    orderBy?: Enumerable<AgentOrderByWithAggregationInput>
    by: AgentScalarFieldEnum[]
    having?: AgentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AgentCountAggregateInputType | true
    _min?: AgentMinAggregateInputType
    _max?: AgentMaxAggregateInputType
  }


  export type AgentGroupByOutputType = {
    id: string
    name: string
    description: string | null
    type: string
    status: AgentStatus
    capabilities: string[]
    provider: string
    lastActive: Date
    metadata: JsonValue | null
    createdAt: Date
    updatedAt: Date
    agencyId: string | null
    _count: AgentCountAggregateOutputType | null
    _min: AgentMinAggregateOutputType | null
    _max: AgentMaxAggregateOutputType | null
  }

  type GetAgentGroupByPayload<T extends AgentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AgentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AgentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AgentGroupByOutputType[P]>
            : GetScalarType<T[P], AgentGroupByOutputType[P]>
        }
      >
    >


  export type AgentSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    type?: boolean
    status?: boolean
    capabilities?: boolean
    provider?: boolean
    lastActive?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    agencyId?: boolean
  }, ExtArgs["result"]["agent"]>

  export type AgentSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    type?: boolean
    status?: boolean
    capabilities?: boolean
    provider?: boolean
    lastActive?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    agencyId?: boolean
  }


  type AgentGetPayload<S extends boolean | null | undefined | AgentArgs> = $Types.GetResult<AgentPayload, S>

  type AgentCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<AgentFindManyArgs, 'select' | 'include'> & {
      select?: AgentCountAggregateInputType | true
    }

  export interface AgentDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Agent'], meta: { name: 'Agent' } }
    /**
     * Find zero or one Agent that matches the filter.
     * @param {AgentFindUniqueArgs} args - Arguments to find a Agent
     * @example
     * // Get one Agent
     * const agent = await prisma.agent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AgentFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AgentFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Agent'> extends True ? Prisma__AgentClient<$Types.GetResult<AgentPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__AgentClient<$Types.GetResult<AgentPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Agent that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AgentFindUniqueOrThrowArgs} args - Arguments to find a Agent
     * @example
     * // Get one Agent
     * const agent = await prisma.agent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AgentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AgentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AgentClient<$Types.GetResult<AgentPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Agent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentFindFirstArgs} args - Arguments to find a Agent
     * @example
     * // Get one Agent
     * const agent = await prisma.agent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AgentFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AgentFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Agent'> extends True ? Prisma__AgentClient<$Types.GetResult<AgentPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__AgentClient<$Types.GetResult<AgentPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Agent that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentFindFirstOrThrowArgs} args - Arguments to find a Agent
     * @example
     * // Get one Agent
     * const agent = await prisma.agent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AgentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AgentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AgentClient<$Types.GetResult<AgentPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Agents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Agents
     * const agents = await prisma.agent.findMany()
     * 
     * // Get first 10 Agents
     * const agents = await prisma.agent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const agentWithIdOnly = await prisma.agent.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AgentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AgentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<AgentPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Agent.
     * @param {AgentCreateArgs} args - Arguments to create a Agent.
     * @example
     * // Create one Agent
     * const Agent = await prisma.agent.create({
     *   data: {
     *     // ... data to create a Agent
     *   }
     * })
     * 
    **/
    create<T extends AgentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AgentCreateArgs<ExtArgs>>
    ): Prisma__AgentClient<$Types.GetResult<AgentPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Agents.
     *     @param {AgentCreateManyArgs} args - Arguments to create many Agents.
     *     @example
     *     // Create many Agents
     *     const agent = await prisma.agent.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AgentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AgentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Agent.
     * @param {AgentDeleteArgs} args - Arguments to delete one Agent.
     * @example
     * // Delete one Agent
     * const Agent = await prisma.agent.delete({
     *   where: {
     *     // ... filter to delete one Agent
     *   }
     * })
     * 
    **/
    delete<T extends AgentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AgentDeleteArgs<ExtArgs>>
    ): Prisma__AgentClient<$Types.GetResult<AgentPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Agent.
     * @param {AgentUpdateArgs} args - Arguments to update one Agent.
     * @example
     * // Update one Agent
     * const agent = await prisma.agent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AgentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AgentUpdateArgs<ExtArgs>>
    ): Prisma__AgentClient<$Types.GetResult<AgentPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Agents.
     * @param {AgentDeleteManyArgs} args - Arguments to filter Agents to delete.
     * @example
     * // Delete a few Agents
     * const { count } = await prisma.agent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AgentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AgentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Agents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Agents
     * const agent = await prisma.agent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AgentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AgentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Agent.
     * @param {AgentUpsertArgs} args - Arguments to update or create a Agent.
     * @example
     * // Update or create a Agent
     * const agent = await prisma.agent.upsert({
     *   create: {
     *     // ... data to create a Agent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Agent we want to update
     *   }
     * })
    **/
    upsert<T extends AgentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AgentUpsertArgs<ExtArgs>>
    ): Prisma__AgentClient<$Types.GetResult<AgentPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Agents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentCountArgs} args - Arguments to filter Agents to count.
     * @example
     * // Count the number of Agents
     * const count = await prisma.agent.count({
     *   where: {
     *     // ... the filter for the Agents we want to count
     *   }
     * })
    **/
    count<T extends AgentCountArgs>(
      args?: Subset<T, AgentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AgentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Agent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AgentAggregateArgs>(args: Subset<T, AgentAggregateArgs>): Prisma.PrismaPromise<GetAgentAggregateType<T>>

    /**
     * Group by Agent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AgentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AgentGroupByArgs['orderBy'] }
        : { orderBy?: AgentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AgentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAgentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Agent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AgentClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Agent base type for findUnique actions
   */
  export type AgentFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Filter, which Agent to fetch.
     */
    where: AgentWhereUniqueInput
  }

  /**
   * Agent findUnique
   */
  export interface AgentFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AgentFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Agent findUniqueOrThrow
   */
  export type AgentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Filter, which Agent to fetch.
     */
    where: AgentWhereUniqueInput
  }


  /**
   * Agent base type for findFirst actions
   */
  export type AgentFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Filter, which Agent to fetch.
     */
    where?: AgentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agents to fetch.
     */
    orderBy?: Enumerable<AgentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Agents.
     */
    cursor?: AgentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Agents.
     */
    distinct?: Enumerable<AgentScalarFieldEnum>
  }

  /**
   * Agent findFirst
   */
  export interface AgentFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AgentFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Agent findFirstOrThrow
   */
  export type AgentFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Filter, which Agent to fetch.
     */
    where?: AgentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agents to fetch.
     */
    orderBy?: Enumerable<AgentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Agents.
     */
    cursor?: AgentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Agents.
     */
    distinct?: Enumerable<AgentScalarFieldEnum>
  }


  /**
   * Agent findMany
   */
  export type AgentFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Filter, which Agents to fetch.
     */
    where?: AgentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agents to fetch.
     */
    orderBy?: Enumerable<AgentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Agents.
     */
    cursor?: AgentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agents.
     */
    skip?: number
    distinct?: Enumerable<AgentScalarFieldEnum>
  }


  /**
   * Agent create
   */
  export type AgentCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * The data needed to create a Agent.
     */
    data: XOR<AgentCreateInput, AgentUncheckedCreateInput>
  }


  /**
   * Agent createMany
   */
  export type AgentCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Agents.
     */
    data: Enumerable<AgentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Agent update
   */
  export type AgentUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * The data needed to update a Agent.
     */
    data: XOR<AgentUpdateInput, AgentUncheckedUpdateInput>
    /**
     * Choose, which Agent to update.
     */
    where: AgentWhereUniqueInput
  }


  /**
   * Agent updateMany
   */
  export type AgentUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Agents.
     */
    data: XOR<AgentUpdateManyMutationInput, AgentUncheckedUpdateManyInput>
    /**
     * Filter which Agents to update
     */
    where?: AgentWhereInput
  }


  /**
   * Agent upsert
   */
  export type AgentUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * The filter to search for the Agent to update in case it exists.
     */
    where: AgentWhereUniqueInput
    /**
     * In case the Agent found by the `where` argument doesn't exist, create a new Agent with this data.
     */
    create: XOR<AgentCreateInput, AgentUncheckedCreateInput>
    /**
     * In case the Agent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AgentUpdateInput, AgentUncheckedUpdateInput>
  }


  /**
   * Agent delete
   */
  export type AgentDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
    /**
     * Filter which Agent to delete.
     */
    where: AgentWhereUniqueInput
  }


  /**
   * Agent deleteMany
   */
  export type AgentDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Agents to delete
     */
    where?: AgentWhereInput
  }


  /**
   * Agent without action
   */
  export type AgentArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agent
     */
    select?: AgentSelect<ExtArgs> | null
  }



  /**
   * Model Agency
   */


  export type AggregateAgency = {
    _count: AgencyCountAggregateOutputType | null
    _avg: AgencyAvgAggregateOutputType | null
    _sum: AgencySumAggregateOutputType | null
    _min: AgencyMinAggregateOutputType | null
    _max: AgencyMaxAggregateOutputType | null
  }

  export type AgencyAvgAggregateOutputType = {
    userLimit: number | null
    agentLimit: number | null
    storageLimit: number | null
  }

  export type AgencySumAggregateOutputType = {
    userLimit: number | null
    agentLimit: number | null
    storageLimit: number | null
  }

  export type AgencyMinAggregateOutputType = {
    id: string | null
    name: string | null
    subdomain: string | null
    slug: string | null
    subscriptionTier: AgencyTier | null
    subscriptionStatus: SubscriptionStatus | null
    billingEmail: string | null
    userLimit: number | null
    agentLimit: number | null
    storageLimit: number | null
    isActive: boolean | null
    trialEndsAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AgencyMaxAggregateOutputType = {
    id: string | null
    name: string | null
    subdomain: string | null
    slug: string | null
    subscriptionTier: AgencyTier | null
    subscriptionStatus: SubscriptionStatus | null
    billingEmail: string | null
    userLimit: number | null
    agentLimit: number | null
    storageLimit: number | null
    isActive: boolean | null
    trialEndsAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AgencyCountAggregateOutputType = {
    id: number
    name: number
    subdomain: number
    slug: number
    subscriptionTier: number
    subscriptionStatus: number
    billingEmail: number
    branding: number
    settings: number
    userLimit: number
    agentLimit: number
    storageLimit: number
    isActive: number
    trialEndsAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AgencyAvgAggregateInputType = {
    userLimit?: true
    agentLimit?: true
    storageLimit?: true
  }

  export type AgencySumAggregateInputType = {
    userLimit?: true
    agentLimit?: true
    storageLimit?: true
  }

  export type AgencyMinAggregateInputType = {
    id?: true
    name?: true
    subdomain?: true
    slug?: true
    subscriptionTier?: true
    subscriptionStatus?: true
    billingEmail?: true
    userLimit?: true
    agentLimit?: true
    storageLimit?: true
    isActive?: true
    trialEndsAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AgencyMaxAggregateInputType = {
    id?: true
    name?: true
    subdomain?: true
    slug?: true
    subscriptionTier?: true
    subscriptionStatus?: true
    billingEmail?: true
    userLimit?: true
    agentLimit?: true
    storageLimit?: true
    isActive?: true
    trialEndsAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AgencyCountAggregateInputType = {
    id?: true
    name?: true
    subdomain?: true
    slug?: true
    subscriptionTier?: true
    subscriptionStatus?: true
    billingEmail?: true
    branding?: true
    settings?: true
    userLimit?: true
    agentLimit?: true
    storageLimit?: true
    isActive?: true
    trialEndsAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AgencyAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Agency to aggregate.
     */
    where?: AgencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agencies to fetch.
     */
    orderBy?: Enumerable<AgencyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AgencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Agencies
    **/
    _count?: true | AgencyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AgencyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AgencySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AgencyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AgencyMaxAggregateInputType
  }

  export type GetAgencyAggregateType<T extends AgencyAggregateArgs> = {
        [P in keyof T & keyof AggregateAgency]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAgency[P]>
      : GetScalarType<T[P], AggregateAgency[P]>
  }




  export type AgencyGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AgencyWhereInput
    orderBy?: Enumerable<AgencyOrderByWithAggregationInput>
    by: AgencyScalarFieldEnum[]
    having?: AgencyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AgencyCountAggregateInputType | true
    _avg?: AgencyAvgAggregateInputType
    _sum?: AgencySumAggregateInputType
    _min?: AgencyMinAggregateInputType
    _max?: AgencyMaxAggregateInputType
  }


  export type AgencyGroupByOutputType = {
    id: string
    name: string
    subdomain: string
    slug: string
    subscriptionTier: AgencyTier
    subscriptionStatus: SubscriptionStatus
    billingEmail: string
    branding: JsonValue | null
    settings: JsonValue | null
    userLimit: number
    agentLimit: number
    storageLimit: number
    isActive: boolean
    trialEndsAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: AgencyCountAggregateOutputType | null
    _avg: AgencyAvgAggregateOutputType | null
    _sum: AgencySumAggregateOutputType | null
    _min: AgencyMinAggregateOutputType | null
    _max: AgencyMaxAggregateOutputType | null
  }

  type GetAgencyGroupByPayload<T extends AgencyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AgencyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AgencyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AgencyGroupByOutputType[P]>
            : GetScalarType<T[P], AgencyGroupByOutputType[P]>
        }
      >
    >


  export type AgencySelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    subdomain?: boolean
    slug?: boolean
    subscriptionTier?: boolean
    subscriptionStatus?: boolean
    billingEmail?: boolean
    branding?: boolean
    settings?: boolean
    userLimit?: boolean
    agentLimit?: boolean
    storageLimit?: boolean
    isActive?: boolean
    trialEndsAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    users?: boolean | Agency$usersArgs<ExtArgs>
    chats?: boolean | Agency$chatsArgs<ExtArgs>
    sessions?: boolean | Agency$sessionsArgs<ExtArgs>
    subscriptions?: boolean | Agency$subscriptionsArgs<ExtArgs>
    auditLogs?: boolean | Agency$auditLogsArgs<ExtArgs>
    swarmExecutions?: boolean | Agency$swarmExecutionsArgs<ExtArgs>
    serviceRequests?: boolean | Agency$serviceRequestsArgs<ExtArgs>
    serviceProviders?: boolean | Agency$serviceProvidersArgs<ExtArgs>
    _count?: boolean | AgencyCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["agency"]>

  export type AgencySelectScalar = {
    id?: boolean
    name?: boolean
    subdomain?: boolean
    slug?: boolean
    subscriptionTier?: boolean
    subscriptionStatus?: boolean
    billingEmail?: boolean
    branding?: boolean
    settings?: boolean
    userLimit?: boolean
    agentLimit?: boolean
    storageLimit?: boolean
    isActive?: boolean
    trialEndsAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AgencyInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    users?: boolean | Agency$usersArgs<ExtArgs>
    chats?: boolean | Agency$chatsArgs<ExtArgs>
    sessions?: boolean | Agency$sessionsArgs<ExtArgs>
    subscriptions?: boolean | Agency$subscriptionsArgs<ExtArgs>
    auditLogs?: boolean | Agency$auditLogsArgs<ExtArgs>
    swarmExecutions?: boolean | Agency$swarmExecutionsArgs<ExtArgs>
    serviceRequests?: boolean | Agency$serviceRequestsArgs<ExtArgs>
    serviceProviders?: boolean | Agency$serviceProvidersArgs<ExtArgs>
    _count?: boolean | AgencyCountOutputTypeArgs<ExtArgs>
  }


  type AgencyGetPayload<S extends boolean | null | undefined | AgencyArgs> = $Types.GetResult<AgencyPayload, S>

  type AgencyCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<AgencyFindManyArgs, 'select' | 'include'> & {
      select?: AgencyCountAggregateInputType | true
    }

  export interface AgencyDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Agency'], meta: { name: 'Agency' } }
    /**
     * Find zero or one Agency that matches the filter.
     * @param {AgencyFindUniqueArgs} args - Arguments to find a Agency
     * @example
     * // Get one Agency
     * const agency = await prisma.agency.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AgencyFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AgencyFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Agency'> extends True ? Prisma__AgencyClient<$Types.GetResult<AgencyPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__AgencyClient<$Types.GetResult<AgencyPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Agency that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AgencyFindUniqueOrThrowArgs} args - Arguments to find a Agency
     * @example
     * // Get one Agency
     * const agency = await prisma.agency.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AgencyFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AgencyFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AgencyClient<$Types.GetResult<AgencyPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Agency that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgencyFindFirstArgs} args - Arguments to find a Agency
     * @example
     * // Get one Agency
     * const agency = await prisma.agency.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AgencyFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AgencyFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Agency'> extends True ? Prisma__AgencyClient<$Types.GetResult<AgencyPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__AgencyClient<$Types.GetResult<AgencyPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Agency that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgencyFindFirstOrThrowArgs} args - Arguments to find a Agency
     * @example
     * // Get one Agency
     * const agency = await prisma.agency.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AgencyFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AgencyFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AgencyClient<$Types.GetResult<AgencyPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Agencies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgencyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Agencies
     * const agencies = await prisma.agency.findMany()
     * 
     * // Get first 10 Agencies
     * const agencies = await prisma.agency.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const agencyWithIdOnly = await prisma.agency.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AgencyFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AgencyFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<AgencyPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Agency.
     * @param {AgencyCreateArgs} args - Arguments to create a Agency.
     * @example
     * // Create one Agency
     * const Agency = await prisma.agency.create({
     *   data: {
     *     // ... data to create a Agency
     *   }
     * })
     * 
    **/
    create<T extends AgencyCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AgencyCreateArgs<ExtArgs>>
    ): Prisma__AgencyClient<$Types.GetResult<AgencyPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Agencies.
     *     @param {AgencyCreateManyArgs} args - Arguments to create many Agencies.
     *     @example
     *     // Create many Agencies
     *     const agency = await prisma.agency.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AgencyCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AgencyCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Agency.
     * @param {AgencyDeleteArgs} args - Arguments to delete one Agency.
     * @example
     * // Delete one Agency
     * const Agency = await prisma.agency.delete({
     *   where: {
     *     // ... filter to delete one Agency
     *   }
     * })
     * 
    **/
    delete<T extends AgencyDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AgencyDeleteArgs<ExtArgs>>
    ): Prisma__AgencyClient<$Types.GetResult<AgencyPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Agency.
     * @param {AgencyUpdateArgs} args - Arguments to update one Agency.
     * @example
     * // Update one Agency
     * const agency = await prisma.agency.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AgencyUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AgencyUpdateArgs<ExtArgs>>
    ): Prisma__AgencyClient<$Types.GetResult<AgencyPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Agencies.
     * @param {AgencyDeleteManyArgs} args - Arguments to filter Agencies to delete.
     * @example
     * // Delete a few Agencies
     * const { count } = await prisma.agency.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AgencyDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AgencyDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Agencies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgencyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Agencies
     * const agency = await prisma.agency.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AgencyUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AgencyUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Agency.
     * @param {AgencyUpsertArgs} args - Arguments to update or create a Agency.
     * @example
     * // Update or create a Agency
     * const agency = await prisma.agency.upsert({
     *   create: {
     *     // ... data to create a Agency
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Agency we want to update
     *   }
     * })
    **/
    upsert<T extends AgencyUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AgencyUpsertArgs<ExtArgs>>
    ): Prisma__AgencyClient<$Types.GetResult<AgencyPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Agencies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgencyCountArgs} args - Arguments to filter Agencies to count.
     * @example
     * // Count the number of Agencies
     * const count = await prisma.agency.count({
     *   where: {
     *     // ... the filter for the Agencies we want to count
     *   }
     * })
    **/
    count<T extends AgencyCountArgs>(
      args?: Subset<T, AgencyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AgencyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Agency.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgencyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AgencyAggregateArgs>(args: Subset<T, AgencyAggregateArgs>): Prisma.PrismaPromise<GetAgencyAggregateType<T>>

    /**
     * Group by Agency.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgencyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AgencyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AgencyGroupByArgs['orderBy'] }
        : { orderBy?: AgencyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AgencyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAgencyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Agency.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AgencyClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    users<T extends Agency$usersArgs<ExtArgs> = {}>(args?: Subset<T, Agency$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<UserPayload<ExtArgs>, T, 'findMany', never>| Null>;

    chats<T extends Agency$chatsArgs<ExtArgs> = {}>(args?: Subset<T, Agency$chatsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ChatPayload<ExtArgs>, T, 'findMany', never>| Null>;

    sessions<T extends Agency$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, Agency$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findMany', never>| Null>;

    subscriptions<T extends Agency$subscriptionsArgs<ExtArgs> = {}>(args?: Subset<T, Agency$subscriptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<AgencySubscriptionPayload<ExtArgs>, T, 'findMany', never>| Null>;

    auditLogs<T extends Agency$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, Agency$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<AgencyAuditLogPayload<ExtArgs>, T, 'findMany', never>| Null>;

    swarmExecutions<T extends Agency$swarmExecutionsArgs<ExtArgs> = {}>(args?: Subset<T, Agency$swarmExecutionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<SwarmExecutionPayload<ExtArgs>, T, 'findMany', never>| Null>;

    serviceRequests<T extends Agency$serviceRequestsArgs<ExtArgs> = {}>(args?: Subset<T, Agency$serviceRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ServiceRequestPayload<ExtArgs>, T, 'findMany', never>| Null>;

    serviceProviders<T extends Agency$serviceProvidersArgs<ExtArgs> = {}>(args?: Subset<T, Agency$serviceProvidersArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ServiceProviderPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Agency base type for findUnique actions
   */
  export type AgencyFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agency
     */
    select?: AgencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencyInclude<ExtArgs> | null
    /**
     * Filter, which Agency to fetch.
     */
    where: AgencyWhereUniqueInput
  }

  /**
   * Agency findUnique
   */
  export interface AgencyFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AgencyFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Agency findUniqueOrThrow
   */
  export type AgencyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agency
     */
    select?: AgencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencyInclude<ExtArgs> | null
    /**
     * Filter, which Agency to fetch.
     */
    where: AgencyWhereUniqueInput
  }


  /**
   * Agency base type for findFirst actions
   */
  export type AgencyFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agency
     */
    select?: AgencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencyInclude<ExtArgs> | null
    /**
     * Filter, which Agency to fetch.
     */
    where?: AgencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agencies to fetch.
     */
    orderBy?: Enumerable<AgencyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Agencies.
     */
    cursor?: AgencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Agencies.
     */
    distinct?: Enumerable<AgencyScalarFieldEnum>
  }

  /**
   * Agency findFirst
   */
  export interface AgencyFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AgencyFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Agency findFirstOrThrow
   */
  export type AgencyFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agency
     */
    select?: AgencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencyInclude<ExtArgs> | null
    /**
     * Filter, which Agency to fetch.
     */
    where?: AgencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agencies to fetch.
     */
    orderBy?: Enumerable<AgencyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Agencies.
     */
    cursor?: AgencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Agencies.
     */
    distinct?: Enumerable<AgencyScalarFieldEnum>
  }


  /**
   * Agency findMany
   */
  export type AgencyFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agency
     */
    select?: AgencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencyInclude<ExtArgs> | null
    /**
     * Filter, which Agencies to fetch.
     */
    where?: AgencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agencies to fetch.
     */
    orderBy?: Enumerable<AgencyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Agencies.
     */
    cursor?: AgencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agencies.
     */
    skip?: number
    distinct?: Enumerable<AgencyScalarFieldEnum>
  }


  /**
   * Agency create
   */
  export type AgencyCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agency
     */
    select?: AgencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencyInclude<ExtArgs> | null
    /**
     * The data needed to create a Agency.
     */
    data: XOR<AgencyCreateInput, AgencyUncheckedCreateInput>
  }


  /**
   * Agency createMany
   */
  export type AgencyCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Agencies.
     */
    data: Enumerable<AgencyCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Agency update
   */
  export type AgencyUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agency
     */
    select?: AgencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencyInclude<ExtArgs> | null
    /**
     * The data needed to update a Agency.
     */
    data: XOR<AgencyUpdateInput, AgencyUncheckedUpdateInput>
    /**
     * Choose, which Agency to update.
     */
    where: AgencyWhereUniqueInput
  }


  /**
   * Agency updateMany
   */
  export type AgencyUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Agencies.
     */
    data: XOR<AgencyUpdateManyMutationInput, AgencyUncheckedUpdateManyInput>
    /**
     * Filter which Agencies to update
     */
    where?: AgencyWhereInput
  }


  /**
   * Agency upsert
   */
  export type AgencyUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agency
     */
    select?: AgencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencyInclude<ExtArgs> | null
    /**
     * The filter to search for the Agency to update in case it exists.
     */
    where: AgencyWhereUniqueInput
    /**
     * In case the Agency found by the `where` argument doesn't exist, create a new Agency with this data.
     */
    create: XOR<AgencyCreateInput, AgencyUncheckedCreateInput>
    /**
     * In case the Agency was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AgencyUpdateInput, AgencyUncheckedUpdateInput>
  }


  /**
   * Agency delete
   */
  export type AgencyDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agency
     */
    select?: AgencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencyInclude<ExtArgs> | null
    /**
     * Filter which Agency to delete.
     */
    where: AgencyWhereUniqueInput
  }


  /**
   * Agency deleteMany
   */
  export type AgencyDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Agencies to delete
     */
    where?: AgencyWhereInput
  }


  /**
   * Agency.users
   */
  export type Agency$usersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * Agency.chats
   */
  export type Agency$chatsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
    where?: ChatWhereInput
    orderBy?: Enumerable<ChatOrderByWithRelationInput>
    cursor?: ChatWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ChatScalarFieldEnum>
  }


  /**
   * Agency.sessions
   */
  export type Agency$sessionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Agency.subscriptions
   */
  export type Agency$subscriptionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgencySubscription
     */
    select?: AgencySubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencySubscriptionInclude<ExtArgs> | null
    where?: AgencySubscriptionWhereInput
    orderBy?: Enumerable<AgencySubscriptionOrderByWithRelationInput>
    cursor?: AgencySubscriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AgencySubscriptionScalarFieldEnum>
  }


  /**
   * Agency.auditLogs
   */
  export type Agency$auditLogsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgencyAuditLog
     */
    select?: AgencyAuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencyAuditLogInclude<ExtArgs> | null
    where?: AgencyAuditLogWhereInput
    orderBy?: Enumerable<AgencyAuditLogOrderByWithRelationInput>
    cursor?: AgencyAuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AgencyAuditLogScalarFieldEnum>
  }


  /**
   * Agency.swarmExecutions
   */
  export type Agency$swarmExecutionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwarmExecution
     */
    select?: SwarmExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SwarmExecutionInclude<ExtArgs> | null
    where?: SwarmExecutionWhereInput
    orderBy?: Enumerable<SwarmExecutionOrderByWithRelationInput>
    cursor?: SwarmExecutionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SwarmExecutionScalarFieldEnum>
  }


  /**
   * Agency.serviceRequests
   */
  export type Agency$serviceRequestsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceRequest
     */
    select?: ServiceRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceRequestInclude<ExtArgs> | null
    where?: ServiceRequestWhereInput
    orderBy?: Enumerable<ServiceRequestOrderByWithRelationInput>
    cursor?: ServiceRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ServiceRequestScalarFieldEnum>
  }


  /**
   * Agency.serviceProviders
   */
  export type Agency$serviceProvidersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceProvider
     */
    select?: ServiceProviderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceProviderInclude<ExtArgs> | null
    where?: ServiceProviderWhereInput
    orderBy?: Enumerable<ServiceProviderOrderByWithRelationInput>
    cursor?: ServiceProviderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ServiceProviderScalarFieldEnum>
  }


  /**
   * Agency without action
   */
  export type AgencyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agency
     */
    select?: AgencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencyInclude<ExtArgs> | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    passwordHash: string | null
    agencyId: string | null
    role: EnhancedUserRole | null
    isActive: boolean | null
    onboardingCompleted: boolean | null
    emailVerified: boolean | null
    lastLoginAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    passwordHash: string | null
    agencyId: string | null
    role: EnhancedUserRole | null
    isActive: boolean | null
    onboardingCompleted: boolean | null
    emailVerified: boolean | null
    lastLoginAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    passwordHash: number
    agencyId: number
    role: number
    permissions: number
    isActive: number
    onboardingCompleted: number
    emailVerified: number
    lastLoginAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    passwordHash?: true
    agencyId?: true
    role?: true
    isActive?: true
    onboardingCompleted?: true
    emailVerified?: true
    lastLoginAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    passwordHash?: true
    agencyId?: true
    role?: true
    isActive?: true
    onboardingCompleted?: true
    emailVerified?: true
    lastLoginAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    passwordHash?: true
    agencyId?: true
    role?: true
    permissions?: true
    isActive?: true
    onboardingCompleted?: true
    emailVerified?: true
    lastLoginAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    email: string
    name: string | null
    passwordHash: string
    agencyId: string
    role: EnhancedUserRole
    permissions: JsonValue | null
    isActive: boolean
    onboardingCompleted: boolean
    emailVerified: boolean
    lastLoginAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    passwordHash?: boolean
    agencyId?: boolean
    role?: boolean
    permissions?: boolean
    isActive?: boolean
    onboardingCompleted?: boolean
    emailVerified?: boolean
    lastLoginAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    agency?: boolean | AgencyArgs<ExtArgs>
    createdChats?: boolean | User$createdChatsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    serviceRequests?: boolean | User$serviceRequestsArgs<ExtArgs>
    providerReviews?: boolean | User$providerReviewsArgs<ExtArgs>
    serviceReviews?: boolean | User$serviceReviewsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    passwordHash?: boolean
    agencyId?: boolean
    role?: boolean
    permissions?: boolean
    isActive?: boolean
    onboardingCompleted?: boolean
    emailVerified?: boolean
    lastLoginAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    agency?: boolean | AgencyArgs<ExtArgs>
    createdChats?: boolean | User$createdChatsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    serviceRequests?: boolean | User$serviceRequestsArgs<ExtArgs>
    providerReviews?: boolean | User$providerReviewsArgs<ExtArgs>
    serviceReviews?: boolean | User$serviceReviewsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeArgs<ExtArgs>
  }


  type UserGetPayload<S extends boolean | null | undefined | UserArgs> = $Types.GetResult<UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<UserPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    agency<T extends AgencyArgs<ExtArgs> = {}>(args?: Subset<T, AgencyArgs<ExtArgs>>): Prisma__AgencyClient<$Types.GetResult<AgencyPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    createdChats<T extends User$createdChatsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdChatsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ChatPayload<ExtArgs>, T, 'findMany', never>| Null>;

    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findMany', never>| Null>;

    auditLogs<T extends User$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<AgencyAuditLogPayload<ExtArgs>, T, 'findMany', never>| Null>;

    serviceRequests<T extends User$serviceRequestsArgs<ExtArgs> = {}>(args?: Subset<T, User$serviceRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ServiceRequestPayload<ExtArgs>, T, 'findMany', never>| Null>;

    providerReviews<T extends User$providerReviewsArgs<ExtArgs> = {}>(args?: Subset<T, User$providerReviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ProviderReviewPayload<ExtArgs>, T, 'findMany', never>| Null>;

    serviceReviews<T extends User$serviceReviewsArgs<ExtArgs> = {}>(args?: Subset<T, User$serviceReviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ServiceReviewPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UserFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UserFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.createdChats
   */
  export type User$createdChatsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
    where?: ChatWhereInput
    orderBy?: Enumerable<ChatOrderByWithRelationInput>
    cursor?: ChatWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ChatScalarFieldEnum>
  }


  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * User.auditLogs
   */
  export type User$auditLogsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgencyAuditLog
     */
    select?: AgencyAuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencyAuditLogInclude<ExtArgs> | null
    where?: AgencyAuditLogWhereInput
    orderBy?: Enumerable<AgencyAuditLogOrderByWithRelationInput>
    cursor?: AgencyAuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AgencyAuditLogScalarFieldEnum>
  }


  /**
   * User.serviceRequests
   */
  export type User$serviceRequestsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceRequest
     */
    select?: ServiceRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceRequestInclude<ExtArgs> | null
    where?: ServiceRequestWhereInput
    orderBy?: Enumerable<ServiceRequestOrderByWithRelationInput>
    cursor?: ServiceRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ServiceRequestScalarFieldEnum>
  }


  /**
   * User.providerReviews
   */
  export type User$providerReviewsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderReview
     */
    select?: ProviderReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProviderReviewInclude<ExtArgs> | null
    where?: ProviderReviewWhereInput
    orderBy?: Enumerable<ProviderReviewOrderByWithRelationInput>
    cursor?: ProviderReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProviderReviewScalarFieldEnum>
  }


  /**
   * User.serviceReviews
   */
  export type User$serviceReviewsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceReview
     */
    select?: ServiceReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceReviewInclude<ExtArgs> | null
    where?: ServiceReviewWhereInput
    orderBy?: Enumerable<ServiceReviewOrderByWithRelationInput>
    cursor?: ServiceReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ServiceReviewScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Chat
   */


  export type AggregateChat = {
    _count: ChatCountAggregateOutputType | null
    _min: ChatMinAggregateOutputType | null
    _max: ChatMaxAggregateOutputType | null
  }

  export type ChatMinAggregateOutputType = {
    id: string | null
    agencyId: string | null
    title: string | null
    createdBy: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChatMaxAggregateOutputType = {
    id: string | null
    agencyId: string | null
    title: string | null
    createdBy: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChatCountAggregateOutputType = {
    id: number
    agencyId: number
    title: number
    createdBy: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ChatMinAggregateInputType = {
    id?: true
    agencyId?: true
    title?: true
    createdBy?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChatMaxAggregateInputType = {
    id?: true
    agencyId?: true
    title?: true
    createdBy?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChatCountAggregateInputType = {
    id?: true
    agencyId?: true
    title?: true
    createdBy?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ChatAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Chat to aggregate.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: Enumerable<ChatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Chats
    **/
    _count?: true | ChatCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatMaxAggregateInputType
  }

  export type GetChatAggregateType<T extends ChatAggregateArgs> = {
        [P in keyof T & keyof AggregateChat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChat[P]>
      : GetScalarType<T[P], AggregateChat[P]>
  }




  export type ChatGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ChatWhereInput
    orderBy?: Enumerable<ChatOrderByWithAggregationInput>
    by: ChatScalarFieldEnum[]
    having?: ChatScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatCountAggregateInputType | true
    _min?: ChatMinAggregateInputType
    _max?: ChatMaxAggregateInputType
  }


  export type ChatGroupByOutputType = {
    id: string
    agencyId: string
    title: string | null
    createdBy: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: ChatCountAggregateOutputType | null
    _min: ChatMinAggregateOutputType | null
    _max: ChatMaxAggregateOutputType | null
  }

  type GetChatGroupByPayload<T extends ChatGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ChatGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatGroupByOutputType[P]>
            : GetScalarType<T[P], ChatGroupByOutputType[P]>
        }
      >
    >


  export type ChatSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agencyId?: boolean
    title?: boolean
    createdBy?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    agency?: boolean | AgencyArgs<ExtArgs>
    creator?: boolean | UserArgs<ExtArgs>
  }, ExtArgs["result"]["chat"]>

  export type ChatSelectScalar = {
    id?: boolean
    agencyId?: boolean
    title?: boolean
    createdBy?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ChatInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    agency?: boolean | AgencyArgs<ExtArgs>
    creator?: boolean | UserArgs<ExtArgs>
  }


  type ChatGetPayload<S extends boolean | null | undefined | ChatArgs> = $Types.GetResult<ChatPayload, S>

  type ChatCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ChatFindManyArgs, 'select' | 'include'> & {
      select?: ChatCountAggregateInputType | true
    }

  export interface ChatDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Chat'], meta: { name: 'Chat' } }
    /**
     * Find zero or one Chat that matches the filter.
     * @param {ChatFindUniqueArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChatFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ChatFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Chat'> extends True ? Prisma__ChatClient<$Types.GetResult<ChatPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ChatClient<$Types.GetResult<ChatPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Chat that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ChatFindUniqueOrThrowArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ChatFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ChatClient<$Types.GetResult<ChatPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Chat that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatFindFirstArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChatFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ChatFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Chat'> extends True ? Prisma__ChatClient<$Types.GetResult<ChatPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ChatClient<$Types.GetResult<ChatPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Chat that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatFindFirstOrThrowArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ChatFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ChatClient<$Types.GetResult<ChatPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Chats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chats
     * const chats = await prisma.chat.findMany()
     * 
     * // Get first 10 Chats
     * const chats = await prisma.chat.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatWithIdOnly = await prisma.chat.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ChatFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ChatPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Chat.
     * @param {ChatCreateArgs} args - Arguments to create a Chat.
     * @example
     * // Create one Chat
     * const Chat = await prisma.chat.create({
     *   data: {
     *     // ... data to create a Chat
     *   }
     * })
     * 
    **/
    create<T extends ChatCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ChatCreateArgs<ExtArgs>>
    ): Prisma__ChatClient<$Types.GetResult<ChatPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Chats.
     *     @param {ChatCreateManyArgs} args - Arguments to create many Chats.
     *     @example
     *     // Create many Chats
     *     const chat = await prisma.chat.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ChatCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Chat.
     * @param {ChatDeleteArgs} args - Arguments to delete one Chat.
     * @example
     * // Delete one Chat
     * const Chat = await prisma.chat.delete({
     *   where: {
     *     // ... filter to delete one Chat
     *   }
     * })
     * 
    **/
    delete<T extends ChatDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ChatDeleteArgs<ExtArgs>>
    ): Prisma__ChatClient<$Types.GetResult<ChatPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Chat.
     * @param {ChatUpdateArgs} args - Arguments to update one Chat.
     * @example
     * // Update one Chat
     * const chat = await prisma.chat.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChatUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ChatUpdateArgs<ExtArgs>>
    ): Prisma__ChatClient<$Types.GetResult<ChatPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Chats.
     * @param {ChatDeleteManyArgs} args - Arguments to filter Chats to delete.
     * @example
     * // Delete a few Chats
     * const { count } = await prisma.chat.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChatDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chats
     * const chat = await prisma.chat.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChatUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ChatUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Chat.
     * @param {ChatUpsertArgs} args - Arguments to update or create a Chat.
     * @example
     * // Update or create a Chat
     * const chat = await prisma.chat.upsert({
     *   create: {
     *     // ... data to create a Chat
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chat we want to update
     *   }
     * })
    **/
    upsert<T extends ChatUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ChatUpsertArgs<ExtArgs>>
    ): Prisma__ChatClient<$Types.GetResult<ChatPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Chats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatCountArgs} args - Arguments to filter Chats to count.
     * @example
     * // Count the number of Chats
     * const count = await prisma.chat.count({
     *   where: {
     *     // ... the filter for the Chats we want to count
     *   }
     * })
    **/
    count<T extends ChatCountArgs>(
      args?: Subset<T, ChatCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatAggregateArgs>(args: Subset<T, ChatAggregateArgs>): Prisma.PrismaPromise<GetChatAggregateType<T>>

    /**
     * Group by Chat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatGroupByArgs['orderBy'] }
        : { orderBy?: ChatGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Chat.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ChatClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    agency<T extends AgencyArgs<ExtArgs> = {}>(args?: Subset<T, AgencyArgs<ExtArgs>>): Prisma__AgencyClient<$Types.GetResult<AgencyPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    creator<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Chat base type for findUnique actions
   */
  export type ChatFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * Filter, which Chat to fetch.
     */
    where: ChatWhereUniqueInput
  }

  /**
   * Chat findUnique
   */
  export interface ChatFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ChatFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Chat findUniqueOrThrow
   */
  export type ChatFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * Filter, which Chat to fetch.
     */
    where: ChatWhereUniqueInput
  }


  /**
   * Chat base type for findFirst actions
   */
  export type ChatFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * Filter, which Chat to fetch.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: Enumerable<ChatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chats.
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chats.
     */
    distinct?: Enumerable<ChatScalarFieldEnum>
  }

  /**
   * Chat findFirst
   */
  export interface ChatFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ChatFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Chat findFirstOrThrow
   */
  export type ChatFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * Filter, which Chat to fetch.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: Enumerable<ChatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chats.
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chats.
     */
    distinct?: Enumerable<ChatScalarFieldEnum>
  }


  /**
   * Chat findMany
   */
  export type ChatFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * Filter, which Chats to fetch.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: Enumerable<ChatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Chats.
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    distinct?: Enumerable<ChatScalarFieldEnum>
  }


  /**
   * Chat create
   */
  export type ChatCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * The data needed to create a Chat.
     */
    data: XOR<ChatCreateInput, ChatUncheckedCreateInput>
  }


  /**
   * Chat createMany
   */
  export type ChatCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Chats.
     */
    data: Enumerable<ChatCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Chat update
   */
  export type ChatUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * The data needed to update a Chat.
     */
    data: XOR<ChatUpdateInput, ChatUncheckedUpdateInput>
    /**
     * Choose, which Chat to update.
     */
    where: ChatWhereUniqueInput
  }


  /**
   * Chat updateMany
   */
  export type ChatUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Chats.
     */
    data: XOR<ChatUpdateManyMutationInput, ChatUncheckedUpdateManyInput>
    /**
     * Filter which Chats to update
     */
    where?: ChatWhereInput
  }


  /**
   * Chat upsert
   */
  export type ChatUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * The filter to search for the Chat to update in case it exists.
     */
    where: ChatWhereUniqueInput
    /**
     * In case the Chat found by the `where` argument doesn't exist, create a new Chat with this data.
     */
    create: XOR<ChatCreateInput, ChatUncheckedCreateInput>
    /**
     * In case the Chat was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatUpdateInput, ChatUncheckedUpdateInput>
  }


  /**
   * Chat delete
   */
  export type ChatDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * Filter which Chat to delete.
     */
    where: ChatWhereUniqueInput
  }


  /**
   * Chat deleteMany
   */
  export type ChatDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Chats to delete
     */
    where?: ChatWhereInput
  }


  /**
   * Chat without action
   */
  export type ChatArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude<ExtArgs> | null
  }



  /**
   * Model Session
   */


  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    agencyId: string | null
    token: string | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    agencyId: string | null
    token: string | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    userId: number
    agencyId: number
    token: number
    expiresAt: number
    createdAt: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    userId?: true
    agencyId?: true
    token?: true
    expiresAt?: true
    createdAt?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    userId?: true
    agencyId?: true
    token?: true
    expiresAt?: true
    createdAt?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    userId?: true
    agencyId?: true
    token?: true
    expiresAt?: true
    createdAt?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: Enumerable<SessionOrderByWithAggregationInput>
    by: SessionScalarFieldEnum[]
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }


  export type SessionGroupByOutputType = {
    id: string
    userId: string
    agencyId: string
    token: string
    expiresAt: Date
    createdAt: Date
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    agencyId?: boolean
    token?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    user?: boolean | UserArgs<ExtArgs>
    agency?: boolean | AgencyArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    userId?: boolean
    agencyId?: boolean
    token?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }

  export type SessionInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
    agency?: boolean | AgencyArgs<ExtArgs>
  }


  type SessionGetPayload<S extends boolean | null | undefined | SessionArgs> = $Types.GetResult<SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<SessionFindManyArgs, 'select' | 'include'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SessionFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Session'> extends True ? Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Session that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SessionFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Session'> extends True ? Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Session that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SessionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
    **/
    create<T extends SessionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SessionCreateArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Sessions.
     *     @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     *     @example
     *     // Create many Sessions
     *     const session = await prisma.session.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SessionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
    **/
    delete<T extends SessionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
    **/
    upsert<T extends SessionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    agency<T extends AgencyArgs<ExtArgs> = {}>(args?: Subset<T, AgencyArgs<ExtArgs>>): Prisma__AgencyClient<$Types.GetResult<AgencyPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Session base type for findUnique actions
   */
  export type SessionFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUnique
   */
  export interface SessionFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends SessionFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session base type for findFirst actions
   */
  export type SessionFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: Enumerable<SessionScalarFieldEnum>
  }

  /**
   * Session findFirst
   */
  export interface SessionFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends SessionFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }


  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: Enumerable<SessionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }


  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }


  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }


  /**
   * Session without action
   */
  export type SessionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
  }



  /**
   * Model SwarmExecution
   */


  export type AggregateSwarmExecution = {
    _count: SwarmExecutionCountAggregateOutputType | null
    _avg: SwarmExecutionAvgAggregateOutputType | null
    _sum: SwarmExecutionSumAggregateOutputType | null
    _min: SwarmExecutionMinAggregateOutputType | null
    _max: SwarmExecutionMaxAggregateOutputType | null
  }

  export type SwarmExecutionAvgAggregateOutputType = {
    qualityScore: number | null
  }

  export type SwarmExecutionSumAggregateOutputType = {
    qualityScore: number | null
  }

  export type SwarmExecutionMinAggregateOutputType = {
    id: string | null
    serviceRequestId: string | null
    agencyId: string | null
    status: SwarmExecutionStatus | null
    qualityScore: number | null
    startedAt: Date | null
    completedAt: Date | null
  }

  export type SwarmExecutionMaxAggregateOutputType = {
    id: string | null
    serviceRequestId: string | null
    agencyId: string | null
    status: SwarmExecutionStatus | null
    qualityScore: number | null
    startedAt: Date | null
    completedAt: Date | null
  }

  export type SwarmExecutionCountAggregateOutputType = {
    id: number
    serviceRequestId: number
    agencyId: number
    status: number
    qualityScore: number
    activeAgents: number
    executionPlan: number
    results: number
    startedAt: number
    completedAt: number
    _all: number
  }


  export type SwarmExecutionAvgAggregateInputType = {
    qualityScore?: true
  }

  export type SwarmExecutionSumAggregateInputType = {
    qualityScore?: true
  }

  export type SwarmExecutionMinAggregateInputType = {
    id?: true
    serviceRequestId?: true
    agencyId?: true
    status?: true
    qualityScore?: true
    startedAt?: true
    completedAt?: true
  }

  export type SwarmExecutionMaxAggregateInputType = {
    id?: true
    serviceRequestId?: true
    agencyId?: true
    status?: true
    qualityScore?: true
    startedAt?: true
    completedAt?: true
  }

  export type SwarmExecutionCountAggregateInputType = {
    id?: true
    serviceRequestId?: true
    agencyId?: true
    status?: true
    qualityScore?: true
    activeAgents?: true
    executionPlan?: true
    results?: true
    startedAt?: true
    completedAt?: true
    _all?: true
  }

  export type SwarmExecutionAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which SwarmExecution to aggregate.
     */
    where?: SwarmExecutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SwarmExecutions to fetch.
     */
    orderBy?: Enumerable<SwarmExecutionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SwarmExecutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SwarmExecutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SwarmExecutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SwarmExecutions
    **/
    _count?: true | SwarmExecutionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SwarmExecutionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SwarmExecutionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SwarmExecutionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SwarmExecutionMaxAggregateInputType
  }

  export type GetSwarmExecutionAggregateType<T extends SwarmExecutionAggregateArgs> = {
        [P in keyof T & keyof AggregateSwarmExecution]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSwarmExecution[P]>
      : GetScalarType<T[P], AggregateSwarmExecution[P]>
  }




  export type SwarmExecutionGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SwarmExecutionWhereInput
    orderBy?: Enumerable<SwarmExecutionOrderByWithAggregationInput>
    by: SwarmExecutionScalarFieldEnum[]
    having?: SwarmExecutionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SwarmExecutionCountAggregateInputType | true
    _avg?: SwarmExecutionAvgAggregateInputType
    _sum?: SwarmExecutionSumAggregateInputType
    _min?: SwarmExecutionMinAggregateInputType
    _max?: SwarmExecutionMaxAggregateInputType
  }


  export type SwarmExecutionGroupByOutputType = {
    id: string
    serviceRequestId: string | null
    agencyId: string
    status: SwarmExecutionStatus
    qualityScore: number | null
    activeAgents: JsonValue
    executionPlan: JsonValue
    results: JsonValue | null
    startedAt: Date
    completedAt: Date | null
    _count: SwarmExecutionCountAggregateOutputType | null
    _avg: SwarmExecutionAvgAggregateOutputType | null
    _sum: SwarmExecutionSumAggregateOutputType | null
    _min: SwarmExecutionMinAggregateOutputType | null
    _max: SwarmExecutionMaxAggregateOutputType | null
  }

  type GetSwarmExecutionGroupByPayload<T extends SwarmExecutionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SwarmExecutionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SwarmExecutionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SwarmExecutionGroupByOutputType[P]>
            : GetScalarType<T[P], SwarmExecutionGroupByOutputType[P]>
        }
      >
    >


  export type SwarmExecutionSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serviceRequestId?: boolean
    agencyId?: boolean
    status?: boolean
    qualityScore?: boolean
    activeAgents?: boolean
    executionPlan?: boolean
    results?: boolean
    startedAt?: boolean
    completedAt?: boolean
    agency?: boolean | AgencyArgs<ExtArgs>
    executionSteps?: boolean | SwarmExecution$executionStepsArgs<ExtArgs>
    messages?: boolean | SwarmExecution$messagesArgs<ExtArgs>
    _count?: boolean | SwarmExecutionCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["swarmExecution"]>

  export type SwarmExecutionSelectScalar = {
    id?: boolean
    serviceRequestId?: boolean
    agencyId?: boolean
    status?: boolean
    qualityScore?: boolean
    activeAgents?: boolean
    executionPlan?: boolean
    results?: boolean
    startedAt?: boolean
    completedAt?: boolean
  }

  export type SwarmExecutionInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    agency?: boolean | AgencyArgs<ExtArgs>
    executionSteps?: boolean | SwarmExecution$executionStepsArgs<ExtArgs>
    messages?: boolean | SwarmExecution$messagesArgs<ExtArgs>
    _count?: boolean | SwarmExecutionCountOutputTypeArgs<ExtArgs>
  }


  type SwarmExecutionGetPayload<S extends boolean | null | undefined | SwarmExecutionArgs> = $Types.GetResult<SwarmExecutionPayload, S>

  type SwarmExecutionCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<SwarmExecutionFindManyArgs, 'select' | 'include'> & {
      select?: SwarmExecutionCountAggregateInputType | true
    }

  export interface SwarmExecutionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SwarmExecution'], meta: { name: 'SwarmExecution' } }
    /**
     * Find zero or one SwarmExecution that matches the filter.
     * @param {SwarmExecutionFindUniqueArgs} args - Arguments to find a SwarmExecution
     * @example
     * // Get one SwarmExecution
     * const swarmExecution = await prisma.swarmExecution.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SwarmExecutionFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SwarmExecutionFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'SwarmExecution'> extends True ? Prisma__SwarmExecutionClient<$Types.GetResult<SwarmExecutionPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__SwarmExecutionClient<$Types.GetResult<SwarmExecutionPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one SwarmExecution that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SwarmExecutionFindUniqueOrThrowArgs} args - Arguments to find a SwarmExecution
     * @example
     * // Get one SwarmExecution
     * const swarmExecution = await prisma.swarmExecution.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SwarmExecutionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SwarmExecutionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SwarmExecutionClient<$Types.GetResult<SwarmExecutionPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first SwarmExecution that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwarmExecutionFindFirstArgs} args - Arguments to find a SwarmExecution
     * @example
     * // Get one SwarmExecution
     * const swarmExecution = await prisma.swarmExecution.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SwarmExecutionFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SwarmExecutionFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'SwarmExecution'> extends True ? Prisma__SwarmExecutionClient<$Types.GetResult<SwarmExecutionPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__SwarmExecutionClient<$Types.GetResult<SwarmExecutionPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first SwarmExecution that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwarmExecutionFindFirstOrThrowArgs} args - Arguments to find a SwarmExecution
     * @example
     * // Get one SwarmExecution
     * const swarmExecution = await prisma.swarmExecution.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SwarmExecutionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SwarmExecutionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SwarmExecutionClient<$Types.GetResult<SwarmExecutionPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more SwarmExecutions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwarmExecutionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SwarmExecutions
     * const swarmExecutions = await prisma.swarmExecution.findMany()
     * 
     * // Get first 10 SwarmExecutions
     * const swarmExecutions = await prisma.swarmExecution.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const swarmExecutionWithIdOnly = await prisma.swarmExecution.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SwarmExecutionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SwarmExecutionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<SwarmExecutionPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a SwarmExecution.
     * @param {SwarmExecutionCreateArgs} args - Arguments to create a SwarmExecution.
     * @example
     * // Create one SwarmExecution
     * const SwarmExecution = await prisma.swarmExecution.create({
     *   data: {
     *     // ... data to create a SwarmExecution
     *   }
     * })
     * 
    **/
    create<T extends SwarmExecutionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SwarmExecutionCreateArgs<ExtArgs>>
    ): Prisma__SwarmExecutionClient<$Types.GetResult<SwarmExecutionPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many SwarmExecutions.
     *     @param {SwarmExecutionCreateManyArgs} args - Arguments to create many SwarmExecutions.
     *     @example
     *     // Create many SwarmExecutions
     *     const swarmExecution = await prisma.swarmExecution.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SwarmExecutionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SwarmExecutionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SwarmExecution.
     * @param {SwarmExecutionDeleteArgs} args - Arguments to delete one SwarmExecution.
     * @example
     * // Delete one SwarmExecution
     * const SwarmExecution = await prisma.swarmExecution.delete({
     *   where: {
     *     // ... filter to delete one SwarmExecution
     *   }
     * })
     * 
    **/
    delete<T extends SwarmExecutionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SwarmExecutionDeleteArgs<ExtArgs>>
    ): Prisma__SwarmExecutionClient<$Types.GetResult<SwarmExecutionPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one SwarmExecution.
     * @param {SwarmExecutionUpdateArgs} args - Arguments to update one SwarmExecution.
     * @example
     * // Update one SwarmExecution
     * const swarmExecution = await prisma.swarmExecution.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SwarmExecutionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SwarmExecutionUpdateArgs<ExtArgs>>
    ): Prisma__SwarmExecutionClient<$Types.GetResult<SwarmExecutionPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more SwarmExecutions.
     * @param {SwarmExecutionDeleteManyArgs} args - Arguments to filter SwarmExecutions to delete.
     * @example
     * // Delete a few SwarmExecutions
     * const { count } = await prisma.swarmExecution.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SwarmExecutionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SwarmExecutionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SwarmExecutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwarmExecutionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SwarmExecutions
     * const swarmExecution = await prisma.swarmExecution.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SwarmExecutionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SwarmExecutionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SwarmExecution.
     * @param {SwarmExecutionUpsertArgs} args - Arguments to update or create a SwarmExecution.
     * @example
     * // Update or create a SwarmExecution
     * const swarmExecution = await prisma.swarmExecution.upsert({
     *   create: {
     *     // ... data to create a SwarmExecution
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SwarmExecution we want to update
     *   }
     * })
    **/
    upsert<T extends SwarmExecutionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SwarmExecutionUpsertArgs<ExtArgs>>
    ): Prisma__SwarmExecutionClient<$Types.GetResult<SwarmExecutionPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of SwarmExecutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwarmExecutionCountArgs} args - Arguments to filter SwarmExecutions to count.
     * @example
     * // Count the number of SwarmExecutions
     * const count = await prisma.swarmExecution.count({
     *   where: {
     *     // ... the filter for the SwarmExecutions we want to count
     *   }
     * })
    **/
    count<T extends SwarmExecutionCountArgs>(
      args?: Subset<T, SwarmExecutionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SwarmExecutionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SwarmExecution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwarmExecutionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SwarmExecutionAggregateArgs>(args: Subset<T, SwarmExecutionAggregateArgs>): Prisma.PrismaPromise<GetSwarmExecutionAggregateType<T>>

    /**
     * Group by SwarmExecution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwarmExecutionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SwarmExecutionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SwarmExecutionGroupByArgs['orderBy'] }
        : { orderBy?: SwarmExecutionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SwarmExecutionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSwarmExecutionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for SwarmExecution.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SwarmExecutionClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    agency<T extends AgencyArgs<ExtArgs> = {}>(args?: Subset<T, AgencyArgs<ExtArgs>>): Prisma__AgencyClient<$Types.GetResult<AgencyPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    executionSteps<T extends SwarmExecution$executionStepsArgs<ExtArgs> = {}>(args?: Subset<T, SwarmExecution$executionStepsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ExecutionStepPayload<ExtArgs>, T, 'findMany', never>| Null>;

    messages<T extends SwarmExecution$messagesArgs<ExtArgs> = {}>(args?: Subset<T, SwarmExecution$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<SwarmMessagePayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * SwarmExecution base type for findUnique actions
   */
  export type SwarmExecutionFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwarmExecution
     */
    select?: SwarmExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SwarmExecutionInclude<ExtArgs> | null
    /**
     * Filter, which SwarmExecution to fetch.
     */
    where: SwarmExecutionWhereUniqueInput
  }

  /**
   * SwarmExecution findUnique
   */
  export interface SwarmExecutionFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends SwarmExecutionFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SwarmExecution findUniqueOrThrow
   */
  export type SwarmExecutionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwarmExecution
     */
    select?: SwarmExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SwarmExecutionInclude<ExtArgs> | null
    /**
     * Filter, which SwarmExecution to fetch.
     */
    where: SwarmExecutionWhereUniqueInput
  }


  /**
   * SwarmExecution base type for findFirst actions
   */
  export type SwarmExecutionFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwarmExecution
     */
    select?: SwarmExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SwarmExecutionInclude<ExtArgs> | null
    /**
     * Filter, which SwarmExecution to fetch.
     */
    where?: SwarmExecutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SwarmExecutions to fetch.
     */
    orderBy?: Enumerable<SwarmExecutionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SwarmExecutions.
     */
    cursor?: SwarmExecutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SwarmExecutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SwarmExecutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SwarmExecutions.
     */
    distinct?: Enumerable<SwarmExecutionScalarFieldEnum>
  }

  /**
   * SwarmExecution findFirst
   */
  export interface SwarmExecutionFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends SwarmExecutionFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SwarmExecution findFirstOrThrow
   */
  export type SwarmExecutionFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwarmExecution
     */
    select?: SwarmExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SwarmExecutionInclude<ExtArgs> | null
    /**
     * Filter, which SwarmExecution to fetch.
     */
    where?: SwarmExecutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SwarmExecutions to fetch.
     */
    orderBy?: Enumerable<SwarmExecutionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SwarmExecutions.
     */
    cursor?: SwarmExecutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SwarmExecutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SwarmExecutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SwarmExecutions.
     */
    distinct?: Enumerable<SwarmExecutionScalarFieldEnum>
  }


  /**
   * SwarmExecution findMany
   */
  export type SwarmExecutionFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwarmExecution
     */
    select?: SwarmExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SwarmExecutionInclude<ExtArgs> | null
    /**
     * Filter, which SwarmExecutions to fetch.
     */
    where?: SwarmExecutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SwarmExecutions to fetch.
     */
    orderBy?: Enumerable<SwarmExecutionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SwarmExecutions.
     */
    cursor?: SwarmExecutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SwarmExecutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SwarmExecutions.
     */
    skip?: number
    distinct?: Enumerable<SwarmExecutionScalarFieldEnum>
  }


  /**
   * SwarmExecution create
   */
  export type SwarmExecutionCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwarmExecution
     */
    select?: SwarmExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SwarmExecutionInclude<ExtArgs> | null
    /**
     * The data needed to create a SwarmExecution.
     */
    data: XOR<SwarmExecutionCreateInput, SwarmExecutionUncheckedCreateInput>
  }


  /**
   * SwarmExecution createMany
   */
  export type SwarmExecutionCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SwarmExecutions.
     */
    data: Enumerable<SwarmExecutionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * SwarmExecution update
   */
  export type SwarmExecutionUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwarmExecution
     */
    select?: SwarmExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SwarmExecutionInclude<ExtArgs> | null
    /**
     * The data needed to update a SwarmExecution.
     */
    data: XOR<SwarmExecutionUpdateInput, SwarmExecutionUncheckedUpdateInput>
    /**
     * Choose, which SwarmExecution to update.
     */
    where: SwarmExecutionWhereUniqueInput
  }


  /**
   * SwarmExecution updateMany
   */
  export type SwarmExecutionUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SwarmExecutions.
     */
    data: XOR<SwarmExecutionUpdateManyMutationInput, SwarmExecutionUncheckedUpdateManyInput>
    /**
     * Filter which SwarmExecutions to update
     */
    where?: SwarmExecutionWhereInput
  }


  /**
   * SwarmExecution upsert
   */
  export type SwarmExecutionUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwarmExecution
     */
    select?: SwarmExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SwarmExecutionInclude<ExtArgs> | null
    /**
     * The filter to search for the SwarmExecution to update in case it exists.
     */
    where: SwarmExecutionWhereUniqueInput
    /**
     * In case the SwarmExecution found by the `where` argument doesn't exist, create a new SwarmExecution with this data.
     */
    create: XOR<SwarmExecutionCreateInput, SwarmExecutionUncheckedCreateInput>
    /**
     * In case the SwarmExecution was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SwarmExecutionUpdateInput, SwarmExecutionUncheckedUpdateInput>
  }


  /**
   * SwarmExecution delete
   */
  export type SwarmExecutionDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwarmExecution
     */
    select?: SwarmExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SwarmExecutionInclude<ExtArgs> | null
    /**
     * Filter which SwarmExecution to delete.
     */
    where: SwarmExecutionWhereUniqueInput
  }


  /**
   * SwarmExecution deleteMany
   */
  export type SwarmExecutionDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which SwarmExecutions to delete
     */
    where?: SwarmExecutionWhereInput
  }


  /**
   * SwarmExecution.executionSteps
   */
  export type SwarmExecution$executionStepsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExecutionStep
     */
    select?: ExecutionStepSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExecutionStepInclude<ExtArgs> | null
    where?: ExecutionStepWhereInput
    orderBy?: Enumerable<ExecutionStepOrderByWithRelationInput>
    cursor?: ExecutionStepWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ExecutionStepScalarFieldEnum>
  }


  /**
   * SwarmExecution.messages
   */
  export type SwarmExecution$messagesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwarmMessage
     */
    select?: SwarmMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SwarmMessageInclude<ExtArgs> | null
    where?: SwarmMessageWhereInput
    orderBy?: Enumerable<SwarmMessageOrderByWithRelationInput>
    cursor?: SwarmMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SwarmMessageScalarFieldEnum>
  }


  /**
   * SwarmExecution without action
   */
  export type SwarmExecutionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwarmExecution
     */
    select?: SwarmExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SwarmExecutionInclude<ExtArgs> | null
  }



  /**
   * Model ExecutionStep
   */


  export type AggregateExecutionStep = {
    _count: ExecutionStepCountAggregateOutputType | null
    _avg: ExecutionStepAvgAggregateOutputType | null
    _sum: ExecutionStepSumAggregateOutputType | null
    _min: ExecutionStepMinAggregateOutputType | null
    _max: ExecutionStepMaxAggregateOutputType | null
  }

  export type ExecutionStepAvgAggregateOutputType = {
    qualityScore: number | null
    confidence: number | null
  }

  export type ExecutionStepSumAggregateOutputType = {
    qualityScore: number | null
    confidence: number | null
  }

  export type ExecutionStepMinAggregateOutputType = {
    id: string | null
    swarmExecutionId: string | null
    stepId: string | null
    agentId: string | null
    action: string | null
    status: ExecutionStepStatus | null
    qualityScore: number | null
    confidence: number | null
    startedAt: Date | null
    completedAt: Date | null
  }

  export type ExecutionStepMaxAggregateOutputType = {
    id: string | null
    swarmExecutionId: string | null
    stepId: string | null
    agentId: string | null
    action: string | null
    status: ExecutionStepStatus | null
    qualityScore: number | null
    confidence: number | null
    startedAt: Date | null
    completedAt: Date | null
  }

  export type ExecutionStepCountAggregateOutputType = {
    id: number
    swarmExecutionId: number
    stepId: number
    agentId: number
    action: number
    input: number
    output: number
    status: number
    qualityScore: number
    confidence: number
    startedAt: number
    completedAt: number
    _all: number
  }


  export type ExecutionStepAvgAggregateInputType = {
    qualityScore?: true
    confidence?: true
  }

  export type ExecutionStepSumAggregateInputType = {
    qualityScore?: true
    confidence?: true
  }

  export type ExecutionStepMinAggregateInputType = {
    id?: true
    swarmExecutionId?: true
    stepId?: true
    agentId?: true
    action?: true
    status?: true
    qualityScore?: true
    confidence?: true
    startedAt?: true
    completedAt?: true
  }

  export type ExecutionStepMaxAggregateInputType = {
    id?: true
    swarmExecutionId?: true
    stepId?: true
    agentId?: true
    action?: true
    status?: true
    qualityScore?: true
    confidence?: true
    startedAt?: true
    completedAt?: true
  }

  export type ExecutionStepCountAggregateInputType = {
    id?: true
    swarmExecutionId?: true
    stepId?: true
    agentId?: true
    action?: true
    input?: true
    output?: true
    status?: true
    qualityScore?: true
    confidence?: true
    startedAt?: true
    completedAt?: true
    _all?: true
  }

  export type ExecutionStepAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExecutionStep to aggregate.
     */
    where?: ExecutionStepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExecutionSteps to fetch.
     */
    orderBy?: Enumerable<ExecutionStepOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExecutionStepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExecutionSteps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExecutionSteps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ExecutionSteps
    **/
    _count?: true | ExecutionStepCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExecutionStepAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExecutionStepSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExecutionStepMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExecutionStepMaxAggregateInputType
  }

  export type GetExecutionStepAggregateType<T extends ExecutionStepAggregateArgs> = {
        [P in keyof T & keyof AggregateExecutionStep]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExecutionStep[P]>
      : GetScalarType<T[P], AggregateExecutionStep[P]>
  }




  export type ExecutionStepGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ExecutionStepWhereInput
    orderBy?: Enumerable<ExecutionStepOrderByWithAggregationInput>
    by: ExecutionStepScalarFieldEnum[]
    having?: ExecutionStepScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExecutionStepCountAggregateInputType | true
    _avg?: ExecutionStepAvgAggregateInputType
    _sum?: ExecutionStepSumAggregateInputType
    _min?: ExecutionStepMinAggregateInputType
    _max?: ExecutionStepMaxAggregateInputType
  }


  export type ExecutionStepGroupByOutputType = {
    id: string
    swarmExecutionId: string
    stepId: string
    agentId: string
    action: string
    input: JsonValue | null
    output: JsonValue | null
    status: ExecutionStepStatus
    qualityScore: number | null
    confidence: number | null
    startedAt: Date
    completedAt: Date | null
    _count: ExecutionStepCountAggregateOutputType | null
    _avg: ExecutionStepAvgAggregateOutputType | null
    _sum: ExecutionStepSumAggregateOutputType | null
    _min: ExecutionStepMinAggregateOutputType | null
    _max: ExecutionStepMaxAggregateOutputType | null
  }

  type GetExecutionStepGroupByPayload<T extends ExecutionStepGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ExecutionStepGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExecutionStepGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExecutionStepGroupByOutputType[P]>
            : GetScalarType<T[P], ExecutionStepGroupByOutputType[P]>
        }
      >
    >


  export type ExecutionStepSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    swarmExecutionId?: boolean
    stepId?: boolean
    agentId?: boolean
    action?: boolean
    input?: boolean
    output?: boolean
    status?: boolean
    qualityScore?: boolean
    confidence?: boolean
    startedAt?: boolean
    completedAt?: boolean
    swarmExecution?: boolean | SwarmExecutionArgs<ExtArgs>
  }, ExtArgs["result"]["executionStep"]>

  export type ExecutionStepSelectScalar = {
    id?: boolean
    swarmExecutionId?: boolean
    stepId?: boolean
    agentId?: boolean
    action?: boolean
    input?: boolean
    output?: boolean
    status?: boolean
    qualityScore?: boolean
    confidence?: boolean
    startedAt?: boolean
    completedAt?: boolean
  }

  export type ExecutionStepInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    swarmExecution?: boolean | SwarmExecutionArgs<ExtArgs>
  }


  type ExecutionStepGetPayload<S extends boolean | null | undefined | ExecutionStepArgs> = $Types.GetResult<ExecutionStepPayload, S>

  type ExecutionStepCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ExecutionStepFindManyArgs, 'select' | 'include'> & {
      select?: ExecutionStepCountAggregateInputType | true
    }

  export interface ExecutionStepDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExecutionStep'], meta: { name: 'ExecutionStep' } }
    /**
     * Find zero or one ExecutionStep that matches the filter.
     * @param {ExecutionStepFindUniqueArgs} args - Arguments to find a ExecutionStep
     * @example
     * // Get one ExecutionStep
     * const executionStep = await prisma.executionStep.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ExecutionStepFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ExecutionStepFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ExecutionStep'> extends True ? Prisma__ExecutionStepClient<$Types.GetResult<ExecutionStepPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ExecutionStepClient<$Types.GetResult<ExecutionStepPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one ExecutionStep that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ExecutionStepFindUniqueOrThrowArgs} args - Arguments to find a ExecutionStep
     * @example
     * // Get one ExecutionStep
     * const executionStep = await prisma.executionStep.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ExecutionStepFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExecutionStepFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ExecutionStepClient<$Types.GetResult<ExecutionStepPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first ExecutionStep that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExecutionStepFindFirstArgs} args - Arguments to find a ExecutionStep
     * @example
     * // Get one ExecutionStep
     * const executionStep = await prisma.executionStep.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ExecutionStepFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ExecutionStepFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ExecutionStep'> extends True ? Prisma__ExecutionStepClient<$Types.GetResult<ExecutionStepPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ExecutionStepClient<$Types.GetResult<ExecutionStepPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first ExecutionStep that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExecutionStepFindFirstOrThrowArgs} args - Arguments to find a ExecutionStep
     * @example
     * // Get one ExecutionStep
     * const executionStep = await prisma.executionStep.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ExecutionStepFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExecutionStepFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ExecutionStepClient<$Types.GetResult<ExecutionStepPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more ExecutionSteps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExecutionStepFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ExecutionSteps
     * const executionSteps = await prisma.executionStep.findMany()
     * 
     * // Get first 10 ExecutionSteps
     * const executionSteps = await prisma.executionStep.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const executionStepWithIdOnly = await prisma.executionStep.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ExecutionStepFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExecutionStepFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ExecutionStepPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a ExecutionStep.
     * @param {ExecutionStepCreateArgs} args - Arguments to create a ExecutionStep.
     * @example
     * // Create one ExecutionStep
     * const ExecutionStep = await prisma.executionStep.create({
     *   data: {
     *     // ... data to create a ExecutionStep
     *   }
     * })
     * 
    **/
    create<T extends ExecutionStepCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ExecutionStepCreateArgs<ExtArgs>>
    ): Prisma__ExecutionStepClient<$Types.GetResult<ExecutionStepPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many ExecutionSteps.
     *     @param {ExecutionStepCreateManyArgs} args - Arguments to create many ExecutionSteps.
     *     @example
     *     // Create many ExecutionSteps
     *     const executionStep = await prisma.executionStep.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ExecutionStepCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExecutionStepCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ExecutionStep.
     * @param {ExecutionStepDeleteArgs} args - Arguments to delete one ExecutionStep.
     * @example
     * // Delete one ExecutionStep
     * const ExecutionStep = await prisma.executionStep.delete({
     *   where: {
     *     // ... filter to delete one ExecutionStep
     *   }
     * })
     * 
    **/
    delete<T extends ExecutionStepDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ExecutionStepDeleteArgs<ExtArgs>>
    ): Prisma__ExecutionStepClient<$Types.GetResult<ExecutionStepPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one ExecutionStep.
     * @param {ExecutionStepUpdateArgs} args - Arguments to update one ExecutionStep.
     * @example
     * // Update one ExecutionStep
     * const executionStep = await prisma.executionStep.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ExecutionStepUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ExecutionStepUpdateArgs<ExtArgs>>
    ): Prisma__ExecutionStepClient<$Types.GetResult<ExecutionStepPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more ExecutionSteps.
     * @param {ExecutionStepDeleteManyArgs} args - Arguments to filter ExecutionSteps to delete.
     * @example
     * // Delete a few ExecutionSteps
     * const { count } = await prisma.executionStep.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ExecutionStepDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExecutionStepDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExecutionSteps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExecutionStepUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ExecutionSteps
     * const executionStep = await prisma.executionStep.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ExecutionStepUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ExecutionStepUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ExecutionStep.
     * @param {ExecutionStepUpsertArgs} args - Arguments to update or create a ExecutionStep.
     * @example
     * // Update or create a ExecutionStep
     * const executionStep = await prisma.executionStep.upsert({
     *   create: {
     *     // ... data to create a ExecutionStep
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ExecutionStep we want to update
     *   }
     * })
    **/
    upsert<T extends ExecutionStepUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ExecutionStepUpsertArgs<ExtArgs>>
    ): Prisma__ExecutionStepClient<$Types.GetResult<ExecutionStepPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of ExecutionSteps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExecutionStepCountArgs} args - Arguments to filter ExecutionSteps to count.
     * @example
     * // Count the number of ExecutionSteps
     * const count = await prisma.executionStep.count({
     *   where: {
     *     // ... the filter for the ExecutionSteps we want to count
     *   }
     * })
    **/
    count<T extends ExecutionStepCountArgs>(
      args?: Subset<T, ExecutionStepCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExecutionStepCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ExecutionStep.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExecutionStepAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExecutionStepAggregateArgs>(args: Subset<T, ExecutionStepAggregateArgs>): Prisma.PrismaPromise<GetExecutionStepAggregateType<T>>

    /**
     * Group by ExecutionStep.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExecutionStepGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExecutionStepGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExecutionStepGroupByArgs['orderBy'] }
        : { orderBy?: ExecutionStepGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExecutionStepGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExecutionStepGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ExecutionStep.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ExecutionStepClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    swarmExecution<T extends SwarmExecutionArgs<ExtArgs> = {}>(args?: Subset<T, SwarmExecutionArgs<ExtArgs>>): Prisma__SwarmExecutionClient<$Types.GetResult<SwarmExecutionPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ExecutionStep base type for findUnique actions
   */
  export type ExecutionStepFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExecutionStep
     */
    select?: ExecutionStepSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExecutionStepInclude<ExtArgs> | null
    /**
     * Filter, which ExecutionStep to fetch.
     */
    where: ExecutionStepWhereUniqueInput
  }

  /**
   * ExecutionStep findUnique
   */
  export interface ExecutionStepFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ExecutionStepFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ExecutionStep findUniqueOrThrow
   */
  export type ExecutionStepFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExecutionStep
     */
    select?: ExecutionStepSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExecutionStepInclude<ExtArgs> | null
    /**
     * Filter, which ExecutionStep to fetch.
     */
    where: ExecutionStepWhereUniqueInput
  }


  /**
   * ExecutionStep base type for findFirst actions
   */
  export type ExecutionStepFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExecutionStep
     */
    select?: ExecutionStepSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExecutionStepInclude<ExtArgs> | null
    /**
     * Filter, which ExecutionStep to fetch.
     */
    where?: ExecutionStepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExecutionSteps to fetch.
     */
    orderBy?: Enumerable<ExecutionStepOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExecutionSteps.
     */
    cursor?: ExecutionStepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExecutionSteps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExecutionSteps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExecutionSteps.
     */
    distinct?: Enumerable<ExecutionStepScalarFieldEnum>
  }

  /**
   * ExecutionStep findFirst
   */
  export interface ExecutionStepFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ExecutionStepFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ExecutionStep findFirstOrThrow
   */
  export type ExecutionStepFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExecutionStep
     */
    select?: ExecutionStepSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExecutionStepInclude<ExtArgs> | null
    /**
     * Filter, which ExecutionStep to fetch.
     */
    where?: ExecutionStepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExecutionSteps to fetch.
     */
    orderBy?: Enumerable<ExecutionStepOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExecutionSteps.
     */
    cursor?: ExecutionStepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExecutionSteps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExecutionSteps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExecutionSteps.
     */
    distinct?: Enumerable<ExecutionStepScalarFieldEnum>
  }


  /**
   * ExecutionStep findMany
   */
  export type ExecutionStepFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExecutionStep
     */
    select?: ExecutionStepSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExecutionStepInclude<ExtArgs> | null
    /**
     * Filter, which ExecutionSteps to fetch.
     */
    where?: ExecutionStepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExecutionSteps to fetch.
     */
    orderBy?: Enumerable<ExecutionStepOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ExecutionSteps.
     */
    cursor?: ExecutionStepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExecutionSteps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExecutionSteps.
     */
    skip?: number
    distinct?: Enumerable<ExecutionStepScalarFieldEnum>
  }


  /**
   * ExecutionStep create
   */
  export type ExecutionStepCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExecutionStep
     */
    select?: ExecutionStepSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExecutionStepInclude<ExtArgs> | null
    /**
     * The data needed to create a ExecutionStep.
     */
    data: XOR<ExecutionStepCreateInput, ExecutionStepUncheckedCreateInput>
  }


  /**
   * ExecutionStep createMany
   */
  export type ExecutionStepCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ExecutionSteps.
     */
    data: Enumerable<ExecutionStepCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ExecutionStep update
   */
  export type ExecutionStepUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExecutionStep
     */
    select?: ExecutionStepSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExecutionStepInclude<ExtArgs> | null
    /**
     * The data needed to update a ExecutionStep.
     */
    data: XOR<ExecutionStepUpdateInput, ExecutionStepUncheckedUpdateInput>
    /**
     * Choose, which ExecutionStep to update.
     */
    where: ExecutionStepWhereUniqueInput
  }


  /**
   * ExecutionStep updateMany
   */
  export type ExecutionStepUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ExecutionSteps.
     */
    data: XOR<ExecutionStepUpdateManyMutationInput, ExecutionStepUncheckedUpdateManyInput>
    /**
     * Filter which ExecutionSteps to update
     */
    where?: ExecutionStepWhereInput
  }


  /**
   * ExecutionStep upsert
   */
  export type ExecutionStepUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExecutionStep
     */
    select?: ExecutionStepSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExecutionStepInclude<ExtArgs> | null
    /**
     * The filter to search for the ExecutionStep to update in case it exists.
     */
    where: ExecutionStepWhereUniqueInput
    /**
     * In case the ExecutionStep found by the `where` argument doesn't exist, create a new ExecutionStep with this data.
     */
    create: XOR<ExecutionStepCreateInput, ExecutionStepUncheckedCreateInput>
    /**
     * In case the ExecutionStep was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExecutionStepUpdateInput, ExecutionStepUncheckedUpdateInput>
  }


  /**
   * ExecutionStep delete
   */
  export type ExecutionStepDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExecutionStep
     */
    select?: ExecutionStepSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExecutionStepInclude<ExtArgs> | null
    /**
     * Filter which ExecutionStep to delete.
     */
    where: ExecutionStepWhereUniqueInput
  }


  /**
   * ExecutionStep deleteMany
   */
  export type ExecutionStepDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExecutionSteps to delete
     */
    where?: ExecutionStepWhereInput
  }


  /**
   * ExecutionStep without action
   */
  export type ExecutionStepArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExecutionStep
     */
    select?: ExecutionStepSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExecutionStepInclude<ExtArgs> | null
  }



  /**
   * Model SwarmMessage
   */


  export type AggregateSwarmMessage = {
    _count: SwarmMessageCountAggregateOutputType | null
    _min: SwarmMessageMinAggregateOutputType | null
    _max: SwarmMessageMaxAggregateOutputType | null
  }

  export type SwarmMessageMinAggregateOutputType = {
    id: string | null
    swarmExecutionId: string | null
    fromAgentId: string | null
    toAgentId: string | null
    type: MessageType | null
    priority: MessagePriority | null
    status: MessageStatus | null
    processedAt: Date | null
    createdAt: Date | null
  }

  export type SwarmMessageMaxAggregateOutputType = {
    id: string | null
    swarmExecutionId: string | null
    fromAgentId: string | null
    toAgentId: string | null
    type: MessageType | null
    priority: MessagePriority | null
    status: MessageStatus | null
    processedAt: Date | null
    createdAt: Date | null
  }

  export type SwarmMessageCountAggregateOutputType = {
    id: number
    swarmExecutionId: number
    fromAgentId: number
    toAgentId: number
    type: number
    priority: number
    content: number
    metadata: number
    status: number
    processedAt: number
    createdAt: number
    _all: number
  }


  export type SwarmMessageMinAggregateInputType = {
    id?: true
    swarmExecutionId?: true
    fromAgentId?: true
    toAgentId?: true
    type?: true
    priority?: true
    status?: true
    processedAt?: true
    createdAt?: true
  }

  export type SwarmMessageMaxAggregateInputType = {
    id?: true
    swarmExecutionId?: true
    fromAgentId?: true
    toAgentId?: true
    type?: true
    priority?: true
    status?: true
    processedAt?: true
    createdAt?: true
  }

  export type SwarmMessageCountAggregateInputType = {
    id?: true
    swarmExecutionId?: true
    fromAgentId?: true
    toAgentId?: true
    type?: true
    priority?: true
    content?: true
    metadata?: true
    status?: true
    processedAt?: true
    createdAt?: true
    _all?: true
  }

  export type SwarmMessageAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which SwarmMessage to aggregate.
     */
    where?: SwarmMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SwarmMessages to fetch.
     */
    orderBy?: Enumerable<SwarmMessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SwarmMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SwarmMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SwarmMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SwarmMessages
    **/
    _count?: true | SwarmMessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SwarmMessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SwarmMessageMaxAggregateInputType
  }

  export type GetSwarmMessageAggregateType<T extends SwarmMessageAggregateArgs> = {
        [P in keyof T & keyof AggregateSwarmMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSwarmMessage[P]>
      : GetScalarType<T[P], AggregateSwarmMessage[P]>
  }




  export type SwarmMessageGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SwarmMessageWhereInput
    orderBy?: Enumerable<SwarmMessageOrderByWithAggregationInput>
    by: SwarmMessageScalarFieldEnum[]
    having?: SwarmMessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SwarmMessageCountAggregateInputType | true
    _min?: SwarmMessageMinAggregateInputType
    _max?: SwarmMessageMaxAggregateInputType
  }


  export type SwarmMessageGroupByOutputType = {
    id: string
    swarmExecutionId: string
    fromAgentId: string
    toAgentId: string | null
    type: MessageType
    priority: MessagePriority
    content: JsonValue
    metadata: JsonValue | null
    status: MessageStatus
    processedAt: Date | null
    createdAt: Date
    _count: SwarmMessageCountAggregateOutputType | null
    _min: SwarmMessageMinAggregateOutputType | null
    _max: SwarmMessageMaxAggregateOutputType | null
  }

  type GetSwarmMessageGroupByPayload<T extends SwarmMessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SwarmMessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SwarmMessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SwarmMessageGroupByOutputType[P]>
            : GetScalarType<T[P], SwarmMessageGroupByOutputType[P]>
        }
      >
    >


  export type SwarmMessageSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    swarmExecutionId?: boolean
    fromAgentId?: boolean
    toAgentId?: boolean
    type?: boolean
    priority?: boolean
    content?: boolean
    metadata?: boolean
    status?: boolean
    processedAt?: boolean
    createdAt?: boolean
    swarmExecution?: boolean | SwarmExecutionArgs<ExtArgs>
  }, ExtArgs["result"]["swarmMessage"]>

  export type SwarmMessageSelectScalar = {
    id?: boolean
    swarmExecutionId?: boolean
    fromAgentId?: boolean
    toAgentId?: boolean
    type?: boolean
    priority?: boolean
    content?: boolean
    metadata?: boolean
    status?: boolean
    processedAt?: boolean
    createdAt?: boolean
  }

  export type SwarmMessageInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    swarmExecution?: boolean | SwarmExecutionArgs<ExtArgs>
  }


  type SwarmMessageGetPayload<S extends boolean | null | undefined | SwarmMessageArgs> = $Types.GetResult<SwarmMessagePayload, S>

  type SwarmMessageCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<SwarmMessageFindManyArgs, 'select' | 'include'> & {
      select?: SwarmMessageCountAggregateInputType | true
    }

  export interface SwarmMessageDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SwarmMessage'], meta: { name: 'SwarmMessage' } }
    /**
     * Find zero or one SwarmMessage that matches the filter.
     * @param {SwarmMessageFindUniqueArgs} args - Arguments to find a SwarmMessage
     * @example
     * // Get one SwarmMessage
     * const swarmMessage = await prisma.swarmMessage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SwarmMessageFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SwarmMessageFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'SwarmMessage'> extends True ? Prisma__SwarmMessageClient<$Types.GetResult<SwarmMessagePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__SwarmMessageClient<$Types.GetResult<SwarmMessagePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one SwarmMessage that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SwarmMessageFindUniqueOrThrowArgs} args - Arguments to find a SwarmMessage
     * @example
     * // Get one SwarmMessage
     * const swarmMessage = await prisma.swarmMessage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SwarmMessageFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SwarmMessageFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SwarmMessageClient<$Types.GetResult<SwarmMessagePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first SwarmMessage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwarmMessageFindFirstArgs} args - Arguments to find a SwarmMessage
     * @example
     * // Get one SwarmMessage
     * const swarmMessage = await prisma.swarmMessage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SwarmMessageFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SwarmMessageFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'SwarmMessage'> extends True ? Prisma__SwarmMessageClient<$Types.GetResult<SwarmMessagePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__SwarmMessageClient<$Types.GetResult<SwarmMessagePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first SwarmMessage that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwarmMessageFindFirstOrThrowArgs} args - Arguments to find a SwarmMessage
     * @example
     * // Get one SwarmMessage
     * const swarmMessage = await prisma.swarmMessage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SwarmMessageFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SwarmMessageFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SwarmMessageClient<$Types.GetResult<SwarmMessagePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more SwarmMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwarmMessageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SwarmMessages
     * const swarmMessages = await prisma.swarmMessage.findMany()
     * 
     * // Get first 10 SwarmMessages
     * const swarmMessages = await prisma.swarmMessage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const swarmMessageWithIdOnly = await prisma.swarmMessage.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SwarmMessageFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SwarmMessageFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<SwarmMessagePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a SwarmMessage.
     * @param {SwarmMessageCreateArgs} args - Arguments to create a SwarmMessage.
     * @example
     * // Create one SwarmMessage
     * const SwarmMessage = await prisma.swarmMessage.create({
     *   data: {
     *     // ... data to create a SwarmMessage
     *   }
     * })
     * 
    **/
    create<T extends SwarmMessageCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SwarmMessageCreateArgs<ExtArgs>>
    ): Prisma__SwarmMessageClient<$Types.GetResult<SwarmMessagePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many SwarmMessages.
     *     @param {SwarmMessageCreateManyArgs} args - Arguments to create many SwarmMessages.
     *     @example
     *     // Create many SwarmMessages
     *     const swarmMessage = await prisma.swarmMessage.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SwarmMessageCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SwarmMessageCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SwarmMessage.
     * @param {SwarmMessageDeleteArgs} args - Arguments to delete one SwarmMessage.
     * @example
     * // Delete one SwarmMessage
     * const SwarmMessage = await prisma.swarmMessage.delete({
     *   where: {
     *     // ... filter to delete one SwarmMessage
     *   }
     * })
     * 
    **/
    delete<T extends SwarmMessageDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SwarmMessageDeleteArgs<ExtArgs>>
    ): Prisma__SwarmMessageClient<$Types.GetResult<SwarmMessagePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one SwarmMessage.
     * @param {SwarmMessageUpdateArgs} args - Arguments to update one SwarmMessage.
     * @example
     * // Update one SwarmMessage
     * const swarmMessage = await prisma.swarmMessage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SwarmMessageUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SwarmMessageUpdateArgs<ExtArgs>>
    ): Prisma__SwarmMessageClient<$Types.GetResult<SwarmMessagePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more SwarmMessages.
     * @param {SwarmMessageDeleteManyArgs} args - Arguments to filter SwarmMessages to delete.
     * @example
     * // Delete a few SwarmMessages
     * const { count } = await prisma.swarmMessage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SwarmMessageDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SwarmMessageDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SwarmMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwarmMessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SwarmMessages
     * const swarmMessage = await prisma.swarmMessage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SwarmMessageUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SwarmMessageUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SwarmMessage.
     * @param {SwarmMessageUpsertArgs} args - Arguments to update or create a SwarmMessage.
     * @example
     * // Update or create a SwarmMessage
     * const swarmMessage = await prisma.swarmMessage.upsert({
     *   create: {
     *     // ... data to create a SwarmMessage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SwarmMessage we want to update
     *   }
     * })
    **/
    upsert<T extends SwarmMessageUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SwarmMessageUpsertArgs<ExtArgs>>
    ): Prisma__SwarmMessageClient<$Types.GetResult<SwarmMessagePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of SwarmMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwarmMessageCountArgs} args - Arguments to filter SwarmMessages to count.
     * @example
     * // Count the number of SwarmMessages
     * const count = await prisma.swarmMessage.count({
     *   where: {
     *     // ... the filter for the SwarmMessages we want to count
     *   }
     * })
    **/
    count<T extends SwarmMessageCountArgs>(
      args?: Subset<T, SwarmMessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SwarmMessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SwarmMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwarmMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SwarmMessageAggregateArgs>(args: Subset<T, SwarmMessageAggregateArgs>): Prisma.PrismaPromise<GetSwarmMessageAggregateType<T>>

    /**
     * Group by SwarmMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwarmMessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SwarmMessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SwarmMessageGroupByArgs['orderBy'] }
        : { orderBy?: SwarmMessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SwarmMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSwarmMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for SwarmMessage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SwarmMessageClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    swarmExecution<T extends SwarmExecutionArgs<ExtArgs> = {}>(args?: Subset<T, SwarmExecutionArgs<ExtArgs>>): Prisma__SwarmExecutionClient<$Types.GetResult<SwarmExecutionPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * SwarmMessage base type for findUnique actions
   */
  export type SwarmMessageFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwarmMessage
     */
    select?: SwarmMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SwarmMessageInclude<ExtArgs> | null
    /**
     * Filter, which SwarmMessage to fetch.
     */
    where: SwarmMessageWhereUniqueInput
  }

  /**
   * SwarmMessage findUnique
   */
  export interface SwarmMessageFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends SwarmMessageFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SwarmMessage findUniqueOrThrow
   */
  export type SwarmMessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwarmMessage
     */
    select?: SwarmMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SwarmMessageInclude<ExtArgs> | null
    /**
     * Filter, which SwarmMessage to fetch.
     */
    where: SwarmMessageWhereUniqueInput
  }


  /**
   * SwarmMessage base type for findFirst actions
   */
  export type SwarmMessageFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwarmMessage
     */
    select?: SwarmMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SwarmMessageInclude<ExtArgs> | null
    /**
     * Filter, which SwarmMessage to fetch.
     */
    where?: SwarmMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SwarmMessages to fetch.
     */
    orderBy?: Enumerable<SwarmMessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SwarmMessages.
     */
    cursor?: SwarmMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SwarmMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SwarmMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SwarmMessages.
     */
    distinct?: Enumerable<SwarmMessageScalarFieldEnum>
  }

  /**
   * SwarmMessage findFirst
   */
  export interface SwarmMessageFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends SwarmMessageFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SwarmMessage findFirstOrThrow
   */
  export type SwarmMessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwarmMessage
     */
    select?: SwarmMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SwarmMessageInclude<ExtArgs> | null
    /**
     * Filter, which SwarmMessage to fetch.
     */
    where?: SwarmMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SwarmMessages to fetch.
     */
    orderBy?: Enumerable<SwarmMessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SwarmMessages.
     */
    cursor?: SwarmMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SwarmMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SwarmMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SwarmMessages.
     */
    distinct?: Enumerable<SwarmMessageScalarFieldEnum>
  }


  /**
   * SwarmMessage findMany
   */
  export type SwarmMessageFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwarmMessage
     */
    select?: SwarmMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SwarmMessageInclude<ExtArgs> | null
    /**
     * Filter, which SwarmMessages to fetch.
     */
    where?: SwarmMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SwarmMessages to fetch.
     */
    orderBy?: Enumerable<SwarmMessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SwarmMessages.
     */
    cursor?: SwarmMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SwarmMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SwarmMessages.
     */
    skip?: number
    distinct?: Enumerable<SwarmMessageScalarFieldEnum>
  }


  /**
   * SwarmMessage create
   */
  export type SwarmMessageCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwarmMessage
     */
    select?: SwarmMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SwarmMessageInclude<ExtArgs> | null
    /**
     * The data needed to create a SwarmMessage.
     */
    data: XOR<SwarmMessageCreateInput, SwarmMessageUncheckedCreateInput>
  }


  /**
   * SwarmMessage createMany
   */
  export type SwarmMessageCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SwarmMessages.
     */
    data: Enumerable<SwarmMessageCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * SwarmMessage update
   */
  export type SwarmMessageUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwarmMessage
     */
    select?: SwarmMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SwarmMessageInclude<ExtArgs> | null
    /**
     * The data needed to update a SwarmMessage.
     */
    data: XOR<SwarmMessageUpdateInput, SwarmMessageUncheckedUpdateInput>
    /**
     * Choose, which SwarmMessage to update.
     */
    where: SwarmMessageWhereUniqueInput
  }


  /**
   * SwarmMessage updateMany
   */
  export type SwarmMessageUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SwarmMessages.
     */
    data: XOR<SwarmMessageUpdateManyMutationInput, SwarmMessageUncheckedUpdateManyInput>
    /**
     * Filter which SwarmMessages to update
     */
    where?: SwarmMessageWhereInput
  }


  /**
   * SwarmMessage upsert
   */
  export type SwarmMessageUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwarmMessage
     */
    select?: SwarmMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SwarmMessageInclude<ExtArgs> | null
    /**
     * The filter to search for the SwarmMessage to update in case it exists.
     */
    where: SwarmMessageWhereUniqueInput
    /**
     * In case the SwarmMessage found by the `where` argument doesn't exist, create a new SwarmMessage with this data.
     */
    create: XOR<SwarmMessageCreateInput, SwarmMessageUncheckedCreateInput>
    /**
     * In case the SwarmMessage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SwarmMessageUpdateInput, SwarmMessageUncheckedUpdateInput>
  }


  /**
   * SwarmMessage delete
   */
  export type SwarmMessageDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwarmMessage
     */
    select?: SwarmMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SwarmMessageInclude<ExtArgs> | null
    /**
     * Filter which SwarmMessage to delete.
     */
    where: SwarmMessageWhereUniqueInput
  }


  /**
   * SwarmMessage deleteMany
   */
  export type SwarmMessageDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which SwarmMessages to delete
     */
    where?: SwarmMessageWhereInput
  }


  /**
   * SwarmMessage without action
   */
  export type SwarmMessageArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SwarmMessage
     */
    select?: SwarmMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SwarmMessageInclude<ExtArgs> | null
  }



  /**
   * Model ServiceCategory
   */


  export type AggregateServiceCategory = {
    _count: ServiceCategoryCountAggregateOutputType | null
    _avg: ServiceCategoryAvgAggregateOutputType | null
    _sum: ServiceCategorySumAggregateOutputType | null
    _min: ServiceCategoryMinAggregateOutputType | null
    _max: ServiceCategoryMaxAggregateOutputType | null
  }

  export type ServiceCategoryAvgAggregateOutputType = {
    estimatedDuration: number | null
  }

  export type ServiceCategorySumAggregateOutputType = {
    estimatedDuration: number | null
  }

  export type ServiceCategoryMinAggregateOutputType = {
    id: string | null
    parentId: string | null
    name: string | null
    description: string | null
    slug: string | null
    isActive: boolean | null
    requiresApproval: boolean | null
    estimatedDuration: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ServiceCategoryMaxAggregateOutputType = {
    id: string | null
    parentId: string | null
    name: string | null
    description: string | null
    slug: string | null
    isActive: boolean | null
    requiresApproval: boolean | null
    estimatedDuration: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ServiceCategoryCountAggregateOutputType = {
    id: number
    parentId: number
    name: number
    description: number
    slug: number
    isActive: number
    requiresApproval: number
    estimatedDuration: number
    basePricing: number
    complexityFactors: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ServiceCategoryAvgAggregateInputType = {
    estimatedDuration?: true
  }

  export type ServiceCategorySumAggregateInputType = {
    estimatedDuration?: true
  }

  export type ServiceCategoryMinAggregateInputType = {
    id?: true
    parentId?: true
    name?: true
    description?: true
    slug?: true
    isActive?: true
    requiresApproval?: true
    estimatedDuration?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ServiceCategoryMaxAggregateInputType = {
    id?: true
    parentId?: true
    name?: true
    description?: true
    slug?: true
    isActive?: true
    requiresApproval?: true
    estimatedDuration?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ServiceCategoryCountAggregateInputType = {
    id?: true
    parentId?: true
    name?: true
    description?: true
    slug?: true
    isActive?: true
    requiresApproval?: true
    estimatedDuration?: true
    basePricing?: true
    complexityFactors?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ServiceCategoryAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceCategory to aggregate.
     */
    where?: ServiceCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceCategories to fetch.
     */
    orderBy?: Enumerable<ServiceCategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServiceCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ServiceCategories
    **/
    _count?: true | ServiceCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServiceCategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServiceCategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceCategoryMaxAggregateInputType
  }

  export type GetServiceCategoryAggregateType<T extends ServiceCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateServiceCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServiceCategory[P]>
      : GetScalarType<T[P], AggregateServiceCategory[P]>
  }




  export type ServiceCategoryGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ServiceCategoryWhereInput
    orderBy?: Enumerable<ServiceCategoryOrderByWithAggregationInput>
    by: ServiceCategoryScalarFieldEnum[]
    having?: ServiceCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceCategoryCountAggregateInputType | true
    _avg?: ServiceCategoryAvgAggregateInputType
    _sum?: ServiceCategorySumAggregateInputType
    _min?: ServiceCategoryMinAggregateInputType
    _max?: ServiceCategoryMaxAggregateInputType
  }


  export type ServiceCategoryGroupByOutputType = {
    id: string
    parentId: string | null
    name: string
    description: string | null
    slug: string
    isActive: boolean
    requiresApproval: boolean
    estimatedDuration: number | null
    basePricing: JsonValue | null
    complexityFactors: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: ServiceCategoryCountAggregateOutputType | null
    _avg: ServiceCategoryAvgAggregateOutputType | null
    _sum: ServiceCategorySumAggregateOutputType | null
    _min: ServiceCategoryMinAggregateOutputType | null
    _max: ServiceCategoryMaxAggregateOutputType | null
  }

  type GetServiceCategoryGroupByPayload<T extends ServiceCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ServiceCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceCategoryGroupByOutputType[P]>
        }
      >
    >


  export type ServiceCategorySelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    parentId?: boolean
    name?: boolean
    description?: boolean
    slug?: boolean
    isActive?: boolean
    requiresApproval?: boolean
    estimatedDuration?: boolean
    basePricing?: boolean
    complexityFactors?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parent?: boolean | ServiceCategoryArgs<ExtArgs>
    children?: boolean | ServiceCategory$childrenArgs<ExtArgs>
    serviceRequests?: boolean | ServiceCategory$serviceRequestsArgs<ExtArgs>
    providers?: boolean | ServiceCategory$providersArgs<ExtArgs>
    _count?: boolean | ServiceCategoryCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["serviceCategory"]>

  export type ServiceCategorySelectScalar = {
    id?: boolean
    parentId?: boolean
    name?: boolean
    description?: boolean
    slug?: boolean
    isActive?: boolean
    requiresApproval?: boolean
    estimatedDuration?: boolean
    basePricing?: boolean
    complexityFactors?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ServiceCategoryInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    parent?: boolean | ServiceCategoryArgs<ExtArgs>
    children?: boolean | ServiceCategory$childrenArgs<ExtArgs>
    serviceRequests?: boolean | ServiceCategory$serviceRequestsArgs<ExtArgs>
    providers?: boolean | ServiceCategory$providersArgs<ExtArgs>
    _count?: boolean | ServiceCategoryCountOutputTypeArgs<ExtArgs>
  }


  type ServiceCategoryGetPayload<S extends boolean | null | undefined | ServiceCategoryArgs> = $Types.GetResult<ServiceCategoryPayload, S>

  type ServiceCategoryCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ServiceCategoryFindManyArgs, 'select' | 'include'> & {
      select?: ServiceCategoryCountAggregateInputType | true
    }

  export interface ServiceCategoryDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ServiceCategory'], meta: { name: 'ServiceCategory' } }
    /**
     * Find zero or one ServiceCategory that matches the filter.
     * @param {ServiceCategoryFindUniqueArgs} args - Arguments to find a ServiceCategory
     * @example
     * // Get one ServiceCategory
     * const serviceCategory = await prisma.serviceCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ServiceCategoryFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ServiceCategoryFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ServiceCategory'> extends True ? Prisma__ServiceCategoryClient<$Types.GetResult<ServiceCategoryPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ServiceCategoryClient<$Types.GetResult<ServiceCategoryPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one ServiceCategory that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ServiceCategoryFindUniqueOrThrowArgs} args - Arguments to find a ServiceCategory
     * @example
     * // Get one ServiceCategory
     * const serviceCategory = await prisma.serviceCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ServiceCategoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceCategoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ServiceCategoryClient<$Types.GetResult<ServiceCategoryPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first ServiceCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCategoryFindFirstArgs} args - Arguments to find a ServiceCategory
     * @example
     * // Get one ServiceCategory
     * const serviceCategory = await prisma.serviceCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ServiceCategoryFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ServiceCategoryFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ServiceCategory'> extends True ? Prisma__ServiceCategoryClient<$Types.GetResult<ServiceCategoryPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ServiceCategoryClient<$Types.GetResult<ServiceCategoryPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first ServiceCategory that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCategoryFindFirstOrThrowArgs} args - Arguments to find a ServiceCategory
     * @example
     * // Get one ServiceCategory
     * const serviceCategory = await prisma.serviceCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ServiceCategoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceCategoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ServiceCategoryClient<$Types.GetResult<ServiceCategoryPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more ServiceCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ServiceCategories
     * const serviceCategories = await prisma.serviceCategory.findMany()
     * 
     * // Get first 10 ServiceCategories
     * const serviceCategories = await prisma.serviceCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const serviceCategoryWithIdOnly = await prisma.serviceCategory.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ServiceCategoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceCategoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ServiceCategoryPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a ServiceCategory.
     * @param {ServiceCategoryCreateArgs} args - Arguments to create a ServiceCategory.
     * @example
     * // Create one ServiceCategory
     * const ServiceCategory = await prisma.serviceCategory.create({
     *   data: {
     *     // ... data to create a ServiceCategory
     *   }
     * })
     * 
    **/
    create<T extends ServiceCategoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceCategoryCreateArgs<ExtArgs>>
    ): Prisma__ServiceCategoryClient<$Types.GetResult<ServiceCategoryPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many ServiceCategories.
     *     @param {ServiceCategoryCreateManyArgs} args - Arguments to create many ServiceCategories.
     *     @example
     *     // Create many ServiceCategories
     *     const serviceCategory = await prisma.serviceCategory.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ServiceCategoryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceCategoryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ServiceCategory.
     * @param {ServiceCategoryDeleteArgs} args - Arguments to delete one ServiceCategory.
     * @example
     * // Delete one ServiceCategory
     * const ServiceCategory = await prisma.serviceCategory.delete({
     *   where: {
     *     // ... filter to delete one ServiceCategory
     *   }
     * })
     * 
    **/
    delete<T extends ServiceCategoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceCategoryDeleteArgs<ExtArgs>>
    ): Prisma__ServiceCategoryClient<$Types.GetResult<ServiceCategoryPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one ServiceCategory.
     * @param {ServiceCategoryUpdateArgs} args - Arguments to update one ServiceCategory.
     * @example
     * // Update one ServiceCategory
     * const serviceCategory = await prisma.serviceCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ServiceCategoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceCategoryUpdateArgs<ExtArgs>>
    ): Prisma__ServiceCategoryClient<$Types.GetResult<ServiceCategoryPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more ServiceCategories.
     * @param {ServiceCategoryDeleteManyArgs} args - Arguments to filter ServiceCategories to delete.
     * @example
     * // Delete a few ServiceCategories
     * const { count } = await prisma.serviceCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ServiceCategoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceCategoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServiceCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ServiceCategories
     * const serviceCategory = await prisma.serviceCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ServiceCategoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceCategoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ServiceCategory.
     * @param {ServiceCategoryUpsertArgs} args - Arguments to update or create a ServiceCategory.
     * @example
     * // Update or create a ServiceCategory
     * const serviceCategory = await prisma.serviceCategory.upsert({
     *   create: {
     *     // ... data to create a ServiceCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ServiceCategory we want to update
     *   }
     * })
    **/
    upsert<T extends ServiceCategoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceCategoryUpsertArgs<ExtArgs>>
    ): Prisma__ServiceCategoryClient<$Types.GetResult<ServiceCategoryPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of ServiceCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCategoryCountArgs} args - Arguments to filter ServiceCategories to count.
     * @example
     * // Count the number of ServiceCategories
     * const count = await prisma.serviceCategory.count({
     *   where: {
     *     // ... the filter for the ServiceCategories we want to count
     *   }
     * })
    **/
    count<T extends ServiceCategoryCountArgs>(
      args?: Subset<T, ServiceCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ServiceCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceCategoryAggregateArgs>(args: Subset<T, ServiceCategoryAggregateArgs>): Prisma.PrismaPromise<GetServiceCategoryAggregateType<T>>

    /**
     * Group by ServiceCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServiceCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServiceCategoryGroupByArgs['orderBy'] }
        : { orderBy?: ServiceCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServiceCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ServiceCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ServiceCategoryClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    parent<T extends ServiceCategoryArgs<ExtArgs> = {}>(args?: Subset<T, ServiceCategoryArgs<ExtArgs>>): Prisma__ServiceCategoryClient<$Types.GetResult<ServiceCategoryPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    children<T extends ServiceCategory$childrenArgs<ExtArgs> = {}>(args?: Subset<T, ServiceCategory$childrenArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ServiceCategoryPayload<ExtArgs>, T, 'findMany', never>| Null>;

    serviceRequests<T extends ServiceCategory$serviceRequestsArgs<ExtArgs> = {}>(args?: Subset<T, ServiceCategory$serviceRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ServiceRequestPayload<ExtArgs>, T, 'findMany', never>| Null>;

    providers<T extends ServiceCategory$providersArgs<ExtArgs> = {}>(args?: Subset<T, ServiceCategory$providersArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ServiceProviderPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ServiceCategory base type for findUnique actions
   */
  export type ServiceCategoryFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ServiceCategory to fetch.
     */
    where: ServiceCategoryWhereUniqueInput
  }

  /**
   * ServiceCategory findUnique
   */
  export interface ServiceCategoryFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ServiceCategoryFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ServiceCategory findUniqueOrThrow
   */
  export type ServiceCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ServiceCategory to fetch.
     */
    where: ServiceCategoryWhereUniqueInput
  }


  /**
   * ServiceCategory base type for findFirst actions
   */
  export type ServiceCategoryFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ServiceCategory to fetch.
     */
    where?: ServiceCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceCategories to fetch.
     */
    orderBy?: Enumerable<ServiceCategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceCategories.
     */
    cursor?: ServiceCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceCategories.
     */
    distinct?: Enumerable<ServiceCategoryScalarFieldEnum>
  }

  /**
   * ServiceCategory findFirst
   */
  export interface ServiceCategoryFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ServiceCategoryFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ServiceCategory findFirstOrThrow
   */
  export type ServiceCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ServiceCategory to fetch.
     */
    where?: ServiceCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceCategories to fetch.
     */
    orderBy?: Enumerable<ServiceCategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceCategories.
     */
    cursor?: ServiceCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceCategories.
     */
    distinct?: Enumerable<ServiceCategoryScalarFieldEnum>
  }


  /**
   * ServiceCategory findMany
   */
  export type ServiceCategoryFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ServiceCategories to fetch.
     */
    where?: ServiceCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceCategories to fetch.
     */
    orderBy?: Enumerable<ServiceCategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ServiceCategories.
     */
    cursor?: ServiceCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceCategories.
     */
    skip?: number
    distinct?: Enumerable<ServiceCategoryScalarFieldEnum>
  }


  /**
   * ServiceCategory create
   */
  export type ServiceCategoryCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a ServiceCategory.
     */
    data: XOR<ServiceCategoryCreateInput, ServiceCategoryUncheckedCreateInput>
  }


  /**
   * ServiceCategory createMany
   */
  export type ServiceCategoryCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ServiceCategories.
     */
    data: Enumerable<ServiceCategoryCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ServiceCategory update
   */
  export type ServiceCategoryUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a ServiceCategory.
     */
    data: XOR<ServiceCategoryUpdateInput, ServiceCategoryUncheckedUpdateInput>
    /**
     * Choose, which ServiceCategory to update.
     */
    where: ServiceCategoryWhereUniqueInput
  }


  /**
   * ServiceCategory updateMany
   */
  export type ServiceCategoryUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ServiceCategories.
     */
    data: XOR<ServiceCategoryUpdateManyMutationInput, ServiceCategoryUncheckedUpdateManyInput>
    /**
     * Filter which ServiceCategories to update
     */
    where?: ServiceCategoryWhereInput
  }


  /**
   * ServiceCategory upsert
   */
  export type ServiceCategoryUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the ServiceCategory to update in case it exists.
     */
    where: ServiceCategoryWhereUniqueInput
    /**
     * In case the ServiceCategory found by the `where` argument doesn't exist, create a new ServiceCategory with this data.
     */
    create: XOR<ServiceCategoryCreateInput, ServiceCategoryUncheckedCreateInput>
    /**
     * In case the ServiceCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServiceCategoryUpdateInput, ServiceCategoryUncheckedUpdateInput>
  }


  /**
   * ServiceCategory delete
   */
  export type ServiceCategoryDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceCategoryInclude<ExtArgs> | null
    /**
     * Filter which ServiceCategory to delete.
     */
    where: ServiceCategoryWhereUniqueInput
  }


  /**
   * ServiceCategory deleteMany
   */
  export type ServiceCategoryDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceCategories to delete
     */
    where?: ServiceCategoryWhereInput
  }


  /**
   * ServiceCategory.children
   */
  export type ServiceCategory$childrenArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceCategoryInclude<ExtArgs> | null
    where?: ServiceCategoryWhereInput
    orderBy?: Enumerable<ServiceCategoryOrderByWithRelationInput>
    cursor?: ServiceCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ServiceCategoryScalarFieldEnum>
  }


  /**
   * ServiceCategory.serviceRequests
   */
  export type ServiceCategory$serviceRequestsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceRequest
     */
    select?: ServiceRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceRequestInclude<ExtArgs> | null
    where?: ServiceRequestWhereInput
    orderBy?: Enumerable<ServiceRequestOrderByWithRelationInput>
    cursor?: ServiceRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ServiceRequestScalarFieldEnum>
  }


  /**
   * ServiceCategory.providers
   */
  export type ServiceCategory$providersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceProvider
     */
    select?: ServiceProviderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceProviderInclude<ExtArgs> | null
    where?: ServiceProviderWhereInput
    orderBy?: Enumerable<ServiceProviderOrderByWithRelationInput>
    cursor?: ServiceProviderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ServiceProviderScalarFieldEnum>
  }


  /**
   * ServiceCategory without action
   */
  export type ServiceCategoryArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceCategoryInclude<ExtArgs> | null
  }



  /**
   * Model ServiceProvider
   */


  export type AggregateServiceProvider = {
    _count: ServiceProviderCountAggregateOutputType | null
    _avg: ServiceProviderAvgAggregateOutputType | null
    _sum: ServiceProviderSumAggregateOutputType | null
    _min: ServiceProviderMinAggregateOutputType | null
    _max: ServiceProviderMaxAggregateOutputType | null
  }

  export type ServiceProviderAvgAggregateOutputType = {
    qualityRating: number | null
    completionRate: number | null
    averageRating: number | null
    totalCompletions: number | null
    maxConcurrent: number | null
    currentLoad: number | null
  }

  export type ServiceProviderSumAggregateOutputType = {
    qualityRating: number | null
    completionRate: number | null
    averageRating: number | null
    totalCompletions: number | null
    maxConcurrent: number | null
    currentLoad: number | null
  }

  export type ServiceProviderMinAggregateOutputType = {
    id: string | null
    agencyId: string | null
    agentId: string | null
    categoryId: string | null
    qualityRating: number | null
    completionRate: number | null
    averageRating: number | null
    totalCompletions: number | null
    isActive: boolean | null
    maxConcurrent: number | null
    currentLoad: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ServiceProviderMaxAggregateOutputType = {
    id: string | null
    agencyId: string | null
    agentId: string | null
    categoryId: string | null
    qualityRating: number | null
    completionRate: number | null
    averageRating: number | null
    totalCompletions: number | null
    isActive: boolean | null
    maxConcurrent: number | null
    currentLoad: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ServiceProviderCountAggregateOutputType = {
    id: number
    agencyId: number
    agentId: number
    categoryId: number
    capabilities: number
    qualityRating: number
    completionRate: number
    averageRating: number
    totalCompletions: number
    isActive: number
    maxConcurrent: number
    currentLoad: number
    pricingOverride: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ServiceProviderAvgAggregateInputType = {
    qualityRating?: true
    completionRate?: true
    averageRating?: true
    totalCompletions?: true
    maxConcurrent?: true
    currentLoad?: true
  }

  export type ServiceProviderSumAggregateInputType = {
    qualityRating?: true
    completionRate?: true
    averageRating?: true
    totalCompletions?: true
    maxConcurrent?: true
    currentLoad?: true
  }

  export type ServiceProviderMinAggregateInputType = {
    id?: true
    agencyId?: true
    agentId?: true
    categoryId?: true
    qualityRating?: true
    completionRate?: true
    averageRating?: true
    totalCompletions?: true
    isActive?: true
    maxConcurrent?: true
    currentLoad?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ServiceProviderMaxAggregateInputType = {
    id?: true
    agencyId?: true
    agentId?: true
    categoryId?: true
    qualityRating?: true
    completionRate?: true
    averageRating?: true
    totalCompletions?: true
    isActive?: true
    maxConcurrent?: true
    currentLoad?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ServiceProviderCountAggregateInputType = {
    id?: true
    agencyId?: true
    agentId?: true
    categoryId?: true
    capabilities?: true
    qualityRating?: true
    completionRate?: true
    averageRating?: true
    totalCompletions?: true
    isActive?: true
    maxConcurrent?: true
    currentLoad?: true
    pricingOverride?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ServiceProviderAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceProvider to aggregate.
     */
    where?: ServiceProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceProviders to fetch.
     */
    orderBy?: Enumerable<ServiceProviderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServiceProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceProviders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceProviders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ServiceProviders
    **/
    _count?: true | ServiceProviderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServiceProviderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServiceProviderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceProviderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceProviderMaxAggregateInputType
  }

  export type GetServiceProviderAggregateType<T extends ServiceProviderAggregateArgs> = {
        [P in keyof T & keyof AggregateServiceProvider]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServiceProvider[P]>
      : GetScalarType<T[P], AggregateServiceProvider[P]>
  }




  export type ServiceProviderGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ServiceProviderWhereInput
    orderBy?: Enumerable<ServiceProviderOrderByWithAggregationInput>
    by: ServiceProviderScalarFieldEnum[]
    having?: ServiceProviderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceProviderCountAggregateInputType | true
    _avg?: ServiceProviderAvgAggregateInputType
    _sum?: ServiceProviderSumAggregateInputType
    _min?: ServiceProviderMinAggregateInputType
    _max?: ServiceProviderMaxAggregateInputType
  }


  export type ServiceProviderGroupByOutputType = {
    id: string
    agencyId: string
    agentId: string
    categoryId: string
    capabilities: JsonValue
    qualityRating: number
    completionRate: number
    averageRating: number
    totalCompletions: number
    isActive: boolean
    maxConcurrent: number
    currentLoad: number
    pricingOverride: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: ServiceProviderCountAggregateOutputType | null
    _avg: ServiceProviderAvgAggregateOutputType | null
    _sum: ServiceProviderSumAggregateOutputType | null
    _min: ServiceProviderMinAggregateOutputType | null
    _max: ServiceProviderMaxAggregateOutputType | null
  }

  type GetServiceProviderGroupByPayload<T extends ServiceProviderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ServiceProviderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceProviderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceProviderGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceProviderGroupByOutputType[P]>
        }
      >
    >


  export type ServiceProviderSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agencyId?: boolean
    agentId?: boolean
    categoryId?: boolean
    capabilities?: boolean
    qualityRating?: boolean
    completionRate?: boolean
    averageRating?: boolean
    totalCompletions?: boolean
    isActive?: boolean
    maxConcurrent?: boolean
    currentLoad?: boolean
    pricingOverride?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    agency?: boolean | AgencyArgs<ExtArgs>
    category?: boolean | ServiceCategoryArgs<ExtArgs>
    serviceRequests?: boolean | ServiceProvider$serviceRequestsArgs<ExtArgs>
    reviews?: boolean | ServiceProvider$reviewsArgs<ExtArgs>
    _count?: boolean | ServiceProviderCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["serviceProvider"]>

  export type ServiceProviderSelectScalar = {
    id?: boolean
    agencyId?: boolean
    agentId?: boolean
    categoryId?: boolean
    capabilities?: boolean
    qualityRating?: boolean
    completionRate?: boolean
    averageRating?: boolean
    totalCompletions?: boolean
    isActive?: boolean
    maxConcurrent?: boolean
    currentLoad?: boolean
    pricingOverride?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ServiceProviderInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    agency?: boolean | AgencyArgs<ExtArgs>
    category?: boolean | ServiceCategoryArgs<ExtArgs>
    serviceRequests?: boolean | ServiceProvider$serviceRequestsArgs<ExtArgs>
    reviews?: boolean | ServiceProvider$reviewsArgs<ExtArgs>
    _count?: boolean | ServiceProviderCountOutputTypeArgs<ExtArgs>
  }


  type ServiceProviderGetPayload<S extends boolean | null | undefined | ServiceProviderArgs> = $Types.GetResult<ServiceProviderPayload, S>

  type ServiceProviderCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ServiceProviderFindManyArgs, 'select' | 'include'> & {
      select?: ServiceProviderCountAggregateInputType | true
    }

  export interface ServiceProviderDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ServiceProvider'], meta: { name: 'ServiceProvider' } }
    /**
     * Find zero or one ServiceProvider that matches the filter.
     * @param {ServiceProviderFindUniqueArgs} args - Arguments to find a ServiceProvider
     * @example
     * // Get one ServiceProvider
     * const serviceProvider = await prisma.serviceProvider.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ServiceProviderFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ServiceProviderFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ServiceProvider'> extends True ? Prisma__ServiceProviderClient<$Types.GetResult<ServiceProviderPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ServiceProviderClient<$Types.GetResult<ServiceProviderPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one ServiceProvider that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ServiceProviderFindUniqueOrThrowArgs} args - Arguments to find a ServiceProvider
     * @example
     * // Get one ServiceProvider
     * const serviceProvider = await prisma.serviceProvider.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ServiceProviderFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceProviderFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ServiceProviderClient<$Types.GetResult<ServiceProviderPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first ServiceProvider that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceProviderFindFirstArgs} args - Arguments to find a ServiceProvider
     * @example
     * // Get one ServiceProvider
     * const serviceProvider = await prisma.serviceProvider.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ServiceProviderFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ServiceProviderFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ServiceProvider'> extends True ? Prisma__ServiceProviderClient<$Types.GetResult<ServiceProviderPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ServiceProviderClient<$Types.GetResult<ServiceProviderPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first ServiceProvider that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceProviderFindFirstOrThrowArgs} args - Arguments to find a ServiceProvider
     * @example
     * // Get one ServiceProvider
     * const serviceProvider = await prisma.serviceProvider.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ServiceProviderFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceProviderFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ServiceProviderClient<$Types.GetResult<ServiceProviderPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more ServiceProviders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceProviderFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ServiceProviders
     * const serviceProviders = await prisma.serviceProvider.findMany()
     * 
     * // Get first 10 ServiceProviders
     * const serviceProviders = await prisma.serviceProvider.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const serviceProviderWithIdOnly = await prisma.serviceProvider.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ServiceProviderFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceProviderFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ServiceProviderPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a ServiceProvider.
     * @param {ServiceProviderCreateArgs} args - Arguments to create a ServiceProvider.
     * @example
     * // Create one ServiceProvider
     * const ServiceProvider = await prisma.serviceProvider.create({
     *   data: {
     *     // ... data to create a ServiceProvider
     *   }
     * })
     * 
    **/
    create<T extends ServiceProviderCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceProviderCreateArgs<ExtArgs>>
    ): Prisma__ServiceProviderClient<$Types.GetResult<ServiceProviderPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many ServiceProviders.
     *     @param {ServiceProviderCreateManyArgs} args - Arguments to create many ServiceProviders.
     *     @example
     *     // Create many ServiceProviders
     *     const serviceProvider = await prisma.serviceProvider.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ServiceProviderCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceProviderCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ServiceProvider.
     * @param {ServiceProviderDeleteArgs} args - Arguments to delete one ServiceProvider.
     * @example
     * // Delete one ServiceProvider
     * const ServiceProvider = await prisma.serviceProvider.delete({
     *   where: {
     *     // ... filter to delete one ServiceProvider
     *   }
     * })
     * 
    **/
    delete<T extends ServiceProviderDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceProviderDeleteArgs<ExtArgs>>
    ): Prisma__ServiceProviderClient<$Types.GetResult<ServiceProviderPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one ServiceProvider.
     * @param {ServiceProviderUpdateArgs} args - Arguments to update one ServiceProvider.
     * @example
     * // Update one ServiceProvider
     * const serviceProvider = await prisma.serviceProvider.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ServiceProviderUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceProviderUpdateArgs<ExtArgs>>
    ): Prisma__ServiceProviderClient<$Types.GetResult<ServiceProviderPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more ServiceProviders.
     * @param {ServiceProviderDeleteManyArgs} args - Arguments to filter ServiceProviders to delete.
     * @example
     * // Delete a few ServiceProviders
     * const { count } = await prisma.serviceProvider.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ServiceProviderDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceProviderDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServiceProviders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceProviderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ServiceProviders
     * const serviceProvider = await prisma.serviceProvider.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ServiceProviderUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceProviderUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ServiceProvider.
     * @param {ServiceProviderUpsertArgs} args - Arguments to update or create a ServiceProvider.
     * @example
     * // Update or create a ServiceProvider
     * const serviceProvider = await prisma.serviceProvider.upsert({
     *   create: {
     *     // ... data to create a ServiceProvider
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ServiceProvider we want to update
     *   }
     * })
    **/
    upsert<T extends ServiceProviderUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceProviderUpsertArgs<ExtArgs>>
    ): Prisma__ServiceProviderClient<$Types.GetResult<ServiceProviderPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of ServiceProviders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceProviderCountArgs} args - Arguments to filter ServiceProviders to count.
     * @example
     * // Count the number of ServiceProviders
     * const count = await prisma.serviceProvider.count({
     *   where: {
     *     // ... the filter for the ServiceProviders we want to count
     *   }
     * })
    **/
    count<T extends ServiceProviderCountArgs>(
      args?: Subset<T, ServiceProviderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceProviderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ServiceProvider.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceProviderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceProviderAggregateArgs>(args: Subset<T, ServiceProviderAggregateArgs>): Prisma.PrismaPromise<GetServiceProviderAggregateType<T>>

    /**
     * Group by ServiceProvider.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceProviderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServiceProviderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServiceProviderGroupByArgs['orderBy'] }
        : { orderBy?: ServiceProviderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServiceProviderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceProviderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ServiceProvider.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ServiceProviderClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    agency<T extends AgencyArgs<ExtArgs> = {}>(args?: Subset<T, AgencyArgs<ExtArgs>>): Prisma__AgencyClient<$Types.GetResult<AgencyPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    category<T extends ServiceCategoryArgs<ExtArgs> = {}>(args?: Subset<T, ServiceCategoryArgs<ExtArgs>>): Prisma__ServiceCategoryClient<$Types.GetResult<ServiceCategoryPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    serviceRequests<T extends ServiceProvider$serviceRequestsArgs<ExtArgs> = {}>(args?: Subset<T, ServiceProvider$serviceRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ServiceRequestPayload<ExtArgs>, T, 'findMany', never>| Null>;

    reviews<T extends ServiceProvider$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, ServiceProvider$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ProviderReviewPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ServiceProvider base type for findUnique actions
   */
  export type ServiceProviderFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceProvider
     */
    select?: ServiceProviderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceProviderInclude<ExtArgs> | null
    /**
     * Filter, which ServiceProvider to fetch.
     */
    where: ServiceProviderWhereUniqueInput
  }

  /**
   * ServiceProvider findUnique
   */
  export interface ServiceProviderFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ServiceProviderFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ServiceProvider findUniqueOrThrow
   */
  export type ServiceProviderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceProvider
     */
    select?: ServiceProviderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceProviderInclude<ExtArgs> | null
    /**
     * Filter, which ServiceProvider to fetch.
     */
    where: ServiceProviderWhereUniqueInput
  }


  /**
   * ServiceProvider base type for findFirst actions
   */
  export type ServiceProviderFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceProvider
     */
    select?: ServiceProviderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceProviderInclude<ExtArgs> | null
    /**
     * Filter, which ServiceProvider to fetch.
     */
    where?: ServiceProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceProviders to fetch.
     */
    orderBy?: Enumerable<ServiceProviderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceProviders.
     */
    cursor?: ServiceProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceProviders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceProviders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceProviders.
     */
    distinct?: Enumerable<ServiceProviderScalarFieldEnum>
  }

  /**
   * ServiceProvider findFirst
   */
  export interface ServiceProviderFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ServiceProviderFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ServiceProvider findFirstOrThrow
   */
  export type ServiceProviderFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceProvider
     */
    select?: ServiceProviderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceProviderInclude<ExtArgs> | null
    /**
     * Filter, which ServiceProvider to fetch.
     */
    where?: ServiceProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceProviders to fetch.
     */
    orderBy?: Enumerable<ServiceProviderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceProviders.
     */
    cursor?: ServiceProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceProviders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceProviders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceProviders.
     */
    distinct?: Enumerable<ServiceProviderScalarFieldEnum>
  }


  /**
   * ServiceProvider findMany
   */
  export type ServiceProviderFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceProvider
     */
    select?: ServiceProviderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceProviderInclude<ExtArgs> | null
    /**
     * Filter, which ServiceProviders to fetch.
     */
    where?: ServiceProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceProviders to fetch.
     */
    orderBy?: Enumerable<ServiceProviderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ServiceProviders.
     */
    cursor?: ServiceProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceProviders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceProviders.
     */
    skip?: number
    distinct?: Enumerable<ServiceProviderScalarFieldEnum>
  }


  /**
   * ServiceProvider create
   */
  export type ServiceProviderCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceProvider
     */
    select?: ServiceProviderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceProviderInclude<ExtArgs> | null
    /**
     * The data needed to create a ServiceProvider.
     */
    data: XOR<ServiceProviderCreateInput, ServiceProviderUncheckedCreateInput>
  }


  /**
   * ServiceProvider createMany
   */
  export type ServiceProviderCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ServiceProviders.
     */
    data: Enumerable<ServiceProviderCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ServiceProvider update
   */
  export type ServiceProviderUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceProvider
     */
    select?: ServiceProviderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceProviderInclude<ExtArgs> | null
    /**
     * The data needed to update a ServiceProvider.
     */
    data: XOR<ServiceProviderUpdateInput, ServiceProviderUncheckedUpdateInput>
    /**
     * Choose, which ServiceProvider to update.
     */
    where: ServiceProviderWhereUniqueInput
  }


  /**
   * ServiceProvider updateMany
   */
  export type ServiceProviderUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ServiceProviders.
     */
    data: XOR<ServiceProviderUpdateManyMutationInput, ServiceProviderUncheckedUpdateManyInput>
    /**
     * Filter which ServiceProviders to update
     */
    where?: ServiceProviderWhereInput
  }


  /**
   * ServiceProvider upsert
   */
  export type ServiceProviderUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceProvider
     */
    select?: ServiceProviderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceProviderInclude<ExtArgs> | null
    /**
     * The filter to search for the ServiceProvider to update in case it exists.
     */
    where: ServiceProviderWhereUniqueInput
    /**
     * In case the ServiceProvider found by the `where` argument doesn't exist, create a new ServiceProvider with this data.
     */
    create: XOR<ServiceProviderCreateInput, ServiceProviderUncheckedCreateInput>
    /**
     * In case the ServiceProvider was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServiceProviderUpdateInput, ServiceProviderUncheckedUpdateInput>
  }


  /**
   * ServiceProvider delete
   */
  export type ServiceProviderDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceProvider
     */
    select?: ServiceProviderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceProviderInclude<ExtArgs> | null
    /**
     * Filter which ServiceProvider to delete.
     */
    where: ServiceProviderWhereUniqueInput
  }


  /**
   * ServiceProvider deleteMany
   */
  export type ServiceProviderDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceProviders to delete
     */
    where?: ServiceProviderWhereInput
  }


  /**
   * ServiceProvider.serviceRequests
   */
  export type ServiceProvider$serviceRequestsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceRequest
     */
    select?: ServiceRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceRequestInclude<ExtArgs> | null
    where?: ServiceRequestWhereInput
    orderBy?: Enumerable<ServiceRequestOrderByWithRelationInput>
    cursor?: ServiceRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ServiceRequestScalarFieldEnum>
  }


  /**
   * ServiceProvider.reviews
   */
  export type ServiceProvider$reviewsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderReview
     */
    select?: ProviderReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProviderReviewInclude<ExtArgs> | null
    where?: ProviderReviewWhereInput
    orderBy?: Enumerable<ProviderReviewOrderByWithRelationInput>
    cursor?: ProviderReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProviderReviewScalarFieldEnum>
  }


  /**
   * ServiceProvider without action
   */
  export type ServiceProviderArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceProvider
     */
    select?: ServiceProviderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceProviderInclude<ExtArgs> | null
  }



  /**
   * Model ServiceRequest
   */


  export type AggregateServiceRequest = {
    _count: ServiceRequestCountAggregateOutputType | null
    _avg: ServiceRequestAvgAggregateOutputType | null
    _sum: ServiceRequestSumAggregateOutputType | null
    _min: ServiceRequestMinAggregateOutputType | null
    _max: ServiceRequestMaxAggregateOutputType | null
  }

  export type ServiceRequestAvgAggregateOutputType = {
    estimatedCost: Decimal | null
    actualCost: Decimal | null
    qualityScore: number | null
    clientSatisfaction: number | null
  }

  export type ServiceRequestSumAggregateOutputType = {
    estimatedCost: Decimal | null
    actualCost: Decimal | null
    qualityScore: number | null
    clientSatisfaction: number | null
  }

  export type ServiceRequestMinAggregateOutputType = {
    id: string | null
    agencyId: string | null
    userId: string | null
    categoryId: string | null
    providerId: string | null
    title: string | null
    description: string | null
    status: ServiceRequestStatus | null
    priority: RequestPriority | null
    estimatedCost: Decimal | null
    actualCost: Decimal | null
    qualityScore: number | null
    clientSatisfaction: number | null
    requestedAt: Date | null
    assignedAt: Date | null
    startedAt: Date | null
    completedAt: Date | null
    dueDate: Date | null
    notes: string | null
  }

  export type ServiceRequestMaxAggregateOutputType = {
    id: string | null
    agencyId: string | null
    userId: string | null
    categoryId: string | null
    providerId: string | null
    title: string | null
    description: string | null
    status: ServiceRequestStatus | null
    priority: RequestPriority | null
    estimatedCost: Decimal | null
    actualCost: Decimal | null
    qualityScore: number | null
    clientSatisfaction: number | null
    requestedAt: Date | null
    assignedAt: Date | null
    startedAt: Date | null
    completedAt: Date | null
    dueDate: Date | null
    notes: string | null
  }

  export type ServiceRequestCountAggregateOutputType = {
    id: number
    agencyId: number
    userId: number
    categoryId: number
    providerId: number
    title: number
    description: number
    requirements: number
    status: number
    priority: number
    estimatedCost: number
    actualCost: number
    qualityScore: number
    clientSatisfaction: number
    requestedAt: number
    assignedAt: number
    startedAt: number
    completedAt: number
    dueDate: number
    deliverables: number
    notes: number
    _all: number
  }


  export type ServiceRequestAvgAggregateInputType = {
    estimatedCost?: true
    actualCost?: true
    qualityScore?: true
    clientSatisfaction?: true
  }

  export type ServiceRequestSumAggregateInputType = {
    estimatedCost?: true
    actualCost?: true
    qualityScore?: true
    clientSatisfaction?: true
  }

  export type ServiceRequestMinAggregateInputType = {
    id?: true
    agencyId?: true
    userId?: true
    categoryId?: true
    providerId?: true
    title?: true
    description?: true
    status?: true
    priority?: true
    estimatedCost?: true
    actualCost?: true
    qualityScore?: true
    clientSatisfaction?: true
    requestedAt?: true
    assignedAt?: true
    startedAt?: true
    completedAt?: true
    dueDate?: true
    notes?: true
  }

  export type ServiceRequestMaxAggregateInputType = {
    id?: true
    agencyId?: true
    userId?: true
    categoryId?: true
    providerId?: true
    title?: true
    description?: true
    status?: true
    priority?: true
    estimatedCost?: true
    actualCost?: true
    qualityScore?: true
    clientSatisfaction?: true
    requestedAt?: true
    assignedAt?: true
    startedAt?: true
    completedAt?: true
    dueDate?: true
    notes?: true
  }

  export type ServiceRequestCountAggregateInputType = {
    id?: true
    agencyId?: true
    userId?: true
    categoryId?: true
    providerId?: true
    title?: true
    description?: true
    requirements?: true
    status?: true
    priority?: true
    estimatedCost?: true
    actualCost?: true
    qualityScore?: true
    clientSatisfaction?: true
    requestedAt?: true
    assignedAt?: true
    startedAt?: true
    completedAt?: true
    dueDate?: true
    deliverables?: true
    notes?: true
    _all?: true
  }

  export type ServiceRequestAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceRequest to aggregate.
     */
    where?: ServiceRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceRequests to fetch.
     */
    orderBy?: Enumerable<ServiceRequestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServiceRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ServiceRequests
    **/
    _count?: true | ServiceRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServiceRequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServiceRequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceRequestMaxAggregateInputType
  }

  export type GetServiceRequestAggregateType<T extends ServiceRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateServiceRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServiceRequest[P]>
      : GetScalarType<T[P], AggregateServiceRequest[P]>
  }




  export type ServiceRequestGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ServiceRequestWhereInput
    orderBy?: Enumerable<ServiceRequestOrderByWithAggregationInput>
    by: ServiceRequestScalarFieldEnum[]
    having?: ServiceRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceRequestCountAggregateInputType | true
    _avg?: ServiceRequestAvgAggregateInputType
    _sum?: ServiceRequestSumAggregateInputType
    _min?: ServiceRequestMinAggregateInputType
    _max?: ServiceRequestMaxAggregateInputType
  }


  export type ServiceRequestGroupByOutputType = {
    id: string
    agencyId: string
    userId: string
    categoryId: string
    providerId: string | null
    title: string
    description: string
    requirements: JsonValue | null
    status: ServiceRequestStatus
    priority: RequestPriority
    estimatedCost: Decimal | null
    actualCost: Decimal | null
    qualityScore: number | null
    clientSatisfaction: number | null
    requestedAt: Date
    assignedAt: Date | null
    startedAt: Date | null
    completedAt: Date | null
    dueDate: Date | null
    deliverables: JsonValue | null
    notes: string | null
    _count: ServiceRequestCountAggregateOutputType | null
    _avg: ServiceRequestAvgAggregateOutputType | null
    _sum: ServiceRequestSumAggregateOutputType | null
    _min: ServiceRequestMinAggregateOutputType | null
    _max: ServiceRequestMaxAggregateOutputType | null
  }

  type GetServiceRequestGroupByPayload<T extends ServiceRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ServiceRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceRequestGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceRequestGroupByOutputType[P]>
        }
      >
    >


  export type ServiceRequestSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agencyId?: boolean
    userId?: boolean
    categoryId?: boolean
    providerId?: boolean
    title?: boolean
    description?: boolean
    requirements?: boolean
    status?: boolean
    priority?: boolean
    estimatedCost?: boolean
    actualCost?: boolean
    qualityScore?: boolean
    clientSatisfaction?: boolean
    requestedAt?: boolean
    assignedAt?: boolean
    startedAt?: boolean
    completedAt?: boolean
    dueDate?: boolean
    deliverables?: boolean
    notes?: boolean
    agency?: boolean | AgencyArgs<ExtArgs>
    user?: boolean | UserArgs<ExtArgs>
    category?: boolean | ServiceCategoryArgs<ExtArgs>
    provider?: boolean | ServiceProviderArgs<ExtArgs>
    reviews?: boolean | ServiceRequest$reviewsArgs<ExtArgs>
    _count?: boolean | ServiceRequestCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["serviceRequest"]>

  export type ServiceRequestSelectScalar = {
    id?: boolean
    agencyId?: boolean
    userId?: boolean
    categoryId?: boolean
    providerId?: boolean
    title?: boolean
    description?: boolean
    requirements?: boolean
    status?: boolean
    priority?: boolean
    estimatedCost?: boolean
    actualCost?: boolean
    qualityScore?: boolean
    clientSatisfaction?: boolean
    requestedAt?: boolean
    assignedAt?: boolean
    startedAt?: boolean
    completedAt?: boolean
    dueDate?: boolean
    deliverables?: boolean
    notes?: boolean
  }

  export type ServiceRequestInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    agency?: boolean | AgencyArgs<ExtArgs>
    user?: boolean | UserArgs<ExtArgs>
    category?: boolean | ServiceCategoryArgs<ExtArgs>
    provider?: boolean | ServiceProviderArgs<ExtArgs>
    reviews?: boolean | ServiceRequest$reviewsArgs<ExtArgs>
    _count?: boolean | ServiceRequestCountOutputTypeArgs<ExtArgs>
  }


  type ServiceRequestGetPayload<S extends boolean | null | undefined | ServiceRequestArgs> = $Types.GetResult<ServiceRequestPayload, S>

  type ServiceRequestCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ServiceRequestFindManyArgs, 'select' | 'include'> & {
      select?: ServiceRequestCountAggregateInputType | true
    }

  export interface ServiceRequestDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ServiceRequest'], meta: { name: 'ServiceRequest' } }
    /**
     * Find zero or one ServiceRequest that matches the filter.
     * @param {ServiceRequestFindUniqueArgs} args - Arguments to find a ServiceRequest
     * @example
     * // Get one ServiceRequest
     * const serviceRequest = await prisma.serviceRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ServiceRequestFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ServiceRequestFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ServiceRequest'> extends True ? Prisma__ServiceRequestClient<$Types.GetResult<ServiceRequestPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ServiceRequestClient<$Types.GetResult<ServiceRequestPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one ServiceRequest that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ServiceRequestFindUniqueOrThrowArgs} args - Arguments to find a ServiceRequest
     * @example
     * // Get one ServiceRequest
     * const serviceRequest = await prisma.serviceRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ServiceRequestFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceRequestFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ServiceRequestClient<$Types.GetResult<ServiceRequestPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first ServiceRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceRequestFindFirstArgs} args - Arguments to find a ServiceRequest
     * @example
     * // Get one ServiceRequest
     * const serviceRequest = await prisma.serviceRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ServiceRequestFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ServiceRequestFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ServiceRequest'> extends True ? Prisma__ServiceRequestClient<$Types.GetResult<ServiceRequestPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ServiceRequestClient<$Types.GetResult<ServiceRequestPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first ServiceRequest that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceRequestFindFirstOrThrowArgs} args - Arguments to find a ServiceRequest
     * @example
     * // Get one ServiceRequest
     * const serviceRequest = await prisma.serviceRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ServiceRequestFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceRequestFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ServiceRequestClient<$Types.GetResult<ServiceRequestPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more ServiceRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceRequestFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ServiceRequests
     * const serviceRequests = await prisma.serviceRequest.findMany()
     * 
     * // Get first 10 ServiceRequests
     * const serviceRequests = await prisma.serviceRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const serviceRequestWithIdOnly = await prisma.serviceRequest.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ServiceRequestFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceRequestFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ServiceRequestPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a ServiceRequest.
     * @param {ServiceRequestCreateArgs} args - Arguments to create a ServiceRequest.
     * @example
     * // Create one ServiceRequest
     * const ServiceRequest = await prisma.serviceRequest.create({
     *   data: {
     *     // ... data to create a ServiceRequest
     *   }
     * })
     * 
    **/
    create<T extends ServiceRequestCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceRequestCreateArgs<ExtArgs>>
    ): Prisma__ServiceRequestClient<$Types.GetResult<ServiceRequestPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many ServiceRequests.
     *     @param {ServiceRequestCreateManyArgs} args - Arguments to create many ServiceRequests.
     *     @example
     *     // Create many ServiceRequests
     *     const serviceRequest = await prisma.serviceRequest.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ServiceRequestCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceRequestCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ServiceRequest.
     * @param {ServiceRequestDeleteArgs} args - Arguments to delete one ServiceRequest.
     * @example
     * // Delete one ServiceRequest
     * const ServiceRequest = await prisma.serviceRequest.delete({
     *   where: {
     *     // ... filter to delete one ServiceRequest
     *   }
     * })
     * 
    **/
    delete<T extends ServiceRequestDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceRequestDeleteArgs<ExtArgs>>
    ): Prisma__ServiceRequestClient<$Types.GetResult<ServiceRequestPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one ServiceRequest.
     * @param {ServiceRequestUpdateArgs} args - Arguments to update one ServiceRequest.
     * @example
     * // Update one ServiceRequest
     * const serviceRequest = await prisma.serviceRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ServiceRequestUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceRequestUpdateArgs<ExtArgs>>
    ): Prisma__ServiceRequestClient<$Types.GetResult<ServiceRequestPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more ServiceRequests.
     * @param {ServiceRequestDeleteManyArgs} args - Arguments to filter ServiceRequests to delete.
     * @example
     * // Delete a few ServiceRequests
     * const { count } = await prisma.serviceRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ServiceRequestDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceRequestDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServiceRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ServiceRequests
     * const serviceRequest = await prisma.serviceRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ServiceRequestUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceRequestUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ServiceRequest.
     * @param {ServiceRequestUpsertArgs} args - Arguments to update or create a ServiceRequest.
     * @example
     * // Update or create a ServiceRequest
     * const serviceRequest = await prisma.serviceRequest.upsert({
     *   create: {
     *     // ... data to create a ServiceRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ServiceRequest we want to update
     *   }
     * })
    **/
    upsert<T extends ServiceRequestUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceRequestUpsertArgs<ExtArgs>>
    ): Prisma__ServiceRequestClient<$Types.GetResult<ServiceRequestPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of ServiceRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceRequestCountArgs} args - Arguments to filter ServiceRequests to count.
     * @example
     * // Count the number of ServiceRequests
     * const count = await prisma.serviceRequest.count({
     *   where: {
     *     // ... the filter for the ServiceRequests we want to count
     *   }
     * })
    **/
    count<T extends ServiceRequestCountArgs>(
      args?: Subset<T, ServiceRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ServiceRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceRequestAggregateArgs>(args: Subset<T, ServiceRequestAggregateArgs>): Prisma.PrismaPromise<GetServiceRequestAggregateType<T>>

    /**
     * Group by ServiceRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServiceRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServiceRequestGroupByArgs['orderBy'] }
        : { orderBy?: ServiceRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServiceRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ServiceRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ServiceRequestClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    agency<T extends AgencyArgs<ExtArgs> = {}>(args?: Subset<T, AgencyArgs<ExtArgs>>): Prisma__AgencyClient<$Types.GetResult<AgencyPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    category<T extends ServiceCategoryArgs<ExtArgs> = {}>(args?: Subset<T, ServiceCategoryArgs<ExtArgs>>): Prisma__ServiceCategoryClient<$Types.GetResult<ServiceCategoryPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    provider<T extends ServiceProviderArgs<ExtArgs> = {}>(args?: Subset<T, ServiceProviderArgs<ExtArgs>>): Prisma__ServiceProviderClient<$Types.GetResult<ServiceProviderPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    reviews<T extends ServiceRequest$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, ServiceRequest$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ServiceReviewPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ServiceRequest base type for findUnique actions
   */
  export type ServiceRequestFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceRequest
     */
    select?: ServiceRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceRequestInclude<ExtArgs> | null
    /**
     * Filter, which ServiceRequest to fetch.
     */
    where: ServiceRequestWhereUniqueInput
  }

  /**
   * ServiceRequest findUnique
   */
  export interface ServiceRequestFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ServiceRequestFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ServiceRequest findUniqueOrThrow
   */
  export type ServiceRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceRequest
     */
    select?: ServiceRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceRequestInclude<ExtArgs> | null
    /**
     * Filter, which ServiceRequest to fetch.
     */
    where: ServiceRequestWhereUniqueInput
  }


  /**
   * ServiceRequest base type for findFirst actions
   */
  export type ServiceRequestFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceRequest
     */
    select?: ServiceRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceRequestInclude<ExtArgs> | null
    /**
     * Filter, which ServiceRequest to fetch.
     */
    where?: ServiceRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceRequests to fetch.
     */
    orderBy?: Enumerable<ServiceRequestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceRequests.
     */
    cursor?: ServiceRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceRequests.
     */
    distinct?: Enumerable<ServiceRequestScalarFieldEnum>
  }

  /**
   * ServiceRequest findFirst
   */
  export interface ServiceRequestFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ServiceRequestFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ServiceRequest findFirstOrThrow
   */
  export type ServiceRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceRequest
     */
    select?: ServiceRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceRequestInclude<ExtArgs> | null
    /**
     * Filter, which ServiceRequest to fetch.
     */
    where?: ServiceRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceRequests to fetch.
     */
    orderBy?: Enumerable<ServiceRequestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceRequests.
     */
    cursor?: ServiceRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceRequests.
     */
    distinct?: Enumerable<ServiceRequestScalarFieldEnum>
  }


  /**
   * ServiceRequest findMany
   */
  export type ServiceRequestFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceRequest
     */
    select?: ServiceRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceRequestInclude<ExtArgs> | null
    /**
     * Filter, which ServiceRequests to fetch.
     */
    where?: ServiceRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceRequests to fetch.
     */
    orderBy?: Enumerable<ServiceRequestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ServiceRequests.
     */
    cursor?: ServiceRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceRequests.
     */
    skip?: number
    distinct?: Enumerable<ServiceRequestScalarFieldEnum>
  }


  /**
   * ServiceRequest create
   */
  export type ServiceRequestCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceRequest
     */
    select?: ServiceRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a ServiceRequest.
     */
    data: XOR<ServiceRequestCreateInput, ServiceRequestUncheckedCreateInput>
  }


  /**
   * ServiceRequest createMany
   */
  export type ServiceRequestCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ServiceRequests.
     */
    data: Enumerable<ServiceRequestCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ServiceRequest update
   */
  export type ServiceRequestUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceRequest
     */
    select?: ServiceRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a ServiceRequest.
     */
    data: XOR<ServiceRequestUpdateInput, ServiceRequestUncheckedUpdateInput>
    /**
     * Choose, which ServiceRequest to update.
     */
    where: ServiceRequestWhereUniqueInput
  }


  /**
   * ServiceRequest updateMany
   */
  export type ServiceRequestUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ServiceRequests.
     */
    data: XOR<ServiceRequestUpdateManyMutationInput, ServiceRequestUncheckedUpdateManyInput>
    /**
     * Filter which ServiceRequests to update
     */
    where?: ServiceRequestWhereInput
  }


  /**
   * ServiceRequest upsert
   */
  export type ServiceRequestUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceRequest
     */
    select?: ServiceRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the ServiceRequest to update in case it exists.
     */
    where: ServiceRequestWhereUniqueInput
    /**
     * In case the ServiceRequest found by the `where` argument doesn't exist, create a new ServiceRequest with this data.
     */
    create: XOR<ServiceRequestCreateInput, ServiceRequestUncheckedCreateInput>
    /**
     * In case the ServiceRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServiceRequestUpdateInput, ServiceRequestUncheckedUpdateInput>
  }


  /**
   * ServiceRequest delete
   */
  export type ServiceRequestDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceRequest
     */
    select?: ServiceRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceRequestInclude<ExtArgs> | null
    /**
     * Filter which ServiceRequest to delete.
     */
    where: ServiceRequestWhereUniqueInput
  }


  /**
   * ServiceRequest deleteMany
   */
  export type ServiceRequestDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceRequests to delete
     */
    where?: ServiceRequestWhereInput
  }


  /**
   * ServiceRequest.reviews
   */
  export type ServiceRequest$reviewsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceReview
     */
    select?: ServiceReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceReviewInclude<ExtArgs> | null
    where?: ServiceReviewWhereInput
    orderBy?: Enumerable<ServiceReviewOrderByWithRelationInput>
    cursor?: ServiceReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ServiceReviewScalarFieldEnum>
  }


  /**
   * ServiceRequest without action
   */
  export type ServiceRequestArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceRequest
     */
    select?: ServiceRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceRequestInclude<ExtArgs> | null
  }



  /**
   * Model ProviderReview
   */


  export type AggregateProviderReview = {
    _count: ProviderReviewCountAggregateOutputType | null
    _avg: ProviderReviewAvgAggregateOutputType | null
    _sum: ProviderReviewSumAggregateOutputType | null
    _min: ProviderReviewMinAggregateOutputType | null
    _max: ProviderReviewMaxAggregateOutputType | null
  }

  export type ProviderReviewAvgAggregateOutputType = {
    rating: number | null
  }

  export type ProviderReviewSumAggregateOutputType = {
    rating: number | null
  }

  export type ProviderReviewMinAggregateOutputType = {
    id: string | null
    providerId: string | null
    reviewerId: string | null
    rating: number | null
    comment: string | null
    serviceType: string | null
    createdAt: Date | null
  }

  export type ProviderReviewMaxAggregateOutputType = {
    id: string | null
    providerId: string | null
    reviewerId: string | null
    rating: number | null
    comment: string | null
    serviceType: string | null
    createdAt: Date | null
  }

  export type ProviderReviewCountAggregateOutputType = {
    id: number
    providerId: number
    reviewerId: number
    rating: number
    comment: number
    criteria: number
    serviceType: number
    createdAt: number
    _all: number
  }


  export type ProviderReviewAvgAggregateInputType = {
    rating?: true
  }

  export type ProviderReviewSumAggregateInputType = {
    rating?: true
  }

  export type ProviderReviewMinAggregateInputType = {
    id?: true
    providerId?: true
    reviewerId?: true
    rating?: true
    comment?: true
    serviceType?: true
    createdAt?: true
  }

  export type ProviderReviewMaxAggregateInputType = {
    id?: true
    providerId?: true
    reviewerId?: true
    rating?: true
    comment?: true
    serviceType?: true
    createdAt?: true
  }

  export type ProviderReviewCountAggregateInputType = {
    id?: true
    providerId?: true
    reviewerId?: true
    rating?: true
    comment?: true
    criteria?: true
    serviceType?: true
    createdAt?: true
    _all?: true
  }

  export type ProviderReviewAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProviderReview to aggregate.
     */
    where?: ProviderReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProviderReviews to fetch.
     */
    orderBy?: Enumerable<ProviderReviewOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProviderReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProviderReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProviderReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProviderReviews
    **/
    _count?: true | ProviderReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProviderReviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProviderReviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProviderReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProviderReviewMaxAggregateInputType
  }

  export type GetProviderReviewAggregateType<T extends ProviderReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateProviderReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProviderReview[P]>
      : GetScalarType<T[P], AggregateProviderReview[P]>
  }




  export type ProviderReviewGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ProviderReviewWhereInput
    orderBy?: Enumerable<ProviderReviewOrderByWithAggregationInput>
    by: ProviderReviewScalarFieldEnum[]
    having?: ProviderReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProviderReviewCountAggregateInputType | true
    _avg?: ProviderReviewAvgAggregateInputType
    _sum?: ProviderReviewSumAggregateInputType
    _min?: ProviderReviewMinAggregateInputType
    _max?: ProviderReviewMaxAggregateInputType
  }


  export type ProviderReviewGroupByOutputType = {
    id: string
    providerId: string
    reviewerId: string
    rating: number
    comment: string | null
    criteria: JsonValue | null
    serviceType: string | null
    createdAt: Date
    _count: ProviderReviewCountAggregateOutputType | null
    _avg: ProviderReviewAvgAggregateOutputType | null
    _sum: ProviderReviewSumAggregateOutputType | null
    _min: ProviderReviewMinAggregateOutputType | null
    _max: ProviderReviewMaxAggregateOutputType | null
  }

  type GetProviderReviewGroupByPayload<T extends ProviderReviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ProviderReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProviderReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProviderReviewGroupByOutputType[P]>
            : GetScalarType<T[P], ProviderReviewGroupByOutputType[P]>
        }
      >
    >


  export type ProviderReviewSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    providerId?: boolean
    reviewerId?: boolean
    rating?: boolean
    comment?: boolean
    criteria?: boolean
    serviceType?: boolean
    createdAt?: boolean
    provider?: boolean | ServiceProviderArgs<ExtArgs>
    reviewer?: boolean | UserArgs<ExtArgs>
  }, ExtArgs["result"]["providerReview"]>

  export type ProviderReviewSelectScalar = {
    id?: boolean
    providerId?: boolean
    reviewerId?: boolean
    rating?: boolean
    comment?: boolean
    criteria?: boolean
    serviceType?: boolean
    createdAt?: boolean
  }

  export type ProviderReviewInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    provider?: boolean | ServiceProviderArgs<ExtArgs>
    reviewer?: boolean | UserArgs<ExtArgs>
  }


  type ProviderReviewGetPayload<S extends boolean | null | undefined | ProviderReviewArgs> = $Types.GetResult<ProviderReviewPayload, S>

  type ProviderReviewCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ProviderReviewFindManyArgs, 'select' | 'include'> & {
      select?: ProviderReviewCountAggregateInputType | true
    }

  export interface ProviderReviewDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProviderReview'], meta: { name: 'ProviderReview' } }
    /**
     * Find zero or one ProviderReview that matches the filter.
     * @param {ProviderReviewFindUniqueArgs} args - Arguments to find a ProviderReview
     * @example
     * // Get one ProviderReview
     * const providerReview = await prisma.providerReview.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProviderReviewFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProviderReviewFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ProviderReview'> extends True ? Prisma__ProviderReviewClient<$Types.GetResult<ProviderReviewPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ProviderReviewClient<$Types.GetResult<ProviderReviewPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one ProviderReview that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProviderReviewFindUniqueOrThrowArgs} args - Arguments to find a ProviderReview
     * @example
     * // Get one ProviderReview
     * const providerReview = await prisma.providerReview.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProviderReviewFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProviderReviewFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProviderReviewClient<$Types.GetResult<ProviderReviewPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first ProviderReview that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderReviewFindFirstArgs} args - Arguments to find a ProviderReview
     * @example
     * // Get one ProviderReview
     * const providerReview = await prisma.providerReview.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProviderReviewFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProviderReviewFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ProviderReview'> extends True ? Prisma__ProviderReviewClient<$Types.GetResult<ProviderReviewPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ProviderReviewClient<$Types.GetResult<ProviderReviewPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first ProviderReview that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderReviewFindFirstOrThrowArgs} args - Arguments to find a ProviderReview
     * @example
     * // Get one ProviderReview
     * const providerReview = await prisma.providerReview.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProviderReviewFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProviderReviewFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProviderReviewClient<$Types.GetResult<ProviderReviewPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more ProviderReviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderReviewFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProviderReviews
     * const providerReviews = await prisma.providerReview.findMany()
     * 
     * // Get first 10 ProviderReviews
     * const providerReviews = await prisma.providerReview.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const providerReviewWithIdOnly = await prisma.providerReview.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProviderReviewFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProviderReviewFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ProviderReviewPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a ProviderReview.
     * @param {ProviderReviewCreateArgs} args - Arguments to create a ProviderReview.
     * @example
     * // Create one ProviderReview
     * const ProviderReview = await prisma.providerReview.create({
     *   data: {
     *     // ... data to create a ProviderReview
     *   }
     * })
     * 
    **/
    create<T extends ProviderReviewCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProviderReviewCreateArgs<ExtArgs>>
    ): Prisma__ProviderReviewClient<$Types.GetResult<ProviderReviewPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many ProviderReviews.
     *     @param {ProviderReviewCreateManyArgs} args - Arguments to create many ProviderReviews.
     *     @example
     *     // Create many ProviderReviews
     *     const providerReview = await prisma.providerReview.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProviderReviewCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProviderReviewCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProviderReview.
     * @param {ProviderReviewDeleteArgs} args - Arguments to delete one ProviderReview.
     * @example
     * // Delete one ProviderReview
     * const ProviderReview = await prisma.providerReview.delete({
     *   where: {
     *     // ... filter to delete one ProviderReview
     *   }
     * })
     * 
    **/
    delete<T extends ProviderReviewDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProviderReviewDeleteArgs<ExtArgs>>
    ): Prisma__ProviderReviewClient<$Types.GetResult<ProviderReviewPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one ProviderReview.
     * @param {ProviderReviewUpdateArgs} args - Arguments to update one ProviderReview.
     * @example
     * // Update one ProviderReview
     * const providerReview = await prisma.providerReview.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProviderReviewUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProviderReviewUpdateArgs<ExtArgs>>
    ): Prisma__ProviderReviewClient<$Types.GetResult<ProviderReviewPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more ProviderReviews.
     * @param {ProviderReviewDeleteManyArgs} args - Arguments to filter ProviderReviews to delete.
     * @example
     * // Delete a few ProviderReviews
     * const { count } = await prisma.providerReview.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProviderReviewDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProviderReviewDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProviderReviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProviderReviews
     * const providerReview = await prisma.providerReview.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProviderReviewUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProviderReviewUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProviderReview.
     * @param {ProviderReviewUpsertArgs} args - Arguments to update or create a ProviderReview.
     * @example
     * // Update or create a ProviderReview
     * const providerReview = await prisma.providerReview.upsert({
     *   create: {
     *     // ... data to create a ProviderReview
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProviderReview we want to update
     *   }
     * })
    **/
    upsert<T extends ProviderReviewUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProviderReviewUpsertArgs<ExtArgs>>
    ): Prisma__ProviderReviewClient<$Types.GetResult<ProviderReviewPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of ProviderReviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderReviewCountArgs} args - Arguments to filter ProviderReviews to count.
     * @example
     * // Count the number of ProviderReviews
     * const count = await prisma.providerReview.count({
     *   where: {
     *     // ... the filter for the ProviderReviews we want to count
     *   }
     * })
    **/
    count<T extends ProviderReviewCountArgs>(
      args?: Subset<T, ProviderReviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProviderReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProviderReview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProviderReviewAggregateArgs>(args: Subset<T, ProviderReviewAggregateArgs>): Prisma.PrismaPromise<GetProviderReviewAggregateType<T>>

    /**
     * Group by ProviderReview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProviderReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProviderReviewGroupByArgs['orderBy'] }
        : { orderBy?: ProviderReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProviderReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProviderReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ProviderReview.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProviderReviewClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    provider<T extends ServiceProviderArgs<ExtArgs> = {}>(args?: Subset<T, ServiceProviderArgs<ExtArgs>>): Prisma__ServiceProviderClient<$Types.GetResult<ServiceProviderPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    reviewer<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ProviderReview base type for findUnique actions
   */
  export type ProviderReviewFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderReview
     */
    select?: ProviderReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProviderReviewInclude<ExtArgs> | null
    /**
     * Filter, which ProviderReview to fetch.
     */
    where: ProviderReviewWhereUniqueInput
  }

  /**
   * ProviderReview findUnique
   */
  export interface ProviderReviewFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ProviderReviewFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ProviderReview findUniqueOrThrow
   */
  export type ProviderReviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderReview
     */
    select?: ProviderReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProviderReviewInclude<ExtArgs> | null
    /**
     * Filter, which ProviderReview to fetch.
     */
    where: ProviderReviewWhereUniqueInput
  }


  /**
   * ProviderReview base type for findFirst actions
   */
  export type ProviderReviewFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderReview
     */
    select?: ProviderReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProviderReviewInclude<ExtArgs> | null
    /**
     * Filter, which ProviderReview to fetch.
     */
    where?: ProviderReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProviderReviews to fetch.
     */
    orderBy?: Enumerable<ProviderReviewOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProviderReviews.
     */
    cursor?: ProviderReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProviderReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProviderReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProviderReviews.
     */
    distinct?: Enumerable<ProviderReviewScalarFieldEnum>
  }

  /**
   * ProviderReview findFirst
   */
  export interface ProviderReviewFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ProviderReviewFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ProviderReview findFirstOrThrow
   */
  export type ProviderReviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderReview
     */
    select?: ProviderReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProviderReviewInclude<ExtArgs> | null
    /**
     * Filter, which ProviderReview to fetch.
     */
    where?: ProviderReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProviderReviews to fetch.
     */
    orderBy?: Enumerable<ProviderReviewOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProviderReviews.
     */
    cursor?: ProviderReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProviderReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProviderReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProviderReviews.
     */
    distinct?: Enumerable<ProviderReviewScalarFieldEnum>
  }


  /**
   * ProviderReview findMany
   */
  export type ProviderReviewFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderReview
     */
    select?: ProviderReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProviderReviewInclude<ExtArgs> | null
    /**
     * Filter, which ProviderReviews to fetch.
     */
    where?: ProviderReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProviderReviews to fetch.
     */
    orderBy?: Enumerable<ProviderReviewOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProviderReviews.
     */
    cursor?: ProviderReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProviderReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProviderReviews.
     */
    skip?: number
    distinct?: Enumerable<ProviderReviewScalarFieldEnum>
  }


  /**
   * ProviderReview create
   */
  export type ProviderReviewCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderReview
     */
    select?: ProviderReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProviderReviewInclude<ExtArgs> | null
    /**
     * The data needed to create a ProviderReview.
     */
    data: XOR<ProviderReviewCreateInput, ProviderReviewUncheckedCreateInput>
  }


  /**
   * ProviderReview createMany
   */
  export type ProviderReviewCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProviderReviews.
     */
    data: Enumerable<ProviderReviewCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ProviderReview update
   */
  export type ProviderReviewUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderReview
     */
    select?: ProviderReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProviderReviewInclude<ExtArgs> | null
    /**
     * The data needed to update a ProviderReview.
     */
    data: XOR<ProviderReviewUpdateInput, ProviderReviewUncheckedUpdateInput>
    /**
     * Choose, which ProviderReview to update.
     */
    where: ProviderReviewWhereUniqueInput
  }


  /**
   * ProviderReview updateMany
   */
  export type ProviderReviewUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProviderReviews.
     */
    data: XOR<ProviderReviewUpdateManyMutationInput, ProviderReviewUncheckedUpdateManyInput>
    /**
     * Filter which ProviderReviews to update
     */
    where?: ProviderReviewWhereInput
  }


  /**
   * ProviderReview upsert
   */
  export type ProviderReviewUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderReview
     */
    select?: ProviderReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProviderReviewInclude<ExtArgs> | null
    /**
     * The filter to search for the ProviderReview to update in case it exists.
     */
    where: ProviderReviewWhereUniqueInput
    /**
     * In case the ProviderReview found by the `where` argument doesn't exist, create a new ProviderReview with this data.
     */
    create: XOR<ProviderReviewCreateInput, ProviderReviewUncheckedCreateInput>
    /**
     * In case the ProviderReview was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProviderReviewUpdateInput, ProviderReviewUncheckedUpdateInput>
  }


  /**
   * ProviderReview delete
   */
  export type ProviderReviewDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderReview
     */
    select?: ProviderReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProviderReviewInclude<ExtArgs> | null
    /**
     * Filter which ProviderReview to delete.
     */
    where: ProviderReviewWhereUniqueInput
  }


  /**
   * ProviderReview deleteMany
   */
  export type ProviderReviewDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProviderReviews to delete
     */
    where?: ProviderReviewWhereInput
  }


  /**
   * ProviderReview without action
   */
  export type ProviderReviewArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderReview
     */
    select?: ProviderReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProviderReviewInclude<ExtArgs> | null
  }



  /**
   * Model ServiceReview
   */


  export type AggregateServiceReview = {
    _count: ServiceReviewCountAggregateOutputType | null
    _avg: ServiceReviewAvgAggregateOutputType | null
    _sum: ServiceReviewSumAggregateOutputType | null
    _min: ServiceReviewMinAggregateOutputType | null
    _max: ServiceReviewMaxAggregateOutputType | null
  }

  export type ServiceReviewAvgAggregateOutputType = {
    overallRating: number | null
    qualityRating: number | null
    speedRating: number | null
    communicationRating: number | null
  }

  export type ServiceReviewSumAggregateOutputType = {
    overallRating: number | null
    qualityRating: number | null
    speedRating: number | null
    communicationRating: number | null
  }

  export type ServiceReviewMinAggregateOutputType = {
    id: string | null
    serviceRequestId: string | null
    reviewerId: string | null
    overallRating: number | null
    qualityRating: number | null
    speedRating: number | null
    communicationRating: number | null
    comment: string | null
    recommendations: string | null
    createdAt: Date | null
  }

  export type ServiceReviewMaxAggregateOutputType = {
    id: string | null
    serviceRequestId: string | null
    reviewerId: string | null
    overallRating: number | null
    qualityRating: number | null
    speedRating: number | null
    communicationRating: number | null
    comment: string | null
    recommendations: string | null
    createdAt: Date | null
  }

  export type ServiceReviewCountAggregateOutputType = {
    id: number
    serviceRequestId: number
    reviewerId: number
    overallRating: number
    qualityRating: number
    speedRating: number
    communicationRating: number
    comment: number
    recommendations: number
    createdAt: number
    _all: number
  }


  export type ServiceReviewAvgAggregateInputType = {
    overallRating?: true
    qualityRating?: true
    speedRating?: true
    communicationRating?: true
  }

  export type ServiceReviewSumAggregateInputType = {
    overallRating?: true
    qualityRating?: true
    speedRating?: true
    communicationRating?: true
  }

  export type ServiceReviewMinAggregateInputType = {
    id?: true
    serviceRequestId?: true
    reviewerId?: true
    overallRating?: true
    qualityRating?: true
    speedRating?: true
    communicationRating?: true
    comment?: true
    recommendations?: true
    createdAt?: true
  }

  export type ServiceReviewMaxAggregateInputType = {
    id?: true
    serviceRequestId?: true
    reviewerId?: true
    overallRating?: true
    qualityRating?: true
    speedRating?: true
    communicationRating?: true
    comment?: true
    recommendations?: true
    createdAt?: true
  }

  export type ServiceReviewCountAggregateInputType = {
    id?: true
    serviceRequestId?: true
    reviewerId?: true
    overallRating?: true
    qualityRating?: true
    speedRating?: true
    communicationRating?: true
    comment?: true
    recommendations?: true
    createdAt?: true
    _all?: true
  }

  export type ServiceReviewAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceReview to aggregate.
     */
    where?: ServiceReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceReviews to fetch.
     */
    orderBy?: Enumerable<ServiceReviewOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServiceReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ServiceReviews
    **/
    _count?: true | ServiceReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServiceReviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServiceReviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceReviewMaxAggregateInputType
  }

  export type GetServiceReviewAggregateType<T extends ServiceReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateServiceReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServiceReview[P]>
      : GetScalarType<T[P], AggregateServiceReview[P]>
  }




  export type ServiceReviewGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ServiceReviewWhereInput
    orderBy?: Enumerable<ServiceReviewOrderByWithAggregationInput>
    by: ServiceReviewScalarFieldEnum[]
    having?: ServiceReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceReviewCountAggregateInputType | true
    _avg?: ServiceReviewAvgAggregateInputType
    _sum?: ServiceReviewSumAggregateInputType
    _min?: ServiceReviewMinAggregateInputType
    _max?: ServiceReviewMaxAggregateInputType
  }


  export type ServiceReviewGroupByOutputType = {
    id: string
    serviceRequestId: string
    reviewerId: string
    overallRating: number
    qualityRating: number | null
    speedRating: number | null
    communicationRating: number | null
    comment: string | null
    recommendations: string | null
    createdAt: Date
    _count: ServiceReviewCountAggregateOutputType | null
    _avg: ServiceReviewAvgAggregateOutputType | null
    _sum: ServiceReviewSumAggregateOutputType | null
    _min: ServiceReviewMinAggregateOutputType | null
    _max: ServiceReviewMaxAggregateOutputType | null
  }

  type GetServiceReviewGroupByPayload<T extends ServiceReviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ServiceReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceReviewGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceReviewGroupByOutputType[P]>
        }
      >
    >


  export type ServiceReviewSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serviceRequestId?: boolean
    reviewerId?: boolean
    overallRating?: boolean
    qualityRating?: boolean
    speedRating?: boolean
    communicationRating?: boolean
    comment?: boolean
    recommendations?: boolean
    createdAt?: boolean
    serviceRequest?: boolean | ServiceRequestArgs<ExtArgs>
    reviewer?: boolean | UserArgs<ExtArgs>
  }, ExtArgs["result"]["serviceReview"]>

  export type ServiceReviewSelectScalar = {
    id?: boolean
    serviceRequestId?: boolean
    reviewerId?: boolean
    overallRating?: boolean
    qualityRating?: boolean
    speedRating?: boolean
    communicationRating?: boolean
    comment?: boolean
    recommendations?: boolean
    createdAt?: boolean
  }

  export type ServiceReviewInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    serviceRequest?: boolean | ServiceRequestArgs<ExtArgs>
    reviewer?: boolean | UserArgs<ExtArgs>
  }


  type ServiceReviewGetPayload<S extends boolean | null | undefined | ServiceReviewArgs> = $Types.GetResult<ServiceReviewPayload, S>

  type ServiceReviewCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ServiceReviewFindManyArgs, 'select' | 'include'> & {
      select?: ServiceReviewCountAggregateInputType | true
    }

  export interface ServiceReviewDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ServiceReview'], meta: { name: 'ServiceReview' } }
    /**
     * Find zero or one ServiceReview that matches the filter.
     * @param {ServiceReviewFindUniqueArgs} args - Arguments to find a ServiceReview
     * @example
     * // Get one ServiceReview
     * const serviceReview = await prisma.serviceReview.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ServiceReviewFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ServiceReviewFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ServiceReview'> extends True ? Prisma__ServiceReviewClient<$Types.GetResult<ServiceReviewPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ServiceReviewClient<$Types.GetResult<ServiceReviewPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one ServiceReview that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ServiceReviewFindUniqueOrThrowArgs} args - Arguments to find a ServiceReview
     * @example
     * // Get one ServiceReview
     * const serviceReview = await prisma.serviceReview.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ServiceReviewFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceReviewFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ServiceReviewClient<$Types.GetResult<ServiceReviewPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first ServiceReview that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceReviewFindFirstArgs} args - Arguments to find a ServiceReview
     * @example
     * // Get one ServiceReview
     * const serviceReview = await prisma.serviceReview.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ServiceReviewFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ServiceReviewFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ServiceReview'> extends True ? Prisma__ServiceReviewClient<$Types.GetResult<ServiceReviewPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ServiceReviewClient<$Types.GetResult<ServiceReviewPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first ServiceReview that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceReviewFindFirstOrThrowArgs} args - Arguments to find a ServiceReview
     * @example
     * // Get one ServiceReview
     * const serviceReview = await prisma.serviceReview.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ServiceReviewFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceReviewFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ServiceReviewClient<$Types.GetResult<ServiceReviewPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more ServiceReviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceReviewFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ServiceReviews
     * const serviceReviews = await prisma.serviceReview.findMany()
     * 
     * // Get first 10 ServiceReviews
     * const serviceReviews = await prisma.serviceReview.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const serviceReviewWithIdOnly = await prisma.serviceReview.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ServiceReviewFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceReviewFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ServiceReviewPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a ServiceReview.
     * @param {ServiceReviewCreateArgs} args - Arguments to create a ServiceReview.
     * @example
     * // Create one ServiceReview
     * const ServiceReview = await prisma.serviceReview.create({
     *   data: {
     *     // ... data to create a ServiceReview
     *   }
     * })
     * 
    **/
    create<T extends ServiceReviewCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceReviewCreateArgs<ExtArgs>>
    ): Prisma__ServiceReviewClient<$Types.GetResult<ServiceReviewPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many ServiceReviews.
     *     @param {ServiceReviewCreateManyArgs} args - Arguments to create many ServiceReviews.
     *     @example
     *     // Create many ServiceReviews
     *     const serviceReview = await prisma.serviceReview.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ServiceReviewCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceReviewCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ServiceReview.
     * @param {ServiceReviewDeleteArgs} args - Arguments to delete one ServiceReview.
     * @example
     * // Delete one ServiceReview
     * const ServiceReview = await prisma.serviceReview.delete({
     *   where: {
     *     // ... filter to delete one ServiceReview
     *   }
     * })
     * 
    **/
    delete<T extends ServiceReviewDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceReviewDeleteArgs<ExtArgs>>
    ): Prisma__ServiceReviewClient<$Types.GetResult<ServiceReviewPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one ServiceReview.
     * @param {ServiceReviewUpdateArgs} args - Arguments to update one ServiceReview.
     * @example
     * // Update one ServiceReview
     * const serviceReview = await prisma.serviceReview.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ServiceReviewUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceReviewUpdateArgs<ExtArgs>>
    ): Prisma__ServiceReviewClient<$Types.GetResult<ServiceReviewPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more ServiceReviews.
     * @param {ServiceReviewDeleteManyArgs} args - Arguments to filter ServiceReviews to delete.
     * @example
     * // Delete a few ServiceReviews
     * const { count } = await prisma.serviceReview.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ServiceReviewDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceReviewDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServiceReviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ServiceReviews
     * const serviceReview = await prisma.serviceReview.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ServiceReviewUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceReviewUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ServiceReview.
     * @param {ServiceReviewUpsertArgs} args - Arguments to update or create a ServiceReview.
     * @example
     * // Update or create a ServiceReview
     * const serviceReview = await prisma.serviceReview.upsert({
     *   create: {
     *     // ... data to create a ServiceReview
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ServiceReview we want to update
     *   }
     * })
    **/
    upsert<T extends ServiceReviewUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceReviewUpsertArgs<ExtArgs>>
    ): Prisma__ServiceReviewClient<$Types.GetResult<ServiceReviewPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of ServiceReviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceReviewCountArgs} args - Arguments to filter ServiceReviews to count.
     * @example
     * // Count the number of ServiceReviews
     * const count = await prisma.serviceReview.count({
     *   where: {
     *     // ... the filter for the ServiceReviews we want to count
     *   }
     * })
    **/
    count<T extends ServiceReviewCountArgs>(
      args?: Subset<T, ServiceReviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ServiceReview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceReviewAggregateArgs>(args: Subset<T, ServiceReviewAggregateArgs>): Prisma.PrismaPromise<GetServiceReviewAggregateType<T>>

    /**
     * Group by ServiceReview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServiceReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServiceReviewGroupByArgs['orderBy'] }
        : { orderBy?: ServiceReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServiceReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ServiceReview.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ServiceReviewClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    serviceRequest<T extends ServiceRequestArgs<ExtArgs> = {}>(args?: Subset<T, ServiceRequestArgs<ExtArgs>>): Prisma__ServiceRequestClient<$Types.GetResult<ServiceRequestPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    reviewer<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ServiceReview base type for findUnique actions
   */
  export type ServiceReviewFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceReview
     */
    select?: ServiceReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceReviewInclude<ExtArgs> | null
    /**
     * Filter, which ServiceReview to fetch.
     */
    where: ServiceReviewWhereUniqueInput
  }

  /**
   * ServiceReview findUnique
   */
  export interface ServiceReviewFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ServiceReviewFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ServiceReview findUniqueOrThrow
   */
  export type ServiceReviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceReview
     */
    select?: ServiceReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceReviewInclude<ExtArgs> | null
    /**
     * Filter, which ServiceReview to fetch.
     */
    where: ServiceReviewWhereUniqueInput
  }


  /**
   * ServiceReview base type for findFirst actions
   */
  export type ServiceReviewFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceReview
     */
    select?: ServiceReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceReviewInclude<ExtArgs> | null
    /**
     * Filter, which ServiceReview to fetch.
     */
    where?: ServiceReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceReviews to fetch.
     */
    orderBy?: Enumerable<ServiceReviewOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceReviews.
     */
    cursor?: ServiceReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceReviews.
     */
    distinct?: Enumerable<ServiceReviewScalarFieldEnum>
  }

  /**
   * ServiceReview findFirst
   */
  export interface ServiceReviewFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ServiceReviewFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ServiceReview findFirstOrThrow
   */
  export type ServiceReviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceReview
     */
    select?: ServiceReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceReviewInclude<ExtArgs> | null
    /**
     * Filter, which ServiceReview to fetch.
     */
    where?: ServiceReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceReviews to fetch.
     */
    orderBy?: Enumerable<ServiceReviewOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceReviews.
     */
    cursor?: ServiceReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceReviews.
     */
    distinct?: Enumerable<ServiceReviewScalarFieldEnum>
  }


  /**
   * ServiceReview findMany
   */
  export type ServiceReviewFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceReview
     */
    select?: ServiceReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceReviewInclude<ExtArgs> | null
    /**
     * Filter, which ServiceReviews to fetch.
     */
    where?: ServiceReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceReviews to fetch.
     */
    orderBy?: Enumerable<ServiceReviewOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ServiceReviews.
     */
    cursor?: ServiceReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceReviews.
     */
    skip?: number
    distinct?: Enumerable<ServiceReviewScalarFieldEnum>
  }


  /**
   * ServiceReview create
   */
  export type ServiceReviewCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceReview
     */
    select?: ServiceReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceReviewInclude<ExtArgs> | null
    /**
     * The data needed to create a ServiceReview.
     */
    data: XOR<ServiceReviewCreateInput, ServiceReviewUncheckedCreateInput>
  }


  /**
   * ServiceReview createMany
   */
  export type ServiceReviewCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ServiceReviews.
     */
    data: Enumerable<ServiceReviewCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ServiceReview update
   */
  export type ServiceReviewUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceReview
     */
    select?: ServiceReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceReviewInclude<ExtArgs> | null
    /**
     * The data needed to update a ServiceReview.
     */
    data: XOR<ServiceReviewUpdateInput, ServiceReviewUncheckedUpdateInput>
    /**
     * Choose, which ServiceReview to update.
     */
    where: ServiceReviewWhereUniqueInput
  }


  /**
   * ServiceReview updateMany
   */
  export type ServiceReviewUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ServiceReviews.
     */
    data: XOR<ServiceReviewUpdateManyMutationInput, ServiceReviewUncheckedUpdateManyInput>
    /**
     * Filter which ServiceReviews to update
     */
    where?: ServiceReviewWhereInput
  }


  /**
   * ServiceReview upsert
   */
  export type ServiceReviewUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceReview
     */
    select?: ServiceReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceReviewInclude<ExtArgs> | null
    /**
     * The filter to search for the ServiceReview to update in case it exists.
     */
    where: ServiceReviewWhereUniqueInput
    /**
     * In case the ServiceReview found by the `where` argument doesn't exist, create a new ServiceReview with this data.
     */
    create: XOR<ServiceReviewCreateInput, ServiceReviewUncheckedCreateInput>
    /**
     * In case the ServiceReview was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServiceReviewUpdateInput, ServiceReviewUncheckedUpdateInput>
  }


  /**
   * ServiceReview delete
   */
  export type ServiceReviewDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceReview
     */
    select?: ServiceReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceReviewInclude<ExtArgs> | null
    /**
     * Filter which ServiceReview to delete.
     */
    where: ServiceReviewWhereUniqueInput
  }


  /**
   * ServiceReview deleteMany
   */
  export type ServiceReviewDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceReviews to delete
     */
    where?: ServiceReviewWhereInput
  }


  /**
   * ServiceReview without action
   */
  export type ServiceReviewArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceReview
     */
    select?: ServiceReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceReviewInclude<ExtArgs> | null
  }



  /**
   * Model AgencySubscription
   */


  export type AggregateAgencySubscription = {
    _count: AgencySubscriptionCountAggregateOutputType | null
    _avg: AgencySubscriptionAvgAggregateOutputType | null
    _sum: AgencySubscriptionSumAggregateOutputType | null
    _min: AgencySubscriptionMinAggregateOutputType | null
    _max: AgencySubscriptionMaxAggregateOutputType | null
  }

  export type AgencySubscriptionAvgAggregateOutputType = {
    pricePerMonth: Decimal | null
  }

  export type AgencySubscriptionSumAggregateOutputType = {
    pricePerMonth: Decimal | null
  }

  export type AgencySubscriptionMinAggregateOutputType = {
    id: string | null
    agencyId: string | null
    tier: AgencyTier | null
    status: SubscriptionStatus | null
    billingCycle: BillingCycle | null
    pricePerMonth: Decimal | null
    currency: string | null
    startedAt: Date | null
    endsAt: Date | null
    renewedAt: Date | null
    cancelledAt: Date | null
    stripeSubscriptionId: string | null
    paymentMethodId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AgencySubscriptionMaxAggregateOutputType = {
    id: string | null
    agencyId: string | null
    tier: AgencyTier | null
    status: SubscriptionStatus | null
    billingCycle: BillingCycle | null
    pricePerMonth: Decimal | null
    currency: string | null
    startedAt: Date | null
    endsAt: Date | null
    renewedAt: Date | null
    cancelledAt: Date | null
    stripeSubscriptionId: string | null
    paymentMethodId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AgencySubscriptionCountAggregateOutputType = {
    id: number
    agencyId: number
    tier: number
    status: number
    billingCycle: number
    pricePerMonth: number
    currency: number
    startedAt: number
    endsAt: number
    renewedAt: number
    cancelledAt: number
    stripeSubscriptionId: number
    paymentMethodId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AgencySubscriptionAvgAggregateInputType = {
    pricePerMonth?: true
  }

  export type AgencySubscriptionSumAggregateInputType = {
    pricePerMonth?: true
  }

  export type AgencySubscriptionMinAggregateInputType = {
    id?: true
    agencyId?: true
    tier?: true
    status?: true
    billingCycle?: true
    pricePerMonth?: true
    currency?: true
    startedAt?: true
    endsAt?: true
    renewedAt?: true
    cancelledAt?: true
    stripeSubscriptionId?: true
    paymentMethodId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AgencySubscriptionMaxAggregateInputType = {
    id?: true
    agencyId?: true
    tier?: true
    status?: true
    billingCycle?: true
    pricePerMonth?: true
    currency?: true
    startedAt?: true
    endsAt?: true
    renewedAt?: true
    cancelledAt?: true
    stripeSubscriptionId?: true
    paymentMethodId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AgencySubscriptionCountAggregateInputType = {
    id?: true
    agencyId?: true
    tier?: true
    status?: true
    billingCycle?: true
    pricePerMonth?: true
    currency?: true
    startedAt?: true
    endsAt?: true
    renewedAt?: true
    cancelledAt?: true
    stripeSubscriptionId?: true
    paymentMethodId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AgencySubscriptionAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which AgencySubscription to aggregate.
     */
    where?: AgencySubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgencySubscriptions to fetch.
     */
    orderBy?: Enumerable<AgencySubscriptionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AgencySubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgencySubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgencySubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AgencySubscriptions
    **/
    _count?: true | AgencySubscriptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AgencySubscriptionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AgencySubscriptionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AgencySubscriptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AgencySubscriptionMaxAggregateInputType
  }

  export type GetAgencySubscriptionAggregateType<T extends AgencySubscriptionAggregateArgs> = {
        [P in keyof T & keyof AggregateAgencySubscription]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAgencySubscription[P]>
      : GetScalarType<T[P], AggregateAgencySubscription[P]>
  }




  export type AgencySubscriptionGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AgencySubscriptionWhereInput
    orderBy?: Enumerable<AgencySubscriptionOrderByWithAggregationInput>
    by: AgencySubscriptionScalarFieldEnum[]
    having?: AgencySubscriptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AgencySubscriptionCountAggregateInputType | true
    _avg?: AgencySubscriptionAvgAggregateInputType
    _sum?: AgencySubscriptionSumAggregateInputType
    _min?: AgencySubscriptionMinAggregateInputType
    _max?: AgencySubscriptionMaxAggregateInputType
  }


  export type AgencySubscriptionGroupByOutputType = {
    id: string
    agencyId: string
    tier: AgencyTier
    status: SubscriptionStatus
    billingCycle: BillingCycle
    pricePerMonth: Decimal
    currency: string
    startedAt: Date
    endsAt: Date | null
    renewedAt: Date | null
    cancelledAt: Date | null
    stripeSubscriptionId: string | null
    paymentMethodId: string | null
    createdAt: Date
    updatedAt: Date
    _count: AgencySubscriptionCountAggregateOutputType | null
    _avg: AgencySubscriptionAvgAggregateOutputType | null
    _sum: AgencySubscriptionSumAggregateOutputType | null
    _min: AgencySubscriptionMinAggregateOutputType | null
    _max: AgencySubscriptionMaxAggregateOutputType | null
  }

  type GetAgencySubscriptionGroupByPayload<T extends AgencySubscriptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AgencySubscriptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AgencySubscriptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AgencySubscriptionGroupByOutputType[P]>
            : GetScalarType<T[P], AgencySubscriptionGroupByOutputType[P]>
        }
      >
    >


  export type AgencySubscriptionSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agencyId?: boolean
    tier?: boolean
    status?: boolean
    billingCycle?: boolean
    pricePerMonth?: boolean
    currency?: boolean
    startedAt?: boolean
    endsAt?: boolean
    renewedAt?: boolean
    cancelledAt?: boolean
    stripeSubscriptionId?: boolean
    paymentMethodId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    agency?: boolean | AgencyArgs<ExtArgs>
  }, ExtArgs["result"]["agencySubscription"]>

  export type AgencySubscriptionSelectScalar = {
    id?: boolean
    agencyId?: boolean
    tier?: boolean
    status?: boolean
    billingCycle?: boolean
    pricePerMonth?: boolean
    currency?: boolean
    startedAt?: boolean
    endsAt?: boolean
    renewedAt?: boolean
    cancelledAt?: boolean
    stripeSubscriptionId?: boolean
    paymentMethodId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AgencySubscriptionInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    agency?: boolean | AgencyArgs<ExtArgs>
  }


  type AgencySubscriptionGetPayload<S extends boolean | null | undefined | AgencySubscriptionArgs> = $Types.GetResult<AgencySubscriptionPayload, S>

  type AgencySubscriptionCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<AgencySubscriptionFindManyArgs, 'select' | 'include'> & {
      select?: AgencySubscriptionCountAggregateInputType | true
    }

  export interface AgencySubscriptionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AgencySubscription'], meta: { name: 'AgencySubscription' } }
    /**
     * Find zero or one AgencySubscription that matches the filter.
     * @param {AgencySubscriptionFindUniqueArgs} args - Arguments to find a AgencySubscription
     * @example
     * // Get one AgencySubscription
     * const agencySubscription = await prisma.agencySubscription.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AgencySubscriptionFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AgencySubscriptionFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'AgencySubscription'> extends True ? Prisma__AgencySubscriptionClient<$Types.GetResult<AgencySubscriptionPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__AgencySubscriptionClient<$Types.GetResult<AgencySubscriptionPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one AgencySubscription that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AgencySubscriptionFindUniqueOrThrowArgs} args - Arguments to find a AgencySubscription
     * @example
     * // Get one AgencySubscription
     * const agencySubscription = await prisma.agencySubscription.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AgencySubscriptionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AgencySubscriptionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AgencySubscriptionClient<$Types.GetResult<AgencySubscriptionPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first AgencySubscription that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgencySubscriptionFindFirstArgs} args - Arguments to find a AgencySubscription
     * @example
     * // Get one AgencySubscription
     * const agencySubscription = await prisma.agencySubscription.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AgencySubscriptionFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AgencySubscriptionFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'AgencySubscription'> extends True ? Prisma__AgencySubscriptionClient<$Types.GetResult<AgencySubscriptionPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__AgencySubscriptionClient<$Types.GetResult<AgencySubscriptionPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first AgencySubscription that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgencySubscriptionFindFirstOrThrowArgs} args - Arguments to find a AgencySubscription
     * @example
     * // Get one AgencySubscription
     * const agencySubscription = await prisma.agencySubscription.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AgencySubscriptionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AgencySubscriptionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AgencySubscriptionClient<$Types.GetResult<AgencySubscriptionPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more AgencySubscriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgencySubscriptionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AgencySubscriptions
     * const agencySubscriptions = await prisma.agencySubscription.findMany()
     * 
     * // Get first 10 AgencySubscriptions
     * const agencySubscriptions = await prisma.agencySubscription.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const agencySubscriptionWithIdOnly = await prisma.agencySubscription.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AgencySubscriptionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AgencySubscriptionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<AgencySubscriptionPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a AgencySubscription.
     * @param {AgencySubscriptionCreateArgs} args - Arguments to create a AgencySubscription.
     * @example
     * // Create one AgencySubscription
     * const AgencySubscription = await prisma.agencySubscription.create({
     *   data: {
     *     // ... data to create a AgencySubscription
     *   }
     * })
     * 
    **/
    create<T extends AgencySubscriptionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AgencySubscriptionCreateArgs<ExtArgs>>
    ): Prisma__AgencySubscriptionClient<$Types.GetResult<AgencySubscriptionPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many AgencySubscriptions.
     *     @param {AgencySubscriptionCreateManyArgs} args - Arguments to create many AgencySubscriptions.
     *     @example
     *     // Create many AgencySubscriptions
     *     const agencySubscription = await prisma.agencySubscription.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AgencySubscriptionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AgencySubscriptionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AgencySubscription.
     * @param {AgencySubscriptionDeleteArgs} args - Arguments to delete one AgencySubscription.
     * @example
     * // Delete one AgencySubscription
     * const AgencySubscription = await prisma.agencySubscription.delete({
     *   where: {
     *     // ... filter to delete one AgencySubscription
     *   }
     * })
     * 
    **/
    delete<T extends AgencySubscriptionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AgencySubscriptionDeleteArgs<ExtArgs>>
    ): Prisma__AgencySubscriptionClient<$Types.GetResult<AgencySubscriptionPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one AgencySubscription.
     * @param {AgencySubscriptionUpdateArgs} args - Arguments to update one AgencySubscription.
     * @example
     * // Update one AgencySubscription
     * const agencySubscription = await prisma.agencySubscription.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AgencySubscriptionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AgencySubscriptionUpdateArgs<ExtArgs>>
    ): Prisma__AgencySubscriptionClient<$Types.GetResult<AgencySubscriptionPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more AgencySubscriptions.
     * @param {AgencySubscriptionDeleteManyArgs} args - Arguments to filter AgencySubscriptions to delete.
     * @example
     * // Delete a few AgencySubscriptions
     * const { count } = await prisma.agencySubscription.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AgencySubscriptionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AgencySubscriptionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AgencySubscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgencySubscriptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AgencySubscriptions
     * const agencySubscription = await prisma.agencySubscription.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AgencySubscriptionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AgencySubscriptionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AgencySubscription.
     * @param {AgencySubscriptionUpsertArgs} args - Arguments to update or create a AgencySubscription.
     * @example
     * // Update or create a AgencySubscription
     * const agencySubscription = await prisma.agencySubscription.upsert({
     *   create: {
     *     // ... data to create a AgencySubscription
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AgencySubscription we want to update
     *   }
     * })
    **/
    upsert<T extends AgencySubscriptionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AgencySubscriptionUpsertArgs<ExtArgs>>
    ): Prisma__AgencySubscriptionClient<$Types.GetResult<AgencySubscriptionPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of AgencySubscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgencySubscriptionCountArgs} args - Arguments to filter AgencySubscriptions to count.
     * @example
     * // Count the number of AgencySubscriptions
     * const count = await prisma.agencySubscription.count({
     *   where: {
     *     // ... the filter for the AgencySubscriptions we want to count
     *   }
     * })
    **/
    count<T extends AgencySubscriptionCountArgs>(
      args?: Subset<T, AgencySubscriptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AgencySubscriptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AgencySubscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgencySubscriptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AgencySubscriptionAggregateArgs>(args: Subset<T, AgencySubscriptionAggregateArgs>): Prisma.PrismaPromise<GetAgencySubscriptionAggregateType<T>>

    /**
     * Group by AgencySubscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgencySubscriptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AgencySubscriptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AgencySubscriptionGroupByArgs['orderBy'] }
        : { orderBy?: AgencySubscriptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AgencySubscriptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAgencySubscriptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for AgencySubscription.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AgencySubscriptionClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    agency<T extends AgencyArgs<ExtArgs> = {}>(args?: Subset<T, AgencyArgs<ExtArgs>>): Prisma__AgencyClient<$Types.GetResult<AgencyPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * AgencySubscription base type for findUnique actions
   */
  export type AgencySubscriptionFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgencySubscription
     */
    select?: AgencySubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencySubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which AgencySubscription to fetch.
     */
    where: AgencySubscriptionWhereUniqueInput
  }

  /**
   * AgencySubscription findUnique
   */
  export interface AgencySubscriptionFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AgencySubscriptionFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * AgencySubscription findUniqueOrThrow
   */
  export type AgencySubscriptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgencySubscription
     */
    select?: AgencySubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencySubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which AgencySubscription to fetch.
     */
    where: AgencySubscriptionWhereUniqueInput
  }


  /**
   * AgencySubscription base type for findFirst actions
   */
  export type AgencySubscriptionFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgencySubscription
     */
    select?: AgencySubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencySubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which AgencySubscription to fetch.
     */
    where?: AgencySubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgencySubscriptions to fetch.
     */
    orderBy?: Enumerable<AgencySubscriptionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AgencySubscriptions.
     */
    cursor?: AgencySubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgencySubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgencySubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AgencySubscriptions.
     */
    distinct?: Enumerable<AgencySubscriptionScalarFieldEnum>
  }

  /**
   * AgencySubscription findFirst
   */
  export interface AgencySubscriptionFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AgencySubscriptionFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * AgencySubscription findFirstOrThrow
   */
  export type AgencySubscriptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgencySubscription
     */
    select?: AgencySubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencySubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which AgencySubscription to fetch.
     */
    where?: AgencySubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgencySubscriptions to fetch.
     */
    orderBy?: Enumerable<AgencySubscriptionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AgencySubscriptions.
     */
    cursor?: AgencySubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgencySubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgencySubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AgencySubscriptions.
     */
    distinct?: Enumerable<AgencySubscriptionScalarFieldEnum>
  }


  /**
   * AgencySubscription findMany
   */
  export type AgencySubscriptionFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgencySubscription
     */
    select?: AgencySubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencySubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which AgencySubscriptions to fetch.
     */
    where?: AgencySubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgencySubscriptions to fetch.
     */
    orderBy?: Enumerable<AgencySubscriptionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AgencySubscriptions.
     */
    cursor?: AgencySubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgencySubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgencySubscriptions.
     */
    skip?: number
    distinct?: Enumerable<AgencySubscriptionScalarFieldEnum>
  }


  /**
   * AgencySubscription create
   */
  export type AgencySubscriptionCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgencySubscription
     */
    select?: AgencySubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencySubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to create a AgencySubscription.
     */
    data: XOR<AgencySubscriptionCreateInput, AgencySubscriptionUncheckedCreateInput>
  }


  /**
   * AgencySubscription createMany
   */
  export type AgencySubscriptionCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AgencySubscriptions.
     */
    data: Enumerable<AgencySubscriptionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * AgencySubscription update
   */
  export type AgencySubscriptionUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgencySubscription
     */
    select?: AgencySubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencySubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to update a AgencySubscription.
     */
    data: XOR<AgencySubscriptionUpdateInput, AgencySubscriptionUncheckedUpdateInput>
    /**
     * Choose, which AgencySubscription to update.
     */
    where: AgencySubscriptionWhereUniqueInput
  }


  /**
   * AgencySubscription updateMany
   */
  export type AgencySubscriptionUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AgencySubscriptions.
     */
    data: XOR<AgencySubscriptionUpdateManyMutationInput, AgencySubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which AgencySubscriptions to update
     */
    where?: AgencySubscriptionWhereInput
  }


  /**
   * AgencySubscription upsert
   */
  export type AgencySubscriptionUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgencySubscription
     */
    select?: AgencySubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencySubscriptionInclude<ExtArgs> | null
    /**
     * The filter to search for the AgencySubscription to update in case it exists.
     */
    where: AgencySubscriptionWhereUniqueInput
    /**
     * In case the AgencySubscription found by the `where` argument doesn't exist, create a new AgencySubscription with this data.
     */
    create: XOR<AgencySubscriptionCreateInput, AgencySubscriptionUncheckedCreateInput>
    /**
     * In case the AgencySubscription was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AgencySubscriptionUpdateInput, AgencySubscriptionUncheckedUpdateInput>
  }


  /**
   * AgencySubscription delete
   */
  export type AgencySubscriptionDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgencySubscription
     */
    select?: AgencySubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencySubscriptionInclude<ExtArgs> | null
    /**
     * Filter which AgencySubscription to delete.
     */
    where: AgencySubscriptionWhereUniqueInput
  }


  /**
   * AgencySubscription deleteMany
   */
  export type AgencySubscriptionDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which AgencySubscriptions to delete
     */
    where?: AgencySubscriptionWhereInput
  }


  /**
   * AgencySubscription without action
   */
  export type AgencySubscriptionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgencySubscription
     */
    select?: AgencySubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencySubscriptionInclude<ExtArgs> | null
  }



  /**
   * Model AgencyAuditLog
   */


  export type AggregateAgencyAuditLog = {
    _count: AgencyAuditLogCountAggregateOutputType | null
    _min: AgencyAuditLogMinAggregateOutputType | null
    _max: AgencyAuditLogMaxAggregateOutputType | null
  }

  export type AgencyAuditLogMinAggregateOutputType = {
    id: string | null
    agencyId: string | null
    userId: string | null
    action: string | null
    entityType: string | null
    entityId: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type AgencyAuditLogMaxAggregateOutputType = {
    id: string | null
    agencyId: string | null
    userId: string | null
    action: string | null
    entityType: string | null
    entityId: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type AgencyAuditLogCountAggregateOutputType = {
    id: number
    agencyId: number
    userId: number
    action: number
    entityType: number
    entityId: number
    changes: number
    metadata: number
    ipAddress: number
    userAgent: number
    createdAt: number
    _all: number
  }


  export type AgencyAuditLogMinAggregateInputType = {
    id?: true
    agencyId?: true
    userId?: true
    action?: true
    entityType?: true
    entityId?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type AgencyAuditLogMaxAggregateInputType = {
    id?: true
    agencyId?: true
    userId?: true
    action?: true
    entityType?: true
    entityId?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type AgencyAuditLogCountAggregateInputType = {
    id?: true
    agencyId?: true
    userId?: true
    action?: true
    entityType?: true
    entityId?: true
    changes?: true
    metadata?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    _all?: true
  }

  export type AgencyAuditLogAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which AgencyAuditLog to aggregate.
     */
    where?: AgencyAuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgencyAuditLogs to fetch.
     */
    orderBy?: Enumerable<AgencyAuditLogOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AgencyAuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgencyAuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgencyAuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AgencyAuditLogs
    **/
    _count?: true | AgencyAuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AgencyAuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AgencyAuditLogMaxAggregateInputType
  }

  export type GetAgencyAuditLogAggregateType<T extends AgencyAuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAgencyAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAgencyAuditLog[P]>
      : GetScalarType<T[P], AggregateAgencyAuditLog[P]>
  }




  export type AgencyAuditLogGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AgencyAuditLogWhereInput
    orderBy?: Enumerable<AgencyAuditLogOrderByWithAggregationInput>
    by: AgencyAuditLogScalarFieldEnum[]
    having?: AgencyAuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AgencyAuditLogCountAggregateInputType | true
    _min?: AgencyAuditLogMinAggregateInputType
    _max?: AgencyAuditLogMaxAggregateInputType
  }


  export type AgencyAuditLogGroupByOutputType = {
    id: string
    agencyId: string
    userId: string | null
    action: string
    entityType: string
    entityId: string | null
    changes: JsonValue | null
    metadata: JsonValue | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date
    _count: AgencyAuditLogCountAggregateOutputType | null
    _min: AgencyAuditLogMinAggregateOutputType | null
    _max: AgencyAuditLogMaxAggregateOutputType | null
  }

  type GetAgencyAuditLogGroupByPayload<T extends AgencyAuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AgencyAuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AgencyAuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AgencyAuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AgencyAuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AgencyAuditLogSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agencyId?: boolean
    userId?: boolean
    action?: boolean
    entityType?: boolean
    entityId?: boolean
    changes?: boolean
    metadata?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    agency?: boolean | AgencyArgs<ExtArgs>
    user?: boolean | UserArgs<ExtArgs>
  }, ExtArgs["result"]["agencyAuditLog"]>

  export type AgencyAuditLogSelectScalar = {
    id?: boolean
    agencyId?: boolean
    userId?: boolean
    action?: boolean
    entityType?: boolean
    entityId?: boolean
    changes?: boolean
    metadata?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
  }

  export type AgencyAuditLogInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    agency?: boolean | AgencyArgs<ExtArgs>
    user?: boolean | UserArgs<ExtArgs>
  }


  type AgencyAuditLogGetPayload<S extends boolean | null | undefined | AgencyAuditLogArgs> = $Types.GetResult<AgencyAuditLogPayload, S>

  type AgencyAuditLogCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<AgencyAuditLogFindManyArgs, 'select' | 'include'> & {
      select?: AgencyAuditLogCountAggregateInputType | true
    }

  export interface AgencyAuditLogDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AgencyAuditLog'], meta: { name: 'AgencyAuditLog' } }
    /**
     * Find zero or one AgencyAuditLog that matches the filter.
     * @param {AgencyAuditLogFindUniqueArgs} args - Arguments to find a AgencyAuditLog
     * @example
     * // Get one AgencyAuditLog
     * const agencyAuditLog = await prisma.agencyAuditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AgencyAuditLogFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AgencyAuditLogFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'AgencyAuditLog'> extends True ? Prisma__AgencyAuditLogClient<$Types.GetResult<AgencyAuditLogPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__AgencyAuditLogClient<$Types.GetResult<AgencyAuditLogPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one AgencyAuditLog that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AgencyAuditLogFindUniqueOrThrowArgs} args - Arguments to find a AgencyAuditLog
     * @example
     * // Get one AgencyAuditLog
     * const agencyAuditLog = await prisma.agencyAuditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AgencyAuditLogFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AgencyAuditLogFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AgencyAuditLogClient<$Types.GetResult<AgencyAuditLogPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first AgencyAuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgencyAuditLogFindFirstArgs} args - Arguments to find a AgencyAuditLog
     * @example
     * // Get one AgencyAuditLog
     * const agencyAuditLog = await prisma.agencyAuditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AgencyAuditLogFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AgencyAuditLogFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'AgencyAuditLog'> extends True ? Prisma__AgencyAuditLogClient<$Types.GetResult<AgencyAuditLogPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__AgencyAuditLogClient<$Types.GetResult<AgencyAuditLogPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first AgencyAuditLog that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgencyAuditLogFindFirstOrThrowArgs} args - Arguments to find a AgencyAuditLog
     * @example
     * // Get one AgencyAuditLog
     * const agencyAuditLog = await prisma.agencyAuditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AgencyAuditLogFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AgencyAuditLogFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AgencyAuditLogClient<$Types.GetResult<AgencyAuditLogPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more AgencyAuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgencyAuditLogFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AgencyAuditLogs
     * const agencyAuditLogs = await prisma.agencyAuditLog.findMany()
     * 
     * // Get first 10 AgencyAuditLogs
     * const agencyAuditLogs = await prisma.agencyAuditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const agencyAuditLogWithIdOnly = await prisma.agencyAuditLog.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AgencyAuditLogFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AgencyAuditLogFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<AgencyAuditLogPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a AgencyAuditLog.
     * @param {AgencyAuditLogCreateArgs} args - Arguments to create a AgencyAuditLog.
     * @example
     * // Create one AgencyAuditLog
     * const AgencyAuditLog = await prisma.agencyAuditLog.create({
     *   data: {
     *     // ... data to create a AgencyAuditLog
     *   }
     * })
     * 
    **/
    create<T extends AgencyAuditLogCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AgencyAuditLogCreateArgs<ExtArgs>>
    ): Prisma__AgencyAuditLogClient<$Types.GetResult<AgencyAuditLogPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many AgencyAuditLogs.
     *     @param {AgencyAuditLogCreateManyArgs} args - Arguments to create many AgencyAuditLogs.
     *     @example
     *     // Create many AgencyAuditLogs
     *     const agencyAuditLog = await prisma.agencyAuditLog.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AgencyAuditLogCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AgencyAuditLogCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AgencyAuditLog.
     * @param {AgencyAuditLogDeleteArgs} args - Arguments to delete one AgencyAuditLog.
     * @example
     * // Delete one AgencyAuditLog
     * const AgencyAuditLog = await prisma.agencyAuditLog.delete({
     *   where: {
     *     // ... filter to delete one AgencyAuditLog
     *   }
     * })
     * 
    **/
    delete<T extends AgencyAuditLogDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AgencyAuditLogDeleteArgs<ExtArgs>>
    ): Prisma__AgencyAuditLogClient<$Types.GetResult<AgencyAuditLogPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one AgencyAuditLog.
     * @param {AgencyAuditLogUpdateArgs} args - Arguments to update one AgencyAuditLog.
     * @example
     * // Update one AgencyAuditLog
     * const agencyAuditLog = await prisma.agencyAuditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AgencyAuditLogUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AgencyAuditLogUpdateArgs<ExtArgs>>
    ): Prisma__AgencyAuditLogClient<$Types.GetResult<AgencyAuditLogPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more AgencyAuditLogs.
     * @param {AgencyAuditLogDeleteManyArgs} args - Arguments to filter AgencyAuditLogs to delete.
     * @example
     * // Delete a few AgencyAuditLogs
     * const { count } = await prisma.agencyAuditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AgencyAuditLogDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AgencyAuditLogDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AgencyAuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgencyAuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AgencyAuditLogs
     * const agencyAuditLog = await prisma.agencyAuditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AgencyAuditLogUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AgencyAuditLogUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AgencyAuditLog.
     * @param {AgencyAuditLogUpsertArgs} args - Arguments to update or create a AgencyAuditLog.
     * @example
     * // Update or create a AgencyAuditLog
     * const agencyAuditLog = await prisma.agencyAuditLog.upsert({
     *   create: {
     *     // ... data to create a AgencyAuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AgencyAuditLog we want to update
     *   }
     * })
    **/
    upsert<T extends AgencyAuditLogUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AgencyAuditLogUpsertArgs<ExtArgs>>
    ): Prisma__AgencyAuditLogClient<$Types.GetResult<AgencyAuditLogPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of AgencyAuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgencyAuditLogCountArgs} args - Arguments to filter AgencyAuditLogs to count.
     * @example
     * // Count the number of AgencyAuditLogs
     * const count = await prisma.agencyAuditLog.count({
     *   where: {
     *     // ... the filter for the AgencyAuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AgencyAuditLogCountArgs>(
      args?: Subset<T, AgencyAuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AgencyAuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AgencyAuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgencyAuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AgencyAuditLogAggregateArgs>(args: Subset<T, AgencyAuditLogAggregateArgs>): Prisma.PrismaPromise<GetAgencyAuditLogAggregateType<T>>

    /**
     * Group by AgencyAuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgencyAuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AgencyAuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AgencyAuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AgencyAuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AgencyAuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAgencyAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for AgencyAuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AgencyAuditLogClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    agency<T extends AgencyArgs<ExtArgs> = {}>(args?: Subset<T, AgencyArgs<ExtArgs>>): Prisma__AgencyClient<$Types.GetResult<AgencyPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * AgencyAuditLog base type for findUnique actions
   */
  export type AgencyAuditLogFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgencyAuditLog
     */
    select?: AgencyAuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencyAuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AgencyAuditLog to fetch.
     */
    where: AgencyAuditLogWhereUniqueInput
  }

  /**
   * AgencyAuditLog findUnique
   */
  export interface AgencyAuditLogFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AgencyAuditLogFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * AgencyAuditLog findUniqueOrThrow
   */
  export type AgencyAuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgencyAuditLog
     */
    select?: AgencyAuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencyAuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AgencyAuditLog to fetch.
     */
    where: AgencyAuditLogWhereUniqueInput
  }


  /**
   * AgencyAuditLog base type for findFirst actions
   */
  export type AgencyAuditLogFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgencyAuditLog
     */
    select?: AgencyAuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencyAuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AgencyAuditLog to fetch.
     */
    where?: AgencyAuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgencyAuditLogs to fetch.
     */
    orderBy?: Enumerable<AgencyAuditLogOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AgencyAuditLogs.
     */
    cursor?: AgencyAuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgencyAuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgencyAuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AgencyAuditLogs.
     */
    distinct?: Enumerable<AgencyAuditLogScalarFieldEnum>
  }

  /**
   * AgencyAuditLog findFirst
   */
  export interface AgencyAuditLogFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AgencyAuditLogFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * AgencyAuditLog findFirstOrThrow
   */
  export type AgencyAuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgencyAuditLog
     */
    select?: AgencyAuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencyAuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AgencyAuditLog to fetch.
     */
    where?: AgencyAuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgencyAuditLogs to fetch.
     */
    orderBy?: Enumerable<AgencyAuditLogOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AgencyAuditLogs.
     */
    cursor?: AgencyAuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgencyAuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgencyAuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AgencyAuditLogs.
     */
    distinct?: Enumerable<AgencyAuditLogScalarFieldEnum>
  }


  /**
   * AgencyAuditLog findMany
   */
  export type AgencyAuditLogFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgencyAuditLog
     */
    select?: AgencyAuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencyAuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AgencyAuditLogs to fetch.
     */
    where?: AgencyAuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgencyAuditLogs to fetch.
     */
    orderBy?: Enumerable<AgencyAuditLogOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AgencyAuditLogs.
     */
    cursor?: AgencyAuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgencyAuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgencyAuditLogs.
     */
    skip?: number
    distinct?: Enumerable<AgencyAuditLogScalarFieldEnum>
  }


  /**
   * AgencyAuditLog create
   */
  export type AgencyAuditLogCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgencyAuditLog
     */
    select?: AgencyAuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencyAuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AgencyAuditLog.
     */
    data: XOR<AgencyAuditLogCreateInput, AgencyAuditLogUncheckedCreateInput>
  }


  /**
   * AgencyAuditLog createMany
   */
  export type AgencyAuditLogCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AgencyAuditLogs.
     */
    data: Enumerable<AgencyAuditLogCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * AgencyAuditLog update
   */
  export type AgencyAuditLogUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgencyAuditLog
     */
    select?: AgencyAuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencyAuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AgencyAuditLog.
     */
    data: XOR<AgencyAuditLogUpdateInput, AgencyAuditLogUncheckedUpdateInput>
    /**
     * Choose, which AgencyAuditLog to update.
     */
    where: AgencyAuditLogWhereUniqueInput
  }


  /**
   * AgencyAuditLog updateMany
   */
  export type AgencyAuditLogUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AgencyAuditLogs.
     */
    data: XOR<AgencyAuditLogUpdateManyMutationInput, AgencyAuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AgencyAuditLogs to update
     */
    where?: AgencyAuditLogWhereInput
  }


  /**
   * AgencyAuditLog upsert
   */
  export type AgencyAuditLogUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgencyAuditLog
     */
    select?: AgencyAuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencyAuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AgencyAuditLog to update in case it exists.
     */
    where: AgencyAuditLogWhereUniqueInput
    /**
     * In case the AgencyAuditLog found by the `where` argument doesn't exist, create a new AgencyAuditLog with this data.
     */
    create: XOR<AgencyAuditLogCreateInput, AgencyAuditLogUncheckedCreateInput>
    /**
     * In case the AgencyAuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AgencyAuditLogUpdateInput, AgencyAuditLogUncheckedUpdateInput>
  }


  /**
   * AgencyAuditLog delete
   */
  export type AgencyAuditLogDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgencyAuditLog
     */
    select?: AgencyAuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencyAuditLogInclude<ExtArgs> | null
    /**
     * Filter which AgencyAuditLog to delete.
     */
    where: AgencyAuditLogWhereUniqueInput
  }


  /**
   * AgencyAuditLog deleteMany
   */
  export type AgencyAuditLogDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which AgencyAuditLogs to delete
     */
    where?: AgencyAuditLogWhereInput
  }


  /**
   * AgencyAuditLog without action
   */
  export type AgencyAuditLogArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgencyAuditLog
     */
    select?: AgencyAuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgencyAuditLogInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TaskScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    status: 'status',
    priority: 'priority',
    type: 'type',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    dueDate: 'dueDate',
    assignedTo: 'assignedTo',
    createdBy: 'createdBy',
    metadata: 'metadata',
    tags: 'tags',
    dependencies: 'dependencies',
    error: 'error',
    completedAt: 'completedAt'
  };

  export type TaskScalarFieldEnum = (typeof TaskScalarFieldEnum)[keyof typeof TaskScalarFieldEnum]


  export const AgentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    type: 'type',
    status: 'status',
    capabilities: 'capabilities',
    provider: 'provider',
    lastActive: 'lastActive',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    agencyId: 'agencyId'
  };

  export type AgentScalarFieldEnum = (typeof AgentScalarFieldEnum)[keyof typeof AgentScalarFieldEnum]


  export const AgencyScalarFieldEnum: {
    id: 'id',
    name: 'name',
    subdomain: 'subdomain',
    slug: 'slug',
    subscriptionTier: 'subscriptionTier',
    subscriptionStatus: 'subscriptionStatus',
    billingEmail: 'billingEmail',
    branding: 'branding',
    settings: 'settings',
    userLimit: 'userLimit',
    agentLimit: 'agentLimit',
    storageLimit: 'storageLimit',
    isActive: 'isActive',
    trialEndsAt: 'trialEndsAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AgencyScalarFieldEnum = (typeof AgencyScalarFieldEnum)[keyof typeof AgencyScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    passwordHash: 'passwordHash',
    agencyId: 'agencyId',
    role: 'role',
    permissions: 'permissions',
    isActive: 'isActive',
    onboardingCompleted: 'onboardingCompleted',
    emailVerified: 'emailVerified',
    lastLoginAt: 'lastLoginAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ChatScalarFieldEnum: {
    id: 'id',
    agencyId: 'agencyId',
    title: 'title',
    createdBy: 'createdBy',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ChatScalarFieldEnum = (typeof ChatScalarFieldEnum)[keyof typeof ChatScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    agencyId: 'agencyId',
    token: 'token',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const SwarmExecutionScalarFieldEnum: {
    id: 'id',
    serviceRequestId: 'serviceRequestId',
    agencyId: 'agencyId',
    status: 'status',
    qualityScore: 'qualityScore',
    activeAgents: 'activeAgents',
    executionPlan: 'executionPlan',
    results: 'results',
    startedAt: 'startedAt',
    completedAt: 'completedAt'
  };

  export type SwarmExecutionScalarFieldEnum = (typeof SwarmExecutionScalarFieldEnum)[keyof typeof SwarmExecutionScalarFieldEnum]


  export const ExecutionStepScalarFieldEnum: {
    id: 'id',
    swarmExecutionId: 'swarmExecutionId',
    stepId: 'stepId',
    agentId: 'agentId',
    action: 'action',
    input: 'input',
    output: 'output',
    status: 'status',
    qualityScore: 'qualityScore',
    confidence: 'confidence',
    startedAt: 'startedAt',
    completedAt: 'completedAt'
  };

  export type ExecutionStepScalarFieldEnum = (typeof ExecutionStepScalarFieldEnum)[keyof typeof ExecutionStepScalarFieldEnum]


  export const SwarmMessageScalarFieldEnum: {
    id: 'id',
    swarmExecutionId: 'swarmExecutionId',
    fromAgentId: 'fromAgentId',
    toAgentId: 'toAgentId',
    type: 'type',
    priority: 'priority',
    content: 'content',
    metadata: 'metadata',
    status: 'status',
    processedAt: 'processedAt',
    createdAt: 'createdAt'
  };

  export type SwarmMessageScalarFieldEnum = (typeof SwarmMessageScalarFieldEnum)[keyof typeof SwarmMessageScalarFieldEnum]


  export const ServiceCategoryScalarFieldEnum: {
    id: 'id',
    parentId: 'parentId',
    name: 'name',
    description: 'description',
    slug: 'slug',
    isActive: 'isActive',
    requiresApproval: 'requiresApproval',
    estimatedDuration: 'estimatedDuration',
    basePricing: 'basePricing',
    complexityFactors: 'complexityFactors',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ServiceCategoryScalarFieldEnum = (typeof ServiceCategoryScalarFieldEnum)[keyof typeof ServiceCategoryScalarFieldEnum]


  export const ServiceProviderScalarFieldEnum: {
    id: 'id',
    agencyId: 'agencyId',
    agentId: 'agentId',
    categoryId: 'categoryId',
    capabilities: 'capabilities',
    qualityRating: 'qualityRating',
    completionRate: 'completionRate',
    averageRating: 'averageRating',
    totalCompletions: 'totalCompletions',
    isActive: 'isActive',
    maxConcurrent: 'maxConcurrent',
    currentLoad: 'currentLoad',
    pricingOverride: 'pricingOverride',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ServiceProviderScalarFieldEnum = (typeof ServiceProviderScalarFieldEnum)[keyof typeof ServiceProviderScalarFieldEnum]


  export const ServiceRequestScalarFieldEnum: {
    id: 'id',
    agencyId: 'agencyId',
    userId: 'userId',
    categoryId: 'categoryId',
    providerId: 'providerId',
    title: 'title',
    description: 'description',
    requirements: 'requirements',
    status: 'status',
    priority: 'priority',
    estimatedCost: 'estimatedCost',
    actualCost: 'actualCost',
    qualityScore: 'qualityScore',
    clientSatisfaction: 'clientSatisfaction',
    requestedAt: 'requestedAt',
    assignedAt: 'assignedAt',
    startedAt: 'startedAt',
    completedAt: 'completedAt',
    dueDate: 'dueDate',
    deliverables: 'deliverables',
    notes: 'notes'
  };

  export type ServiceRequestScalarFieldEnum = (typeof ServiceRequestScalarFieldEnum)[keyof typeof ServiceRequestScalarFieldEnum]


  export const ProviderReviewScalarFieldEnum: {
    id: 'id',
    providerId: 'providerId',
    reviewerId: 'reviewerId',
    rating: 'rating',
    comment: 'comment',
    criteria: 'criteria',
    serviceType: 'serviceType',
    createdAt: 'createdAt'
  };

  export type ProviderReviewScalarFieldEnum = (typeof ProviderReviewScalarFieldEnum)[keyof typeof ProviderReviewScalarFieldEnum]


  export const ServiceReviewScalarFieldEnum: {
    id: 'id',
    serviceRequestId: 'serviceRequestId',
    reviewerId: 'reviewerId',
    overallRating: 'overallRating',
    qualityRating: 'qualityRating',
    speedRating: 'speedRating',
    communicationRating: 'communicationRating',
    comment: 'comment',
    recommendations: 'recommendations',
    createdAt: 'createdAt'
  };

  export type ServiceReviewScalarFieldEnum = (typeof ServiceReviewScalarFieldEnum)[keyof typeof ServiceReviewScalarFieldEnum]


  export const AgencySubscriptionScalarFieldEnum: {
    id: 'id',
    agencyId: 'agencyId',
    tier: 'tier',
    status: 'status',
    billingCycle: 'billingCycle',
    pricePerMonth: 'pricePerMonth',
    currency: 'currency',
    startedAt: 'startedAt',
    endsAt: 'endsAt',
    renewedAt: 'renewedAt',
    cancelledAt: 'cancelledAt',
    stripeSubscriptionId: 'stripeSubscriptionId',
    paymentMethodId: 'paymentMethodId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AgencySubscriptionScalarFieldEnum = (typeof AgencySubscriptionScalarFieldEnum)[keyof typeof AgencySubscriptionScalarFieldEnum]


  export const AgencyAuditLogScalarFieldEnum: {
    id: 'id',
    agencyId: 'agencyId',
    userId: 'userId',
    action: 'action',
    entityType: 'entityType',
    entityId: 'entityId',
    changes: 'changes',
    metadata: 'metadata',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    createdAt: 'createdAt'
  };

  export type AgencyAuditLogScalarFieldEnum = (typeof AgencyAuditLogScalarFieldEnum)[keyof typeof AgencyAuditLogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Deep Input Types
   */


  export type TaskWhereInput = {
    AND?: Enumerable<TaskWhereInput>
    OR?: Enumerable<TaskWhereInput>
    NOT?: Enumerable<TaskWhereInput>
    id?: StringFilter | string
    title?: StringFilter | string
    description?: StringNullableFilter | string | null
    status?: EnumTaskStatusFilter | TaskStatus
    priority?: EnumTaskPriorityFilter | TaskPriority
    type?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    dueDate?: DateTimeNullableFilter | Date | string | null
    assignedTo?: StringNullableFilter | string | null
    createdBy?: StringFilter | string
    metadata?: JsonNullableFilter
    tags?: StringNullableListFilter
    dependencies?: StringNullableListFilter
    error?: StringNullableFilter | string | null
    completedAt?: DateTimeNullableFilter | Date | string | null
  }

  export type TaskOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    priority?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    assignedTo?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    metadata?: SortOrderInput | SortOrder
    tags?: SortOrder
    dependencies?: SortOrder
    error?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
  }

  export type TaskWhereUniqueInput = {
    id?: string
  }

  export type TaskOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    priority?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    assignedTo?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    metadata?: SortOrderInput | SortOrder
    tags?: SortOrder
    dependencies?: SortOrder
    error?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    _count?: TaskCountOrderByAggregateInput
    _max?: TaskMaxOrderByAggregateInput
    _min?: TaskMinOrderByAggregateInput
  }

  export type TaskScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TaskScalarWhereWithAggregatesInput>
    OR?: Enumerable<TaskScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TaskScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
    description?: StringNullableWithAggregatesFilter | string | null
    status?: EnumTaskStatusWithAggregatesFilter | TaskStatus
    priority?: EnumTaskPriorityWithAggregatesFilter | TaskPriority
    type?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    dueDate?: DateTimeNullableWithAggregatesFilter | Date | string | null
    assignedTo?: StringNullableWithAggregatesFilter | string | null
    createdBy?: StringWithAggregatesFilter | string
    metadata?: JsonNullableWithAggregatesFilter
    tags?: StringNullableListFilter
    dependencies?: StringNullableListFilter
    error?: StringNullableWithAggregatesFilter | string | null
    completedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type AgentWhereInput = {
    AND?: Enumerable<AgentWhereInput>
    OR?: Enumerable<AgentWhereInput>
    NOT?: Enumerable<AgentWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    description?: StringNullableFilter | string | null
    type?: StringFilter | string
    status?: EnumAgentStatusFilter | AgentStatus
    capabilities?: StringNullableListFilter
    provider?: StringFilter | string
    lastActive?: DateTimeFilter | Date | string
    metadata?: JsonNullableFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    agencyId?: StringNullableFilter | string | null
  }

  export type AgentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    type?: SortOrder
    status?: SortOrder
    capabilities?: SortOrder
    provider?: SortOrder
    lastActive?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    agencyId?: SortOrderInput | SortOrder
  }

  export type AgentWhereUniqueInput = {
    id?: string
  }

  export type AgentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    type?: SortOrder
    status?: SortOrder
    capabilities?: SortOrder
    provider?: SortOrder
    lastActive?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    agencyId?: SortOrderInput | SortOrder
    _count?: AgentCountOrderByAggregateInput
    _max?: AgentMaxOrderByAggregateInput
    _min?: AgentMinOrderByAggregateInput
  }

  export type AgentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AgentScalarWhereWithAggregatesInput>
    OR?: Enumerable<AgentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AgentScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    description?: StringNullableWithAggregatesFilter | string | null
    type?: StringWithAggregatesFilter | string
    status?: EnumAgentStatusWithAggregatesFilter | AgentStatus
    capabilities?: StringNullableListFilter
    provider?: StringWithAggregatesFilter | string
    lastActive?: DateTimeWithAggregatesFilter | Date | string
    metadata?: JsonNullableWithAggregatesFilter
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    agencyId?: StringNullableWithAggregatesFilter | string | null
  }

  export type AgencyWhereInput = {
    AND?: Enumerable<AgencyWhereInput>
    OR?: Enumerable<AgencyWhereInput>
    NOT?: Enumerable<AgencyWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    subdomain?: StringFilter | string
    slug?: StringFilter | string
    subscriptionTier?: EnumAgencyTierFilter | AgencyTier
    subscriptionStatus?: EnumSubscriptionStatusFilter | SubscriptionStatus
    billingEmail?: StringFilter | string
    branding?: JsonNullableFilter
    settings?: JsonNullableFilter
    userLimit?: IntFilter | number
    agentLimit?: IntFilter | number
    storageLimit?: IntFilter | number
    isActive?: BoolFilter | boolean
    trialEndsAt?: DateTimeNullableFilter | Date | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    users?: UserListRelationFilter
    chats?: ChatListRelationFilter
    sessions?: SessionListRelationFilter
    subscriptions?: AgencySubscriptionListRelationFilter
    auditLogs?: AgencyAuditLogListRelationFilter
    swarmExecutions?: SwarmExecutionListRelationFilter
    serviceRequests?: ServiceRequestListRelationFilter
    serviceProviders?: ServiceProviderListRelationFilter
  }

  export type AgencyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    subdomain?: SortOrder
    slug?: SortOrder
    subscriptionTier?: SortOrder
    subscriptionStatus?: SortOrder
    billingEmail?: SortOrder
    branding?: SortOrderInput | SortOrder
    settings?: SortOrderInput | SortOrder
    userLimit?: SortOrder
    agentLimit?: SortOrder
    storageLimit?: SortOrder
    isActive?: SortOrder
    trialEndsAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    users?: UserOrderByRelationAggregateInput
    chats?: ChatOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    subscriptions?: AgencySubscriptionOrderByRelationAggregateInput
    auditLogs?: AgencyAuditLogOrderByRelationAggregateInput
    swarmExecutions?: SwarmExecutionOrderByRelationAggregateInput
    serviceRequests?: ServiceRequestOrderByRelationAggregateInput
    serviceProviders?: ServiceProviderOrderByRelationAggregateInput
  }

  export type AgencyWhereUniqueInput = {
    id?: string
    subdomain?: string
    slug?: string
  }

  export type AgencyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    subdomain?: SortOrder
    slug?: SortOrder
    subscriptionTier?: SortOrder
    subscriptionStatus?: SortOrder
    billingEmail?: SortOrder
    branding?: SortOrderInput | SortOrder
    settings?: SortOrderInput | SortOrder
    userLimit?: SortOrder
    agentLimit?: SortOrder
    storageLimit?: SortOrder
    isActive?: SortOrder
    trialEndsAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AgencyCountOrderByAggregateInput
    _avg?: AgencyAvgOrderByAggregateInput
    _max?: AgencyMaxOrderByAggregateInput
    _min?: AgencyMinOrderByAggregateInput
    _sum?: AgencySumOrderByAggregateInput
  }

  export type AgencyScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AgencyScalarWhereWithAggregatesInput>
    OR?: Enumerable<AgencyScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AgencyScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    subdomain?: StringWithAggregatesFilter | string
    slug?: StringWithAggregatesFilter | string
    subscriptionTier?: EnumAgencyTierWithAggregatesFilter | AgencyTier
    subscriptionStatus?: EnumSubscriptionStatusWithAggregatesFilter | SubscriptionStatus
    billingEmail?: StringWithAggregatesFilter | string
    branding?: JsonNullableWithAggregatesFilter
    settings?: JsonNullableWithAggregatesFilter
    userLimit?: IntWithAggregatesFilter | number
    agentLimit?: IntWithAggregatesFilter | number
    storageLimit?: IntWithAggregatesFilter | number
    isActive?: BoolWithAggregatesFilter | boolean
    trialEndsAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    email?: StringFilter | string
    name?: StringNullableFilter | string | null
    passwordHash?: StringFilter | string
    agencyId?: StringFilter | string
    role?: EnumEnhancedUserRoleFilter | EnhancedUserRole
    permissions?: JsonNullableFilter
    isActive?: BoolFilter | boolean
    onboardingCompleted?: BoolFilter | boolean
    emailVerified?: BoolFilter | boolean
    lastLoginAt?: DateTimeNullableFilter | Date | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    agency?: XOR<AgencyRelationFilter, AgencyWhereInput>
    createdChats?: ChatListRelationFilter
    sessions?: SessionListRelationFilter
    auditLogs?: AgencyAuditLogListRelationFilter
    serviceRequests?: ServiceRequestListRelationFilter
    providerReviews?: ProviderReviewListRelationFilter
    serviceReviews?: ServiceReviewListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    passwordHash?: SortOrder
    agencyId?: SortOrder
    role?: SortOrder
    permissions?: SortOrderInput | SortOrder
    isActive?: SortOrder
    onboardingCompleted?: SortOrder
    emailVerified?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    agency?: AgencyOrderByWithRelationInput
    createdChats?: ChatOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    auditLogs?: AgencyAuditLogOrderByRelationAggregateInput
    serviceRequests?: ServiceRequestOrderByRelationAggregateInput
    providerReviews?: ProviderReviewOrderByRelationAggregateInput
    serviceReviews?: ServiceReviewOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: string
    email_agencyId?: UserEmailAgencyIdCompoundUniqueInput
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    passwordHash?: SortOrder
    agencyId?: SortOrder
    role?: SortOrder
    permissions?: SortOrderInput | SortOrder
    isActive?: SortOrder
    onboardingCompleted?: SortOrder
    emailVerified?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    name?: StringNullableWithAggregatesFilter | string | null
    passwordHash?: StringWithAggregatesFilter | string
    agencyId?: StringWithAggregatesFilter | string
    role?: EnumEnhancedUserRoleWithAggregatesFilter | EnhancedUserRole
    permissions?: JsonNullableWithAggregatesFilter
    isActive?: BoolWithAggregatesFilter | boolean
    onboardingCompleted?: BoolWithAggregatesFilter | boolean
    emailVerified?: BoolWithAggregatesFilter | boolean
    lastLoginAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ChatWhereInput = {
    AND?: Enumerable<ChatWhereInput>
    OR?: Enumerable<ChatWhereInput>
    NOT?: Enumerable<ChatWhereInput>
    id?: StringFilter | string
    agencyId?: StringFilter | string
    title?: StringNullableFilter | string | null
    createdBy?: StringFilter | string
    isActive?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    agency?: XOR<AgencyRelationFilter, AgencyWhereInput>
    creator?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ChatOrderByWithRelationInput = {
    id?: SortOrder
    agencyId?: SortOrder
    title?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    agency?: AgencyOrderByWithRelationInput
    creator?: UserOrderByWithRelationInput
  }

  export type ChatWhereUniqueInput = {
    id?: string
  }

  export type ChatOrderByWithAggregationInput = {
    id?: SortOrder
    agencyId?: SortOrder
    title?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ChatCountOrderByAggregateInput
    _max?: ChatMaxOrderByAggregateInput
    _min?: ChatMinOrderByAggregateInput
  }

  export type ChatScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ChatScalarWhereWithAggregatesInput>
    OR?: Enumerable<ChatScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ChatScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    agencyId?: StringWithAggregatesFilter | string
    title?: StringNullableWithAggregatesFilter | string | null
    createdBy?: StringWithAggregatesFilter | string
    isActive?: BoolWithAggregatesFilter | boolean
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type SessionWhereInput = {
    AND?: Enumerable<SessionWhereInput>
    OR?: Enumerable<SessionWhereInput>
    NOT?: Enumerable<SessionWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    agencyId?: StringFilter | string
    token?: StringFilter | string
    expiresAt?: DateTimeFilter | Date | string
    createdAt?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    agency?: XOR<AgencyRelationFilter, AgencyWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    agencyId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    agency?: AgencyOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = {
    id?: string
    token?: string
  }

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    agencyId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SessionScalarWhereWithAggregatesInput>
    OR?: Enumerable<SessionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SessionScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    agencyId?: StringWithAggregatesFilter | string
    token?: StringWithAggregatesFilter | string
    expiresAt?: DateTimeWithAggregatesFilter | Date | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type SwarmExecutionWhereInput = {
    AND?: Enumerable<SwarmExecutionWhereInput>
    OR?: Enumerable<SwarmExecutionWhereInput>
    NOT?: Enumerable<SwarmExecutionWhereInput>
    id?: StringFilter | string
    serviceRequestId?: StringNullableFilter | string | null
    agencyId?: StringFilter | string
    status?: EnumSwarmExecutionStatusFilter | SwarmExecutionStatus
    qualityScore?: FloatNullableFilter | number | null
    activeAgents?: JsonFilter
    executionPlan?: JsonFilter
    results?: JsonNullableFilter
    startedAt?: DateTimeFilter | Date | string
    completedAt?: DateTimeNullableFilter | Date | string | null
    agency?: XOR<AgencyRelationFilter, AgencyWhereInput>
    executionSteps?: ExecutionStepListRelationFilter
    messages?: SwarmMessageListRelationFilter
  }

  export type SwarmExecutionOrderByWithRelationInput = {
    id?: SortOrder
    serviceRequestId?: SortOrderInput | SortOrder
    agencyId?: SortOrder
    status?: SortOrder
    qualityScore?: SortOrderInput | SortOrder
    activeAgents?: SortOrder
    executionPlan?: SortOrder
    results?: SortOrderInput | SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    agency?: AgencyOrderByWithRelationInput
    executionSteps?: ExecutionStepOrderByRelationAggregateInput
    messages?: SwarmMessageOrderByRelationAggregateInput
  }

  export type SwarmExecutionWhereUniqueInput = {
    id?: string
  }

  export type SwarmExecutionOrderByWithAggregationInput = {
    id?: SortOrder
    serviceRequestId?: SortOrderInput | SortOrder
    agencyId?: SortOrder
    status?: SortOrder
    qualityScore?: SortOrderInput | SortOrder
    activeAgents?: SortOrder
    executionPlan?: SortOrder
    results?: SortOrderInput | SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    _count?: SwarmExecutionCountOrderByAggregateInput
    _avg?: SwarmExecutionAvgOrderByAggregateInput
    _max?: SwarmExecutionMaxOrderByAggregateInput
    _min?: SwarmExecutionMinOrderByAggregateInput
    _sum?: SwarmExecutionSumOrderByAggregateInput
  }

  export type SwarmExecutionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SwarmExecutionScalarWhereWithAggregatesInput>
    OR?: Enumerable<SwarmExecutionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SwarmExecutionScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    serviceRequestId?: StringNullableWithAggregatesFilter | string | null
    agencyId?: StringWithAggregatesFilter | string
    status?: EnumSwarmExecutionStatusWithAggregatesFilter | SwarmExecutionStatus
    qualityScore?: FloatNullableWithAggregatesFilter | number | null
    activeAgents?: JsonWithAggregatesFilter
    executionPlan?: JsonWithAggregatesFilter
    results?: JsonNullableWithAggregatesFilter
    startedAt?: DateTimeWithAggregatesFilter | Date | string
    completedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type ExecutionStepWhereInput = {
    AND?: Enumerable<ExecutionStepWhereInput>
    OR?: Enumerable<ExecutionStepWhereInput>
    NOT?: Enumerable<ExecutionStepWhereInput>
    id?: StringFilter | string
    swarmExecutionId?: StringFilter | string
    stepId?: StringFilter | string
    agentId?: StringFilter | string
    action?: StringFilter | string
    input?: JsonNullableFilter
    output?: JsonNullableFilter
    status?: EnumExecutionStepStatusFilter | ExecutionStepStatus
    qualityScore?: FloatNullableFilter | number | null
    confidence?: FloatNullableFilter | number | null
    startedAt?: DateTimeFilter | Date | string
    completedAt?: DateTimeNullableFilter | Date | string | null
    swarmExecution?: XOR<SwarmExecutionRelationFilter, SwarmExecutionWhereInput>
  }

  export type ExecutionStepOrderByWithRelationInput = {
    id?: SortOrder
    swarmExecutionId?: SortOrder
    stepId?: SortOrder
    agentId?: SortOrder
    action?: SortOrder
    input?: SortOrderInput | SortOrder
    output?: SortOrderInput | SortOrder
    status?: SortOrder
    qualityScore?: SortOrderInput | SortOrder
    confidence?: SortOrderInput | SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    swarmExecution?: SwarmExecutionOrderByWithRelationInput
  }

  export type ExecutionStepWhereUniqueInput = {
    id?: string
  }

  export type ExecutionStepOrderByWithAggregationInput = {
    id?: SortOrder
    swarmExecutionId?: SortOrder
    stepId?: SortOrder
    agentId?: SortOrder
    action?: SortOrder
    input?: SortOrderInput | SortOrder
    output?: SortOrderInput | SortOrder
    status?: SortOrder
    qualityScore?: SortOrderInput | SortOrder
    confidence?: SortOrderInput | SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    _count?: ExecutionStepCountOrderByAggregateInput
    _avg?: ExecutionStepAvgOrderByAggregateInput
    _max?: ExecutionStepMaxOrderByAggregateInput
    _min?: ExecutionStepMinOrderByAggregateInput
    _sum?: ExecutionStepSumOrderByAggregateInput
  }

  export type ExecutionStepScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ExecutionStepScalarWhereWithAggregatesInput>
    OR?: Enumerable<ExecutionStepScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ExecutionStepScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    swarmExecutionId?: StringWithAggregatesFilter | string
    stepId?: StringWithAggregatesFilter | string
    agentId?: StringWithAggregatesFilter | string
    action?: StringWithAggregatesFilter | string
    input?: JsonNullableWithAggregatesFilter
    output?: JsonNullableWithAggregatesFilter
    status?: EnumExecutionStepStatusWithAggregatesFilter | ExecutionStepStatus
    qualityScore?: FloatNullableWithAggregatesFilter | number | null
    confidence?: FloatNullableWithAggregatesFilter | number | null
    startedAt?: DateTimeWithAggregatesFilter | Date | string
    completedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type SwarmMessageWhereInput = {
    AND?: Enumerable<SwarmMessageWhereInput>
    OR?: Enumerable<SwarmMessageWhereInput>
    NOT?: Enumerable<SwarmMessageWhereInput>
    id?: StringFilter | string
    swarmExecutionId?: StringFilter | string
    fromAgentId?: StringFilter | string
    toAgentId?: StringNullableFilter | string | null
    type?: EnumMessageTypeFilter | MessageType
    priority?: EnumMessagePriorityFilter | MessagePriority
    content?: JsonFilter
    metadata?: JsonNullableFilter
    status?: EnumMessageStatusFilter | MessageStatus
    processedAt?: DateTimeNullableFilter | Date | string | null
    createdAt?: DateTimeFilter | Date | string
    swarmExecution?: XOR<SwarmExecutionRelationFilter, SwarmExecutionWhereInput>
  }

  export type SwarmMessageOrderByWithRelationInput = {
    id?: SortOrder
    swarmExecutionId?: SortOrder
    fromAgentId?: SortOrder
    toAgentId?: SortOrderInput | SortOrder
    type?: SortOrder
    priority?: SortOrder
    content?: SortOrder
    metadata?: SortOrderInput | SortOrder
    status?: SortOrder
    processedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    swarmExecution?: SwarmExecutionOrderByWithRelationInput
  }

  export type SwarmMessageWhereUniqueInput = {
    id?: string
  }

  export type SwarmMessageOrderByWithAggregationInput = {
    id?: SortOrder
    swarmExecutionId?: SortOrder
    fromAgentId?: SortOrder
    toAgentId?: SortOrderInput | SortOrder
    type?: SortOrder
    priority?: SortOrder
    content?: SortOrder
    metadata?: SortOrderInput | SortOrder
    status?: SortOrder
    processedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: SwarmMessageCountOrderByAggregateInput
    _max?: SwarmMessageMaxOrderByAggregateInput
    _min?: SwarmMessageMinOrderByAggregateInput
  }

  export type SwarmMessageScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SwarmMessageScalarWhereWithAggregatesInput>
    OR?: Enumerable<SwarmMessageScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SwarmMessageScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    swarmExecutionId?: StringWithAggregatesFilter | string
    fromAgentId?: StringWithAggregatesFilter | string
    toAgentId?: StringNullableWithAggregatesFilter | string | null
    type?: EnumMessageTypeWithAggregatesFilter | MessageType
    priority?: EnumMessagePriorityWithAggregatesFilter | MessagePriority
    content?: JsonWithAggregatesFilter
    metadata?: JsonNullableWithAggregatesFilter
    status?: EnumMessageStatusWithAggregatesFilter | MessageStatus
    processedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ServiceCategoryWhereInput = {
    AND?: Enumerable<ServiceCategoryWhereInput>
    OR?: Enumerable<ServiceCategoryWhereInput>
    NOT?: Enumerable<ServiceCategoryWhereInput>
    id?: StringFilter | string
    parentId?: StringNullableFilter | string | null
    name?: StringFilter | string
    description?: StringNullableFilter | string | null
    slug?: StringFilter | string
    isActive?: BoolFilter | boolean
    requiresApproval?: BoolFilter | boolean
    estimatedDuration?: IntNullableFilter | number | null
    basePricing?: JsonNullableFilter
    complexityFactors?: JsonNullableFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    parent?: XOR<ServiceCategoryRelationFilter, ServiceCategoryWhereInput> | null
    children?: ServiceCategoryListRelationFilter
    serviceRequests?: ServiceRequestListRelationFilter
    providers?: ServiceProviderListRelationFilter
  }

  export type ServiceCategoryOrderByWithRelationInput = {
    id?: SortOrder
    parentId?: SortOrderInput | SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    slug?: SortOrder
    isActive?: SortOrder
    requiresApproval?: SortOrder
    estimatedDuration?: SortOrderInput | SortOrder
    basePricing?: SortOrderInput | SortOrder
    complexityFactors?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parent?: ServiceCategoryOrderByWithRelationInput
    children?: ServiceCategoryOrderByRelationAggregateInput
    serviceRequests?: ServiceRequestOrderByRelationAggregateInput
    providers?: ServiceProviderOrderByRelationAggregateInput
  }

  export type ServiceCategoryWhereUniqueInput = {
    id?: string
    slug?: string
  }

  export type ServiceCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    parentId?: SortOrderInput | SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    slug?: SortOrder
    isActive?: SortOrder
    requiresApproval?: SortOrder
    estimatedDuration?: SortOrderInput | SortOrder
    basePricing?: SortOrderInput | SortOrder
    complexityFactors?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ServiceCategoryCountOrderByAggregateInput
    _avg?: ServiceCategoryAvgOrderByAggregateInput
    _max?: ServiceCategoryMaxOrderByAggregateInput
    _min?: ServiceCategoryMinOrderByAggregateInput
    _sum?: ServiceCategorySumOrderByAggregateInput
  }

  export type ServiceCategoryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ServiceCategoryScalarWhereWithAggregatesInput>
    OR?: Enumerable<ServiceCategoryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ServiceCategoryScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    parentId?: StringNullableWithAggregatesFilter | string | null
    name?: StringWithAggregatesFilter | string
    description?: StringNullableWithAggregatesFilter | string | null
    slug?: StringWithAggregatesFilter | string
    isActive?: BoolWithAggregatesFilter | boolean
    requiresApproval?: BoolWithAggregatesFilter | boolean
    estimatedDuration?: IntNullableWithAggregatesFilter | number | null
    basePricing?: JsonNullableWithAggregatesFilter
    complexityFactors?: JsonNullableWithAggregatesFilter
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ServiceProviderWhereInput = {
    AND?: Enumerable<ServiceProviderWhereInput>
    OR?: Enumerable<ServiceProviderWhereInput>
    NOT?: Enumerable<ServiceProviderWhereInput>
    id?: StringFilter | string
    agencyId?: StringFilter | string
    agentId?: StringFilter | string
    categoryId?: StringFilter | string
    capabilities?: JsonFilter
    qualityRating?: FloatFilter | number
    completionRate?: FloatFilter | number
    averageRating?: FloatFilter | number
    totalCompletions?: IntFilter | number
    isActive?: BoolFilter | boolean
    maxConcurrent?: IntFilter | number
    currentLoad?: IntFilter | number
    pricingOverride?: JsonNullableFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    agency?: XOR<AgencyRelationFilter, AgencyWhereInput>
    category?: XOR<ServiceCategoryRelationFilter, ServiceCategoryWhereInput>
    serviceRequests?: ServiceRequestListRelationFilter
    reviews?: ProviderReviewListRelationFilter
  }

  export type ServiceProviderOrderByWithRelationInput = {
    id?: SortOrder
    agencyId?: SortOrder
    agentId?: SortOrder
    categoryId?: SortOrder
    capabilities?: SortOrder
    qualityRating?: SortOrder
    completionRate?: SortOrder
    averageRating?: SortOrder
    totalCompletions?: SortOrder
    isActive?: SortOrder
    maxConcurrent?: SortOrder
    currentLoad?: SortOrder
    pricingOverride?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    agency?: AgencyOrderByWithRelationInput
    category?: ServiceCategoryOrderByWithRelationInput
    serviceRequests?: ServiceRequestOrderByRelationAggregateInput
    reviews?: ProviderReviewOrderByRelationAggregateInput
  }

  export type ServiceProviderWhereUniqueInput = {
    id?: string
    agencyId_agentId_categoryId?: ServiceProviderAgencyIdAgentIdCategoryIdCompoundUniqueInput
  }

  export type ServiceProviderOrderByWithAggregationInput = {
    id?: SortOrder
    agencyId?: SortOrder
    agentId?: SortOrder
    categoryId?: SortOrder
    capabilities?: SortOrder
    qualityRating?: SortOrder
    completionRate?: SortOrder
    averageRating?: SortOrder
    totalCompletions?: SortOrder
    isActive?: SortOrder
    maxConcurrent?: SortOrder
    currentLoad?: SortOrder
    pricingOverride?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ServiceProviderCountOrderByAggregateInput
    _avg?: ServiceProviderAvgOrderByAggregateInput
    _max?: ServiceProviderMaxOrderByAggregateInput
    _min?: ServiceProviderMinOrderByAggregateInput
    _sum?: ServiceProviderSumOrderByAggregateInput
  }

  export type ServiceProviderScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ServiceProviderScalarWhereWithAggregatesInput>
    OR?: Enumerable<ServiceProviderScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ServiceProviderScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    agencyId?: StringWithAggregatesFilter | string
    agentId?: StringWithAggregatesFilter | string
    categoryId?: StringWithAggregatesFilter | string
    capabilities?: JsonWithAggregatesFilter
    qualityRating?: FloatWithAggregatesFilter | number
    completionRate?: FloatWithAggregatesFilter | number
    averageRating?: FloatWithAggregatesFilter | number
    totalCompletions?: IntWithAggregatesFilter | number
    isActive?: BoolWithAggregatesFilter | boolean
    maxConcurrent?: IntWithAggregatesFilter | number
    currentLoad?: IntWithAggregatesFilter | number
    pricingOverride?: JsonNullableWithAggregatesFilter
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ServiceRequestWhereInput = {
    AND?: Enumerable<ServiceRequestWhereInput>
    OR?: Enumerable<ServiceRequestWhereInput>
    NOT?: Enumerable<ServiceRequestWhereInput>
    id?: StringFilter | string
    agencyId?: StringFilter | string
    userId?: StringFilter | string
    categoryId?: StringFilter | string
    providerId?: StringNullableFilter | string | null
    title?: StringFilter | string
    description?: StringFilter | string
    requirements?: JsonNullableFilter
    status?: EnumServiceRequestStatusFilter | ServiceRequestStatus
    priority?: EnumRequestPriorityFilter | RequestPriority
    estimatedCost?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    actualCost?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    qualityScore?: FloatNullableFilter | number | null
    clientSatisfaction?: FloatNullableFilter | number | null
    requestedAt?: DateTimeFilter | Date | string
    assignedAt?: DateTimeNullableFilter | Date | string | null
    startedAt?: DateTimeNullableFilter | Date | string | null
    completedAt?: DateTimeNullableFilter | Date | string | null
    dueDate?: DateTimeNullableFilter | Date | string | null
    deliverables?: JsonNullableFilter
    notes?: StringNullableFilter | string | null
    agency?: XOR<AgencyRelationFilter, AgencyWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    category?: XOR<ServiceCategoryRelationFilter, ServiceCategoryWhereInput>
    provider?: XOR<ServiceProviderRelationFilter, ServiceProviderWhereInput> | null
    reviews?: ServiceReviewListRelationFilter
  }

  export type ServiceRequestOrderByWithRelationInput = {
    id?: SortOrder
    agencyId?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
    providerId?: SortOrderInput | SortOrder
    title?: SortOrder
    description?: SortOrder
    requirements?: SortOrderInput | SortOrder
    status?: SortOrder
    priority?: SortOrder
    estimatedCost?: SortOrderInput | SortOrder
    actualCost?: SortOrderInput | SortOrder
    qualityScore?: SortOrderInput | SortOrder
    clientSatisfaction?: SortOrderInput | SortOrder
    requestedAt?: SortOrder
    assignedAt?: SortOrderInput | SortOrder
    startedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    dueDate?: SortOrderInput | SortOrder
    deliverables?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    agency?: AgencyOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    category?: ServiceCategoryOrderByWithRelationInput
    provider?: ServiceProviderOrderByWithRelationInput
    reviews?: ServiceReviewOrderByRelationAggregateInput
  }

  export type ServiceRequestWhereUniqueInput = {
    id?: string
  }

  export type ServiceRequestOrderByWithAggregationInput = {
    id?: SortOrder
    agencyId?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
    providerId?: SortOrderInput | SortOrder
    title?: SortOrder
    description?: SortOrder
    requirements?: SortOrderInput | SortOrder
    status?: SortOrder
    priority?: SortOrder
    estimatedCost?: SortOrderInput | SortOrder
    actualCost?: SortOrderInput | SortOrder
    qualityScore?: SortOrderInput | SortOrder
    clientSatisfaction?: SortOrderInput | SortOrder
    requestedAt?: SortOrder
    assignedAt?: SortOrderInput | SortOrder
    startedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    dueDate?: SortOrderInput | SortOrder
    deliverables?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    _count?: ServiceRequestCountOrderByAggregateInput
    _avg?: ServiceRequestAvgOrderByAggregateInput
    _max?: ServiceRequestMaxOrderByAggregateInput
    _min?: ServiceRequestMinOrderByAggregateInput
    _sum?: ServiceRequestSumOrderByAggregateInput
  }

  export type ServiceRequestScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ServiceRequestScalarWhereWithAggregatesInput>
    OR?: Enumerable<ServiceRequestScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ServiceRequestScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    agencyId?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    categoryId?: StringWithAggregatesFilter | string
    providerId?: StringNullableWithAggregatesFilter | string | null
    title?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    requirements?: JsonNullableWithAggregatesFilter
    status?: EnumServiceRequestStatusWithAggregatesFilter | ServiceRequestStatus
    priority?: EnumRequestPriorityWithAggregatesFilter | RequestPriority
    estimatedCost?: DecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    actualCost?: DecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    qualityScore?: FloatNullableWithAggregatesFilter | number | null
    clientSatisfaction?: FloatNullableWithAggregatesFilter | number | null
    requestedAt?: DateTimeWithAggregatesFilter | Date | string
    assignedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    startedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    completedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    dueDate?: DateTimeNullableWithAggregatesFilter | Date | string | null
    deliverables?: JsonNullableWithAggregatesFilter
    notes?: StringNullableWithAggregatesFilter | string | null
  }

  export type ProviderReviewWhereInput = {
    AND?: Enumerable<ProviderReviewWhereInput>
    OR?: Enumerable<ProviderReviewWhereInput>
    NOT?: Enumerable<ProviderReviewWhereInput>
    id?: StringFilter | string
    providerId?: StringFilter | string
    reviewerId?: StringFilter | string
    rating?: IntFilter | number
    comment?: StringNullableFilter | string | null
    criteria?: JsonNullableFilter
    serviceType?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    provider?: XOR<ServiceProviderRelationFilter, ServiceProviderWhereInput>
    reviewer?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ProviderReviewOrderByWithRelationInput = {
    id?: SortOrder
    providerId?: SortOrder
    reviewerId?: SortOrder
    rating?: SortOrder
    comment?: SortOrderInput | SortOrder
    criteria?: SortOrderInput | SortOrder
    serviceType?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    provider?: ServiceProviderOrderByWithRelationInput
    reviewer?: UserOrderByWithRelationInput
  }

  export type ProviderReviewWhereUniqueInput = {
    id?: string
  }

  export type ProviderReviewOrderByWithAggregationInput = {
    id?: SortOrder
    providerId?: SortOrder
    reviewerId?: SortOrder
    rating?: SortOrder
    comment?: SortOrderInput | SortOrder
    criteria?: SortOrderInput | SortOrder
    serviceType?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ProviderReviewCountOrderByAggregateInput
    _avg?: ProviderReviewAvgOrderByAggregateInput
    _max?: ProviderReviewMaxOrderByAggregateInput
    _min?: ProviderReviewMinOrderByAggregateInput
    _sum?: ProviderReviewSumOrderByAggregateInput
  }

  export type ProviderReviewScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProviderReviewScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProviderReviewScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProviderReviewScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    providerId?: StringWithAggregatesFilter | string
    reviewerId?: StringWithAggregatesFilter | string
    rating?: IntWithAggregatesFilter | number
    comment?: StringNullableWithAggregatesFilter | string | null
    criteria?: JsonNullableWithAggregatesFilter
    serviceType?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ServiceReviewWhereInput = {
    AND?: Enumerable<ServiceReviewWhereInput>
    OR?: Enumerable<ServiceReviewWhereInput>
    NOT?: Enumerable<ServiceReviewWhereInput>
    id?: StringFilter | string
    serviceRequestId?: StringFilter | string
    reviewerId?: StringFilter | string
    overallRating?: IntFilter | number
    qualityRating?: IntNullableFilter | number | null
    speedRating?: IntNullableFilter | number | null
    communicationRating?: IntNullableFilter | number | null
    comment?: StringNullableFilter | string | null
    recommendations?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    serviceRequest?: XOR<ServiceRequestRelationFilter, ServiceRequestWhereInput>
    reviewer?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ServiceReviewOrderByWithRelationInput = {
    id?: SortOrder
    serviceRequestId?: SortOrder
    reviewerId?: SortOrder
    overallRating?: SortOrder
    qualityRating?: SortOrderInput | SortOrder
    speedRating?: SortOrderInput | SortOrder
    communicationRating?: SortOrderInput | SortOrder
    comment?: SortOrderInput | SortOrder
    recommendations?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    serviceRequest?: ServiceRequestOrderByWithRelationInput
    reviewer?: UserOrderByWithRelationInput
  }

  export type ServiceReviewWhereUniqueInput = {
    id?: string
    serviceRequestId_reviewerId?: ServiceReviewServiceRequestIdReviewerIdCompoundUniqueInput
  }

  export type ServiceReviewOrderByWithAggregationInput = {
    id?: SortOrder
    serviceRequestId?: SortOrder
    reviewerId?: SortOrder
    overallRating?: SortOrder
    qualityRating?: SortOrderInput | SortOrder
    speedRating?: SortOrderInput | SortOrder
    communicationRating?: SortOrderInput | SortOrder
    comment?: SortOrderInput | SortOrder
    recommendations?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ServiceReviewCountOrderByAggregateInput
    _avg?: ServiceReviewAvgOrderByAggregateInput
    _max?: ServiceReviewMaxOrderByAggregateInput
    _min?: ServiceReviewMinOrderByAggregateInput
    _sum?: ServiceReviewSumOrderByAggregateInput
  }

  export type ServiceReviewScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ServiceReviewScalarWhereWithAggregatesInput>
    OR?: Enumerable<ServiceReviewScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ServiceReviewScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    serviceRequestId?: StringWithAggregatesFilter | string
    reviewerId?: StringWithAggregatesFilter | string
    overallRating?: IntWithAggregatesFilter | number
    qualityRating?: IntNullableWithAggregatesFilter | number | null
    speedRating?: IntNullableWithAggregatesFilter | number | null
    communicationRating?: IntNullableWithAggregatesFilter | number | null
    comment?: StringNullableWithAggregatesFilter | string | null
    recommendations?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type AgencySubscriptionWhereInput = {
    AND?: Enumerable<AgencySubscriptionWhereInput>
    OR?: Enumerable<AgencySubscriptionWhereInput>
    NOT?: Enumerable<AgencySubscriptionWhereInput>
    id?: StringFilter | string
    agencyId?: StringFilter | string
    tier?: EnumAgencyTierFilter | AgencyTier
    status?: EnumSubscriptionStatusFilter | SubscriptionStatus
    billingCycle?: EnumBillingCycleFilter | BillingCycle
    pricePerMonth?: DecimalFilter | Decimal | DecimalJsLike | number | string
    currency?: StringFilter | string
    startedAt?: DateTimeFilter | Date | string
    endsAt?: DateTimeNullableFilter | Date | string | null
    renewedAt?: DateTimeNullableFilter | Date | string | null
    cancelledAt?: DateTimeNullableFilter | Date | string | null
    stripeSubscriptionId?: StringNullableFilter | string | null
    paymentMethodId?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    agency?: XOR<AgencyRelationFilter, AgencyWhereInput>
  }

  export type AgencySubscriptionOrderByWithRelationInput = {
    id?: SortOrder
    agencyId?: SortOrder
    tier?: SortOrder
    status?: SortOrder
    billingCycle?: SortOrder
    pricePerMonth?: SortOrder
    currency?: SortOrder
    startedAt?: SortOrder
    endsAt?: SortOrderInput | SortOrder
    renewedAt?: SortOrderInput | SortOrder
    cancelledAt?: SortOrderInput | SortOrder
    stripeSubscriptionId?: SortOrderInput | SortOrder
    paymentMethodId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    agency?: AgencyOrderByWithRelationInput
  }

  export type AgencySubscriptionWhereUniqueInput = {
    id?: string
  }

  export type AgencySubscriptionOrderByWithAggregationInput = {
    id?: SortOrder
    agencyId?: SortOrder
    tier?: SortOrder
    status?: SortOrder
    billingCycle?: SortOrder
    pricePerMonth?: SortOrder
    currency?: SortOrder
    startedAt?: SortOrder
    endsAt?: SortOrderInput | SortOrder
    renewedAt?: SortOrderInput | SortOrder
    cancelledAt?: SortOrderInput | SortOrder
    stripeSubscriptionId?: SortOrderInput | SortOrder
    paymentMethodId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AgencySubscriptionCountOrderByAggregateInput
    _avg?: AgencySubscriptionAvgOrderByAggregateInput
    _max?: AgencySubscriptionMaxOrderByAggregateInput
    _min?: AgencySubscriptionMinOrderByAggregateInput
    _sum?: AgencySubscriptionSumOrderByAggregateInput
  }

  export type AgencySubscriptionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AgencySubscriptionScalarWhereWithAggregatesInput>
    OR?: Enumerable<AgencySubscriptionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AgencySubscriptionScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    agencyId?: StringWithAggregatesFilter | string
    tier?: EnumAgencyTierWithAggregatesFilter | AgencyTier
    status?: EnumSubscriptionStatusWithAggregatesFilter | SubscriptionStatus
    billingCycle?: EnumBillingCycleWithAggregatesFilter | BillingCycle
    pricePerMonth?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    currency?: StringWithAggregatesFilter | string
    startedAt?: DateTimeWithAggregatesFilter | Date | string
    endsAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    renewedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    cancelledAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    stripeSubscriptionId?: StringNullableWithAggregatesFilter | string | null
    paymentMethodId?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type AgencyAuditLogWhereInput = {
    AND?: Enumerable<AgencyAuditLogWhereInput>
    OR?: Enumerable<AgencyAuditLogWhereInput>
    NOT?: Enumerable<AgencyAuditLogWhereInput>
    id?: StringFilter | string
    agencyId?: StringFilter | string
    userId?: StringNullableFilter | string | null
    action?: StringFilter | string
    entityType?: StringFilter | string
    entityId?: StringNullableFilter | string | null
    changes?: JsonNullableFilter
    metadata?: JsonNullableFilter
    ipAddress?: StringNullableFilter | string | null
    userAgent?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    agency?: XOR<AgencyRelationFilter, AgencyWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput> | null
  }

  export type AgencyAuditLogOrderByWithRelationInput = {
    id?: SortOrder
    agencyId?: SortOrder
    userId?: SortOrderInput | SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrderInput | SortOrder
    changes?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    agency?: AgencyOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type AgencyAuditLogWhereUniqueInput = {
    id?: string
  }

  export type AgencyAuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    agencyId?: SortOrder
    userId?: SortOrderInput | SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrderInput | SortOrder
    changes?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AgencyAuditLogCountOrderByAggregateInput
    _max?: AgencyAuditLogMaxOrderByAggregateInput
    _min?: AgencyAuditLogMinOrderByAggregateInput
  }

  export type AgencyAuditLogScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AgencyAuditLogScalarWhereWithAggregatesInput>
    OR?: Enumerable<AgencyAuditLogScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AgencyAuditLogScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    agencyId?: StringWithAggregatesFilter | string
    userId?: StringNullableWithAggregatesFilter | string | null
    action?: StringWithAggregatesFilter | string
    entityType?: StringWithAggregatesFilter | string
    entityId?: StringNullableWithAggregatesFilter | string | null
    changes?: JsonNullableWithAggregatesFilter
    metadata?: JsonNullableWithAggregatesFilter
    ipAddress?: StringNullableWithAggregatesFilter | string | null
    userAgent?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type TaskCreateInput = {
    id?: string
    title: string
    description?: string | null
    status?: TaskStatus
    priority?: TaskPriority
    type: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dueDate?: Date | string | null
    assignedTo?: string | null
    createdBy: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: TaskCreatetagsInput | Enumerable<string>
    dependencies?: TaskCreatedependenciesInput | Enumerable<string>
    error?: string | null
    completedAt?: Date | string | null
  }

  export type TaskUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    status?: TaskStatus
    priority?: TaskPriority
    type: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dueDate?: Date | string | null
    assignedTo?: string | null
    createdBy: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: TaskCreatetagsInput | Enumerable<string>
    dependencies?: TaskCreatedependenciesInput | Enumerable<string>
    error?: string | null
    completedAt?: Date | string | null
  }

  export type TaskUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | TaskStatus
    priority?: EnumTaskPriorityFieldUpdateOperationsInput | TaskPriority
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedTo?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: TaskUpdatetagsInput | Enumerable<string>
    dependencies?: TaskUpdatedependenciesInput | Enumerable<string>
    error?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TaskUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | TaskStatus
    priority?: EnumTaskPriorityFieldUpdateOperationsInput | TaskPriority
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedTo?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: TaskUpdatetagsInput | Enumerable<string>
    dependencies?: TaskUpdatedependenciesInput | Enumerable<string>
    error?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TaskCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    status?: TaskStatus
    priority?: TaskPriority
    type: string
    createdAt?: Date | string
    updatedAt?: Date | string
    dueDate?: Date | string | null
    assignedTo?: string | null
    createdBy: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: TaskCreatetagsInput | Enumerable<string>
    dependencies?: TaskCreatedependenciesInput | Enumerable<string>
    error?: string | null
    completedAt?: Date | string | null
  }

  export type TaskUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | TaskStatus
    priority?: EnumTaskPriorityFieldUpdateOperationsInput | TaskPriority
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedTo?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: TaskUpdatetagsInput | Enumerable<string>
    dependencies?: TaskUpdatedependenciesInput | Enumerable<string>
    error?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TaskUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | TaskStatus
    priority?: EnumTaskPriorityFieldUpdateOperationsInput | TaskPriority
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedTo?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: TaskUpdatetagsInput | Enumerable<string>
    dependencies?: TaskUpdatedependenciesInput | Enumerable<string>
    error?: NullableStringFieldUpdateOperationsInput | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AgentCreateInput = {
    id?: string
    name: string
    description?: string | null
    type: string
    status?: AgentStatus
    capabilities?: AgentCreatecapabilitiesInput | Enumerable<string>
    provider: string
    lastActive?: Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    agencyId?: string | null
  }

  export type AgentUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    type: string
    status?: AgentStatus
    capabilities?: AgentCreatecapabilitiesInput | Enumerable<string>
    provider: string
    lastActive?: Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    agencyId?: string | null
  }

  export type AgentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    status?: EnumAgentStatusFieldUpdateOperationsInput | AgentStatus
    capabilities?: AgentUpdatecapabilitiesInput | Enumerable<string>
    provider?: StringFieldUpdateOperationsInput | string
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agencyId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AgentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    status?: EnumAgentStatusFieldUpdateOperationsInput | AgentStatus
    capabilities?: AgentUpdatecapabilitiesInput | Enumerable<string>
    provider?: StringFieldUpdateOperationsInput | string
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agencyId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AgentCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    type: string
    status?: AgentStatus
    capabilities?: AgentCreatecapabilitiesInput | Enumerable<string>
    provider: string
    lastActive?: Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    agencyId?: string | null
  }

  export type AgentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    status?: EnumAgentStatusFieldUpdateOperationsInput | AgentStatus
    capabilities?: AgentUpdatecapabilitiesInput | Enumerable<string>
    provider?: StringFieldUpdateOperationsInput | string
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agencyId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AgentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    status?: EnumAgentStatusFieldUpdateOperationsInput | AgentStatus
    capabilities?: AgentUpdatecapabilitiesInput | Enumerable<string>
    provider?: StringFieldUpdateOperationsInput | string
    lastActive?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agencyId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AgencyCreateInput = {
    id?: string
    name: string
    subdomain: string
    slug: string
    subscriptionTier?: AgencyTier
    subscriptionStatus?: SubscriptionStatus
    billingEmail: string
    branding?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    userLimit?: number
    agentLimit?: number
    storageLimit?: number
    isActive?: boolean
    trialEndsAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutAgencyInput
    chats?: ChatCreateNestedManyWithoutAgencyInput
    sessions?: SessionCreateNestedManyWithoutAgencyInput
    subscriptions?: AgencySubscriptionCreateNestedManyWithoutAgencyInput
    auditLogs?: AgencyAuditLogCreateNestedManyWithoutAgencyInput
    swarmExecutions?: SwarmExecutionCreateNestedManyWithoutAgencyInput
    serviceRequests?: ServiceRequestCreateNestedManyWithoutAgencyInput
    serviceProviders?: ServiceProviderCreateNestedManyWithoutAgencyInput
  }

  export type AgencyUncheckedCreateInput = {
    id?: string
    name: string
    subdomain: string
    slug: string
    subscriptionTier?: AgencyTier
    subscriptionStatus?: SubscriptionStatus
    billingEmail: string
    branding?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    userLimit?: number
    agentLimit?: number
    storageLimit?: number
    isActive?: boolean
    trialEndsAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutAgencyInput
    chats?: ChatUncheckedCreateNestedManyWithoutAgencyInput
    sessions?: SessionUncheckedCreateNestedManyWithoutAgencyInput
    subscriptions?: AgencySubscriptionUncheckedCreateNestedManyWithoutAgencyInput
    auditLogs?: AgencyAuditLogUncheckedCreateNestedManyWithoutAgencyInput
    swarmExecutions?: SwarmExecutionUncheckedCreateNestedManyWithoutAgencyInput
    serviceRequests?: ServiceRequestUncheckedCreateNestedManyWithoutAgencyInput
    serviceProviders?: ServiceProviderUncheckedCreateNestedManyWithoutAgencyInput
  }

  export type AgencyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: EnumAgencyTierFieldUpdateOperationsInput | AgencyTier
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | SubscriptionStatus
    billingEmail?: StringFieldUpdateOperationsInput | string
    branding?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    userLimit?: IntFieldUpdateOperationsInput | number
    agentLimit?: IntFieldUpdateOperationsInput | number
    storageLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutAgencyNestedInput
    chats?: ChatUpdateManyWithoutAgencyNestedInput
    sessions?: SessionUpdateManyWithoutAgencyNestedInput
    subscriptions?: AgencySubscriptionUpdateManyWithoutAgencyNestedInput
    auditLogs?: AgencyAuditLogUpdateManyWithoutAgencyNestedInput
    swarmExecutions?: SwarmExecutionUpdateManyWithoutAgencyNestedInput
    serviceRequests?: ServiceRequestUpdateManyWithoutAgencyNestedInput
    serviceProviders?: ServiceProviderUpdateManyWithoutAgencyNestedInput
  }

  export type AgencyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: EnumAgencyTierFieldUpdateOperationsInput | AgencyTier
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | SubscriptionStatus
    billingEmail?: StringFieldUpdateOperationsInput | string
    branding?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    userLimit?: IntFieldUpdateOperationsInput | number
    agentLimit?: IntFieldUpdateOperationsInput | number
    storageLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutAgencyNestedInput
    chats?: ChatUncheckedUpdateManyWithoutAgencyNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutAgencyNestedInput
    subscriptions?: AgencySubscriptionUncheckedUpdateManyWithoutAgencyNestedInput
    auditLogs?: AgencyAuditLogUncheckedUpdateManyWithoutAgencyNestedInput
    swarmExecutions?: SwarmExecutionUncheckedUpdateManyWithoutAgencyNestedInput
    serviceRequests?: ServiceRequestUncheckedUpdateManyWithoutAgencyNestedInput
    serviceProviders?: ServiceProviderUncheckedUpdateManyWithoutAgencyNestedInput
  }

  export type AgencyCreateManyInput = {
    id?: string
    name: string
    subdomain: string
    slug: string
    subscriptionTier?: AgencyTier
    subscriptionStatus?: SubscriptionStatus
    billingEmail: string
    branding?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    userLimit?: number
    agentLimit?: number
    storageLimit?: number
    isActive?: boolean
    trialEndsAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AgencyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: EnumAgencyTierFieldUpdateOperationsInput | AgencyTier
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | SubscriptionStatus
    billingEmail?: StringFieldUpdateOperationsInput | string
    branding?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    userLimit?: IntFieldUpdateOperationsInput | number
    agentLimit?: IntFieldUpdateOperationsInput | number
    storageLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgencyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: EnumAgencyTierFieldUpdateOperationsInput | AgencyTier
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | SubscriptionStatus
    billingEmail?: StringFieldUpdateOperationsInput | string
    branding?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    userLimit?: IntFieldUpdateOperationsInput | number
    agentLimit?: IntFieldUpdateOperationsInput | number
    storageLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    name?: string | null
    passwordHash: string
    role?: EnhancedUserRole
    permissions?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    onboardingCompleted?: boolean
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    agency: AgencyCreateNestedOneWithoutUsersInput
    createdChats?: ChatCreateNestedManyWithoutCreatorInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    auditLogs?: AgencyAuditLogCreateNestedManyWithoutUserInput
    serviceRequests?: ServiceRequestCreateNestedManyWithoutUserInput
    providerReviews?: ProviderReviewCreateNestedManyWithoutReviewerInput
    serviceReviews?: ServiceReviewCreateNestedManyWithoutReviewerInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    name?: string | null
    passwordHash: string
    agencyId: string
    role?: EnhancedUserRole
    permissions?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    onboardingCompleted?: boolean
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdChats?: ChatUncheckedCreateNestedManyWithoutCreatorInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AgencyAuditLogUncheckedCreateNestedManyWithoutUserInput
    serviceRequests?: ServiceRequestUncheckedCreateNestedManyWithoutUserInput
    providerReviews?: ProviderReviewUncheckedCreateNestedManyWithoutReviewerInput
    serviceReviews?: ServiceReviewUncheckedCreateNestedManyWithoutReviewerInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumEnhancedUserRoleFieldUpdateOperationsInput | EnhancedUserRole
    permissions?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agency?: AgencyUpdateOneRequiredWithoutUsersNestedInput
    createdChats?: ChatUpdateManyWithoutCreatorNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    auditLogs?: AgencyAuditLogUpdateManyWithoutUserNestedInput
    serviceRequests?: ServiceRequestUpdateManyWithoutUserNestedInput
    providerReviews?: ProviderReviewUpdateManyWithoutReviewerNestedInput
    serviceReviews?: ServiceReviewUpdateManyWithoutReviewerNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    role?: EnumEnhancedUserRoleFieldUpdateOperationsInput | EnhancedUserRole
    permissions?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdChats?: ChatUncheckedUpdateManyWithoutCreatorNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AgencyAuditLogUncheckedUpdateManyWithoutUserNestedInput
    serviceRequests?: ServiceRequestUncheckedUpdateManyWithoutUserNestedInput
    providerReviews?: ProviderReviewUncheckedUpdateManyWithoutReviewerNestedInput
    serviceReviews?: ServiceReviewUncheckedUpdateManyWithoutReviewerNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    name?: string | null
    passwordHash: string
    agencyId: string
    role?: EnhancedUserRole
    permissions?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    onboardingCompleted?: boolean
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumEnhancedUserRoleFieldUpdateOperationsInput | EnhancedUserRole
    permissions?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    role?: EnumEnhancedUserRoleFieldUpdateOperationsInput | EnhancedUserRole
    permissions?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatCreateInput = {
    id?: string
    title?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    agency: AgencyCreateNestedOneWithoutChatsInput
    creator: UserCreateNestedOneWithoutCreatedChatsInput
  }

  export type ChatUncheckedCreateInput = {
    id?: string
    agencyId: string
    title?: string | null
    createdBy: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChatUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agency?: AgencyUpdateOneRequiredWithoutChatsNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedChatsNestedInput
  }

  export type ChatUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatCreateManyInput = {
    id?: string
    agencyId: string
    title?: string | null
    createdBy: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChatUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateInput = {
    id?: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
    agency: AgencyCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    userId: string
    agencyId: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
    agency?: AgencyUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: string
    userId: string
    agencyId: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SwarmExecutionCreateInput = {
    id?: string
    serviceRequestId?: string | null
    status?: SwarmExecutionStatus
    qualityScore?: number | null
    activeAgents: JsonNullValueInput | InputJsonValue
    executionPlan: JsonNullValueInput | InputJsonValue
    results?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string
    completedAt?: Date | string | null
    agency: AgencyCreateNestedOneWithoutSwarmExecutionsInput
    executionSteps?: ExecutionStepCreateNestedManyWithoutSwarmExecutionInput
    messages?: SwarmMessageCreateNestedManyWithoutSwarmExecutionInput
  }

  export type SwarmExecutionUncheckedCreateInput = {
    id?: string
    serviceRequestId?: string | null
    agencyId: string
    status?: SwarmExecutionStatus
    qualityScore?: number | null
    activeAgents: JsonNullValueInput | InputJsonValue
    executionPlan: JsonNullValueInput | InputJsonValue
    results?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string
    completedAt?: Date | string | null
    executionSteps?: ExecutionStepUncheckedCreateNestedManyWithoutSwarmExecutionInput
    messages?: SwarmMessageUncheckedCreateNestedManyWithoutSwarmExecutionInput
  }

  export type SwarmExecutionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceRequestId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSwarmExecutionStatusFieldUpdateOperationsInput | SwarmExecutionStatus
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    activeAgents?: JsonNullValueInput | InputJsonValue
    executionPlan?: JsonNullValueInput | InputJsonValue
    results?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agency?: AgencyUpdateOneRequiredWithoutSwarmExecutionsNestedInput
    executionSteps?: ExecutionStepUpdateManyWithoutSwarmExecutionNestedInput
    messages?: SwarmMessageUpdateManyWithoutSwarmExecutionNestedInput
  }

  export type SwarmExecutionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceRequestId?: NullableStringFieldUpdateOperationsInput | string | null
    agencyId?: StringFieldUpdateOperationsInput | string
    status?: EnumSwarmExecutionStatusFieldUpdateOperationsInput | SwarmExecutionStatus
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    activeAgents?: JsonNullValueInput | InputJsonValue
    executionPlan?: JsonNullValueInput | InputJsonValue
    results?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    executionSteps?: ExecutionStepUncheckedUpdateManyWithoutSwarmExecutionNestedInput
    messages?: SwarmMessageUncheckedUpdateManyWithoutSwarmExecutionNestedInput
  }

  export type SwarmExecutionCreateManyInput = {
    id?: string
    serviceRequestId?: string | null
    agencyId: string
    status?: SwarmExecutionStatus
    qualityScore?: number | null
    activeAgents: JsonNullValueInput | InputJsonValue
    executionPlan: JsonNullValueInput | InputJsonValue
    results?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string
    completedAt?: Date | string | null
  }

  export type SwarmExecutionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceRequestId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSwarmExecutionStatusFieldUpdateOperationsInput | SwarmExecutionStatus
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    activeAgents?: JsonNullValueInput | InputJsonValue
    executionPlan?: JsonNullValueInput | InputJsonValue
    results?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SwarmExecutionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceRequestId?: NullableStringFieldUpdateOperationsInput | string | null
    agencyId?: StringFieldUpdateOperationsInput | string
    status?: EnumSwarmExecutionStatusFieldUpdateOperationsInput | SwarmExecutionStatus
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    activeAgents?: JsonNullValueInput | InputJsonValue
    executionPlan?: JsonNullValueInput | InputJsonValue
    results?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ExecutionStepCreateInput = {
    id?: string
    stepId: string
    agentId: string
    action: string
    input?: NullableJsonNullValueInput | InputJsonValue
    output?: NullableJsonNullValueInput | InputJsonValue
    status?: ExecutionStepStatus
    qualityScore?: number | null
    confidence?: number | null
    startedAt?: Date | string
    completedAt?: Date | string | null
    swarmExecution: SwarmExecutionCreateNestedOneWithoutExecutionStepsInput
  }

  export type ExecutionStepUncheckedCreateInput = {
    id?: string
    swarmExecutionId: string
    stepId: string
    agentId: string
    action: string
    input?: NullableJsonNullValueInput | InputJsonValue
    output?: NullableJsonNullValueInput | InputJsonValue
    status?: ExecutionStepStatus
    qualityScore?: number | null
    confidence?: number | null
    startedAt?: Date | string
    completedAt?: Date | string | null
  }

  export type ExecutionStepUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    stepId?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    input?: NullableJsonNullValueInput | InputJsonValue
    output?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumExecutionStepStatusFieldUpdateOperationsInput | ExecutionStepStatus
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    swarmExecution?: SwarmExecutionUpdateOneRequiredWithoutExecutionStepsNestedInput
  }

  export type ExecutionStepUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    swarmExecutionId?: StringFieldUpdateOperationsInput | string
    stepId?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    input?: NullableJsonNullValueInput | InputJsonValue
    output?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumExecutionStepStatusFieldUpdateOperationsInput | ExecutionStepStatus
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ExecutionStepCreateManyInput = {
    id?: string
    swarmExecutionId: string
    stepId: string
    agentId: string
    action: string
    input?: NullableJsonNullValueInput | InputJsonValue
    output?: NullableJsonNullValueInput | InputJsonValue
    status?: ExecutionStepStatus
    qualityScore?: number | null
    confidence?: number | null
    startedAt?: Date | string
    completedAt?: Date | string | null
  }

  export type ExecutionStepUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    stepId?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    input?: NullableJsonNullValueInput | InputJsonValue
    output?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumExecutionStepStatusFieldUpdateOperationsInput | ExecutionStepStatus
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ExecutionStepUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    swarmExecutionId?: StringFieldUpdateOperationsInput | string
    stepId?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    input?: NullableJsonNullValueInput | InputJsonValue
    output?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumExecutionStepStatusFieldUpdateOperationsInput | ExecutionStepStatus
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SwarmMessageCreateInput = {
    id?: string
    fromAgentId: string
    toAgentId?: string | null
    type?: MessageType
    priority?: MessagePriority
    content: JsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    status?: MessageStatus
    processedAt?: Date | string | null
    createdAt?: Date | string
    swarmExecution: SwarmExecutionCreateNestedOneWithoutMessagesInput
  }

  export type SwarmMessageUncheckedCreateInput = {
    id?: string
    swarmExecutionId: string
    fromAgentId: string
    toAgentId?: string | null
    type?: MessageType
    priority?: MessagePriority
    content: JsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    status?: MessageStatus
    processedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type SwarmMessageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromAgentId?: StringFieldUpdateOperationsInput | string
    toAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumMessageTypeFieldUpdateOperationsInput | MessageType
    priority?: EnumMessagePriorityFieldUpdateOperationsInput | MessagePriority
    content?: JsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumMessageStatusFieldUpdateOperationsInput | MessageStatus
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    swarmExecution?: SwarmExecutionUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type SwarmMessageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    swarmExecutionId?: StringFieldUpdateOperationsInput | string
    fromAgentId?: StringFieldUpdateOperationsInput | string
    toAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumMessageTypeFieldUpdateOperationsInput | MessageType
    priority?: EnumMessagePriorityFieldUpdateOperationsInput | MessagePriority
    content?: JsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumMessageStatusFieldUpdateOperationsInput | MessageStatus
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SwarmMessageCreateManyInput = {
    id?: string
    swarmExecutionId: string
    fromAgentId: string
    toAgentId?: string | null
    type?: MessageType
    priority?: MessagePriority
    content: JsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    status?: MessageStatus
    processedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type SwarmMessageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromAgentId?: StringFieldUpdateOperationsInput | string
    toAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumMessageTypeFieldUpdateOperationsInput | MessageType
    priority?: EnumMessagePriorityFieldUpdateOperationsInput | MessagePriority
    content?: JsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumMessageStatusFieldUpdateOperationsInput | MessageStatus
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SwarmMessageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    swarmExecutionId?: StringFieldUpdateOperationsInput | string
    fromAgentId?: StringFieldUpdateOperationsInput | string
    toAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumMessageTypeFieldUpdateOperationsInput | MessageType
    priority?: EnumMessagePriorityFieldUpdateOperationsInput | MessagePriority
    content?: JsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumMessageStatusFieldUpdateOperationsInput | MessageStatus
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceCategoryCreateInput = {
    id?: string
    name: string
    description?: string | null
    slug: string
    isActive?: boolean
    requiresApproval?: boolean
    estimatedDuration?: number | null
    basePricing?: NullableJsonNullValueInput | InputJsonValue
    complexityFactors?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: ServiceCategoryCreateNestedOneWithoutChildrenInput
    children?: ServiceCategoryCreateNestedManyWithoutParentInput
    serviceRequests?: ServiceRequestCreateNestedManyWithoutCategoryInput
    providers?: ServiceProviderCreateNestedManyWithoutCategoryInput
  }

  export type ServiceCategoryUncheckedCreateInput = {
    id?: string
    parentId?: string | null
    name: string
    description?: string | null
    slug: string
    isActive?: boolean
    requiresApproval?: boolean
    estimatedDuration?: number | null
    basePricing?: NullableJsonNullValueInput | InputJsonValue
    complexityFactors?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: ServiceCategoryUncheckedCreateNestedManyWithoutParentInput
    serviceRequests?: ServiceRequestUncheckedCreateNestedManyWithoutCategoryInput
    providers?: ServiceProviderUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type ServiceCategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    basePricing?: NullableJsonNullValueInput | InputJsonValue
    complexityFactors?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: ServiceCategoryUpdateOneWithoutChildrenNestedInput
    children?: ServiceCategoryUpdateManyWithoutParentNestedInput
    serviceRequests?: ServiceRequestUpdateManyWithoutCategoryNestedInput
    providers?: ServiceProviderUpdateManyWithoutCategoryNestedInput
  }

  export type ServiceCategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    basePricing?: NullableJsonNullValueInput | InputJsonValue
    complexityFactors?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: ServiceCategoryUncheckedUpdateManyWithoutParentNestedInput
    serviceRequests?: ServiceRequestUncheckedUpdateManyWithoutCategoryNestedInput
    providers?: ServiceProviderUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type ServiceCategoryCreateManyInput = {
    id?: string
    parentId?: string | null
    name: string
    description?: string | null
    slug: string
    isActive?: boolean
    requiresApproval?: boolean
    estimatedDuration?: number | null
    basePricing?: NullableJsonNullValueInput | InputJsonValue
    complexityFactors?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServiceCategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    basePricing?: NullableJsonNullValueInput | InputJsonValue
    complexityFactors?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceCategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    basePricing?: NullableJsonNullValueInput | InputJsonValue
    complexityFactors?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceProviderCreateInput = {
    id?: string
    agentId: string
    capabilities: JsonNullValueInput | InputJsonValue
    qualityRating?: number
    completionRate?: number
    averageRating?: number
    totalCompletions?: number
    isActive?: boolean
    maxConcurrent?: number
    currentLoad?: number
    pricingOverride?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    agency: AgencyCreateNestedOneWithoutServiceProvidersInput
    category: ServiceCategoryCreateNestedOneWithoutProvidersInput
    serviceRequests?: ServiceRequestCreateNestedManyWithoutProviderInput
    reviews?: ProviderReviewCreateNestedManyWithoutProviderInput
  }

  export type ServiceProviderUncheckedCreateInput = {
    id?: string
    agencyId: string
    agentId: string
    categoryId: string
    capabilities: JsonNullValueInput | InputJsonValue
    qualityRating?: number
    completionRate?: number
    averageRating?: number
    totalCompletions?: number
    isActive?: boolean
    maxConcurrent?: number
    currentLoad?: number
    pricingOverride?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    serviceRequests?: ServiceRequestUncheckedCreateNestedManyWithoutProviderInput
    reviews?: ProviderReviewUncheckedCreateNestedManyWithoutProviderInput
  }

  export type ServiceProviderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    capabilities?: JsonNullValueInput | InputJsonValue
    qualityRating?: FloatFieldUpdateOperationsInput | number
    completionRate?: FloatFieldUpdateOperationsInput | number
    averageRating?: FloatFieldUpdateOperationsInput | number
    totalCompletions?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    maxConcurrent?: IntFieldUpdateOperationsInput | number
    currentLoad?: IntFieldUpdateOperationsInput | number
    pricingOverride?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agency?: AgencyUpdateOneRequiredWithoutServiceProvidersNestedInput
    category?: ServiceCategoryUpdateOneRequiredWithoutProvidersNestedInput
    serviceRequests?: ServiceRequestUpdateManyWithoutProviderNestedInput
    reviews?: ProviderReviewUpdateManyWithoutProviderNestedInput
  }

  export type ServiceProviderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    capabilities?: JsonNullValueInput | InputJsonValue
    qualityRating?: FloatFieldUpdateOperationsInput | number
    completionRate?: FloatFieldUpdateOperationsInput | number
    averageRating?: FloatFieldUpdateOperationsInput | number
    totalCompletions?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    maxConcurrent?: IntFieldUpdateOperationsInput | number
    currentLoad?: IntFieldUpdateOperationsInput | number
    pricingOverride?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceRequests?: ServiceRequestUncheckedUpdateManyWithoutProviderNestedInput
    reviews?: ProviderReviewUncheckedUpdateManyWithoutProviderNestedInput
  }

  export type ServiceProviderCreateManyInput = {
    id?: string
    agencyId: string
    agentId: string
    categoryId: string
    capabilities: JsonNullValueInput | InputJsonValue
    qualityRating?: number
    completionRate?: number
    averageRating?: number
    totalCompletions?: number
    isActive?: boolean
    maxConcurrent?: number
    currentLoad?: number
    pricingOverride?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServiceProviderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    capabilities?: JsonNullValueInput | InputJsonValue
    qualityRating?: FloatFieldUpdateOperationsInput | number
    completionRate?: FloatFieldUpdateOperationsInput | number
    averageRating?: FloatFieldUpdateOperationsInput | number
    totalCompletions?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    maxConcurrent?: IntFieldUpdateOperationsInput | number
    currentLoad?: IntFieldUpdateOperationsInput | number
    pricingOverride?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceProviderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    capabilities?: JsonNullValueInput | InputJsonValue
    qualityRating?: FloatFieldUpdateOperationsInput | number
    completionRate?: FloatFieldUpdateOperationsInput | number
    averageRating?: FloatFieldUpdateOperationsInput | number
    totalCompletions?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    maxConcurrent?: IntFieldUpdateOperationsInput | number
    currentLoad?: IntFieldUpdateOperationsInput | number
    pricingOverride?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceRequestCreateInput = {
    id?: string
    title: string
    description: string
    requirements?: NullableJsonNullValueInput | InputJsonValue
    status?: ServiceRequestStatus
    priority?: RequestPriority
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    qualityScore?: number | null
    clientSatisfaction?: number | null
    requestedAt?: Date | string
    assignedAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate?: Date | string | null
    deliverables?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
    agency: AgencyCreateNestedOneWithoutServiceRequestsInput
    user: UserCreateNestedOneWithoutServiceRequestsInput
    category: ServiceCategoryCreateNestedOneWithoutServiceRequestsInput
    provider?: ServiceProviderCreateNestedOneWithoutServiceRequestsInput
    reviews?: ServiceReviewCreateNestedManyWithoutServiceRequestInput
  }

  export type ServiceRequestUncheckedCreateInput = {
    id?: string
    agencyId: string
    userId: string
    categoryId: string
    providerId?: string | null
    title: string
    description: string
    requirements?: NullableJsonNullValueInput | InputJsonValue
    status?: ServiceRequestStatus
    priority?: RequestPriority
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    qualityScore?: number | null
    clientSatisfaction?: number | null
    requestedAt?: Date | string
    assignedAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate?: Date | string | null
    deliverables?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
    reviews?: ServiceReviewUncheckedCreateNestedManyWithoutServiceRequestInput
  }

  export type ServiceRequestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requirements?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumServiceRequestStatusFieldUpdateOperationsInput | ServiceRequestStatus
    priority?: EnumRequestPriorityFieldUpdateOperationsInput | RequestPriority
    estimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    clientSatisfaction?: NullableFloatFieldUpdateOperationsInput | number | null
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliverables?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    agency?: AgencyUpdateOneRequiredWithoutServiceRequestsNestedInput
    user?: UserUpdateOneRequiredWithoutServiceRequestsNestedInput
    category?: ServiceCategoryUpdateOneRequiredWithoutServiceRequestsNestedInput
    provider?: ServiceProviderUpdateOneWithoutServiceRequestsNestedInput
    reviews?: ServiceReviewUpdateManyWithoutServiceRequestNestedInput
  }

  export type ServiceRequestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requirements?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumServiceRequestStatusFieldUpdateOperationsInput | ServiceRequestStatus
    priority?: EnumRequestPriorityFieldUpdateOperationsInput | RequestPriority
    estimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    clientSatisfaction?: NullableFloatFieldUpdateOperationsInput | number | null
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliverables?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reviews?: ServiceReviewUncheckedUpdateManyWithoutServiceRequestNestedInput
  }

  export type ServiceRequestCreateManyInput = {
    id?: string
    agencyId: string
    userId: string
    categoryId: string
    providerId?: string | null
    title: string
    description: string
    requirements?: NullableJsonNullValueInput | InputJsonValue
    status?: ServiceRequestStatus
    priority?: RequestPriority
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    qualityScore?: number | null
    clientSatisfaction?: number | null
    requestedAt?: Date | string
    assignedAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate?: Date | string | null
    deliverables?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
  }

  export type ServiceRequestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requirements?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumServiceRequestStatusFieldUpdateOperationsInput | ServiceRequestStatus
    priority?: EnumRequestPriorityFieldUpdateOperationsInput | RequestPriority
    estimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    clientSatisfaction?: NullableFloatFieldUpdateOperationsInput | number | null
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliverables?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ServiceRequestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requirements?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumServiceRequestStatusFieldUpdateOperationsInput | ServiceRequestStatus
    priority?: EnumRequestPriorityFieldUpdateOperationsInput | RequestPriority
    estimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    clientSatisfaction?: NullableFloatFieldUpdateOperationsInput | number | null
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliverables?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProviderReviewCreateInput = {
    id?: string
    rating: number
    comment?: string | null
    criteria?: NullableJsonNullValueInput | InputJsonValue
    serviceType?: string | null
    createdAt?: Date | string
    provider: ServiceProviderCreateNestedOneWithoutReviewsInput
    reviewer: UserCreateNestedOneWithoutProviderReviewsInput
  }

  export type ProviderReviewUncheckedCreateInput = {
    id?: string
    providerId: string
    reviewerId: string
    rating: number
    comment?: string | null
    criteria?: NullableJsonNullValueInput | InputJsonValue
    serviceType?: string | null
    createdAt?: Date | string
  }

  export type ProviderReviewUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    criteria?: NullableJsonNullValueInput | InputJsonValue
    serviceType?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: ServiceProviderUpdateOneRequiredWithoutReviewsNestedInput
    reviewer?: UserUpdateOneRequiredWithoutProviderReviewsNestedInput
  }

  export type ProviderReviewUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    reviewerId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    criteria?: NullableJsonNullValueInput | InputJsonValue
    serviceType?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProviderReviewCreateManyInput = {
    id?: string
    providerId: string
    reviewerId: string
    rating: number
    comment?: string | null
    criteria?: NullableJsonNullValueInput | InputJsonValue
    serviceType?: string | null
    createdAt?: Date | string
  }

  export type ProviderReviewUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    criteria?: NullableJsonNullValueInput | InputJsonValue
    serviceType?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProviderReviewUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    reviewerId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    criteria?: NullableJsonNullValueInput | InputJsonValue
    serviceType?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceReviewCreateInput = {
    id?: string
    overallRating: number
    qualityRating?: number | null
    speedRating?: number | null
    communicationRating?: number | null
    comment?: string | null
    recommendations?: string | null
    createdAt?: Date | string
    serviceRequest: ServiceRequestCreateNestedOneWithoutReviewsInput
    reviewer: UserCreateNestedOneWithoutServiceReviewsInput
  }

  export type ServiceReviewUncheckedCreateInput = {
    id?: string
    serviceRequestId: string
    reviewerId: string
    overallRating: number
    qualityRating?: number | null
    speedRating?: number | null
    communicationRating?: number | null
    comment?: string | null
    recommendations?: string | null
    createdAt?: Date | string
  }

  export type ServiceReviewUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    overallRating?: IntFieldUpdateOperationsInput | number
    qualityRating?: NullableIntFieldUpdateOperationsInput | number | null
    speedRating?: NullableIntFieldUpdateOperationsInput | number | null
    communicationRating?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceRequest?: ServiceRequestUpdateOneRequiredWithoutReviewsNestedInput
    reviewer?: UserUpdateOneRequiredWithoutServiceReviewsNestedInput
  }

  export type ServiceReviewUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceRequestId?: StringFieldUpdateOperationsInput | string
    reviewerId?: StringFieldUpdateOperationsInput | string
    overallRating?: IntFieldUpdateOperationsInput | number
    qualityRating?: NullableIntFieldUpdateOperationsInput | number | null
    speedRating?: NullableIntFieldUpdateOperationsInput | number | null
    communicationRating?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceReviewCreateManyInput = {
    id?: string
    serviceRequestId: string
    reviewerId: string
    overallRating: number
    qualityRating?: number | null
    speedRating?: number | null
    communicationRating?: number | null
    comment?: string | null
    recommendations?: string | null
    createdAt?: Date | string
  }

  export type ServiceReviewUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    overallRating?: IntFieldUpdateOperationsInput | number
    qualityRating?: NullableIntFieldUpdateOperationsInput | number | null
    speedRating?: NullableIntFieldUpdateOperationsInput | number | null
    communicationRating?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceReviewUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceRequestId?: StringFieldUpdateOperationsInput | string
    reviewerId?: StringFieldUpdateOperationsInput | string
    overallRating?: IntFieldUpdateOperationsInput | number
    qualityRating?: NullableIntFieldUpdateOperationsInput | number | null
    speedRating?: NullableIntFieldUpdateOperationsInput | number | null
    communicationRating?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgencySubscriptionCreateInput = {
    id?: string
    tier: AgencyTier
    status?: SubscriptionStatus
    billingCycle?: BillingCycle
    pricePerMonth: Decimal | DecimalJsLike | number | string
    currency?: string
    startedAt?: Date | string
    endsAt?: Date | string | null
    renewedAt?: Date | string | null
    cancelledAt?: Date | string | null
    stripeSubscriptionId?: string | null
    paymentMethodId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    agency: AgencyCreateNestedOneWithoutSubscriptionsInput
  }

  export type AgencySubscriptionUncheckedCreateInput = {
    id?: string
    agencyId: string
    tier: AgencyTier
    status?: SubscriptionStatus
    billingCycle?: BillingCycle
    pricePerMonth: Decimal | DecimalJsLike | number | string
    currency?: string
    startedAt?: Date | string
    endsAt?: Date | string | null
    renewedAt?: Date | string | null
    cancelledAt?: Date | string | null
    stripeSubscriptionId?: string | null
    paymentMethodId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AgencySubscriptionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tier?: EnumAgencyTierFieldUpdateOperationsInput | AgencyTier
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | SubscriptionStatus
    billingCycle?: EnumBillingCycleFieldUpdateOperationsInput | BillingCycle
    pricePerMonth?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    renewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentMethodId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agency?: AgencyUpdateOneRequiredWithoutSubscriptionsNestedInput
  }

  export type AgencySubscriptionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    tier?: EnumAgencyTierFieldUpdateOperationsInput | AgencyTier
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | SubscriptionStatus
    billingCycle?: EnumBillingCycleFieldUpdateOperationsInput | BillingCycle
    pricePerMonth?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    renewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentMethodId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgencySubscriptionCreateManyInput = {
    id?: string
    agencyId: string
    tier: AgencyTier
    status?: SubscriptionStatus
    billingCycle?: BillingCycle
    pricePerMonth: Decimal | DecimalJsLike | number | string
    currency?: string
    startedAt?: Date | string
    endsAt?: Date | string | null
    renewedAt?: Date | string | null
    cancelledAt?: Date | string | null
    stripeSubscriptionId?: string | null
    paymentMethodId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AgencySubscriptionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tier?: EnumAgencyTierFieldUpdateOperationsInput | AgencyTier
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | SubscriptionStatus
    billingCycle?: EnumBillingCycleFieldUpdateOperationsInput | BillingCycle
    pricePerMonth?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    renewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentMethodId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgencySubscriptionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    tier?: EnumAgencyTierFieldUpdateOperationsInput | AgencyTier
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | SubscriptionStatus
    billingCycle?: EnumBillingCycleFieldUpdateOperationsInput | BillingCycle
    pricePerMonth?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    renewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentMethodId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgencyAuditLogCreateInput = {
    id?: string
    action: string
    entityType: string
    entityId?: string | null
    changes?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    agency: AgencyCreateNestedOneWithoutAuditLogsInput
    user?: UserCreateNestedOneWithoutAuditLogsInput
  }

  export type AgencyAuditLogUncheckedCreateInput = {
    id?: string
    agencyId: string
    userId?: string | null
    action: string
    entityType: string
    entityId?: string | null
    changes?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AgencyAuditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    changes?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agency?: AgencyUpdateOneRequiredWithoutAuditLogsNestedInput
    user?: UserUpdateOneWithoutAuditLogsNestedInput
  }

  export type AgencyAuditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    changes?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgencyAuditLogCreateManyInput = {
    id?: string
    agencyId: string
    userId?: string | null
    action: string
    entityType: string
    entityId?: string | null
    changes?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AgencyAuditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    changes?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgencyAuditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    changes?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type EnumTaskStatusFilter = {
    equals?: TaskStatus
    in?: Enumerable<TaskStatus>
    notIn?: Enumerable<TaskStatus>
    not?: NestedEnumTaskStatusFilter | TaskStatus
  }

  export type EnumTaskPriorityFilter = {
    equals?: TaskPriority
    in?: Enumerable<TaskPriority>
    notIn?: Enumerable<TaskPriority>
    not?: NestedEnumTaskPriorityFilter | TaskPriority
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }
  export type JsonNullableFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase>, Exclude<keyof Required<JsonNullableFilterBase>, 'path'>>,
        Required<JsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase>, 'path'>>

  export type JsonNullableFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string[]
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type StringNullableListFilter = {
    equals?: Enumerable<string> | null
    has?: string | null
    hasEvery?: Enumerable<string>
    hasSome?: Enumerable<string>
    isEmpty?: boolean
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type TaskCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dueDate?: SortOrder
    assignedTo?: SortOrder
    createdBy?: SortOrder
    metadata?: SortOrder
    tags?: SortOrder
    dependencies?: SortOrder
    error?: SortOrder
    completedAt?: SortOrder
  }

  export type TaskMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dueDate?: SortOrder
    assignedTo?: SortOrder
    createdBy?: SortOrder
    error?: SortOrder
    completedAt?: SortOrder
  }

  export type TaskMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dueDate?: SortOrder
    assignedTo?: SortOrder
    createdBy?: SortOrder
    error?: SortOrder
    completedAt?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type EnumTaskStatusWithAggregatesFilter = {
    equals?: TaskStatus
    in?: Enumerable<TaskStatus>
    notIn?: Enumerable<TaskStatus>
    not?: NestedEnumTaskStatusWithAggregatesFilter | TaskStatus
    _count?: NestedIntFilter
    _min?: NestedEnumTaskStatusFilter
    _max?: NestedEnumTaskStatusFilter
  }

  export type EnumTaskPriorityWithAggregatesFilter = {
    equals?: TaskPriority
    in?: Enumerable<TaskPriority>
    notIn?: Enumerable<TaskPriority>
    not?: NestedEnumTaskPriorityWithAggregatesFilter | TaskPriority
    _count?: NestedIntFilter
    _min?: NestedEnumTaskPriorityFilter
    _max?: NestedEnumTaskPriorityFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }
  export type JsonNullableWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string[]
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
    _count?: NestedIntNullableFilter
    _min?: NestedJsonNullableFilter
    _max?: NestedJsonNullableFilter
  }

  export type EnumAgentStatusFilter = {
    equals?: AgentStatus
    in?: Enumerable<AgentStatus>
    notIn?: Enumerable<AgentStatus>
    not?: NestedEnumAgentStatusFilter | AgentStatus
  }

  export type AgentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    type?: SortOrder
    status?: SortOrder
    capabilities?: SortOrder
    provider?: SortOrder
    lastActive?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    agencyId?: SortOrder
  }

  export type AgentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    type?: SortOrder
    status?: SortOrder
    provider?: SortOrder
    lastActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    agencyId?: SortOrder
  }

  export type AgentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    type?: SortOrder
    status?: SortOrder
    provider?: SortOrder
    lastActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    agencyId?: SortOrder
  }

  export type EnumAgentStatusWithAggregatesFilter = {
    equals?: AgentStatus
    in?: Enumerable<AgentStatus>
    notIn?: Enumerable<AgentStatus>
    not?: NestedEnumAgentStatusWithAggregatesFilter | AgentStatus
    _count?: NestedIntFilter
    _min?: NestedEnumAgentStatusFilter
    _max?: NestedEnumAgentStatusFilter
  }

  export type EnumAgencyTierFilter = {
    equals?: AgencyTier
    in?: Enumerable<AgencyTier>
    notIn?: Enumerable<AgencyTier>
    not?: NestedEnumAgencyTierFilter | AgencyTier
  }

  export type EnumSubscriptionStatusFilter = {
    equals?: SubscriptionStatus
    in?: Enumerable<SubscriptionStatus>
    notIn?: Enumerable<SubscriptionStatus>
    not?: NestedEnumSubscriptionStatusFilter | SubscriptionStatus
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type ChatListRelationFilter = {
    every?: ChatWhereInput
    some?: ChatWhereInput
    none?: ChatWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type AgencySubscriptionListRelationFilter = {
    every?: AgencySubscriptionWhereInput
    some?: AgencySubscriptionWhereInput
    none?: AgencySubscriptionWhereInput
  }

  export type AgencyAuditLogListRelationFilter = {
    every?: AgencyAuditLogWhereInput
    some?: AgencyAuditLogWhereInput
    none?: AgencyAuditLogWhereInput
  }

  export type SwarmExecutionListRelationFilter = {
    every?: SwarmExecutionWhereInput
    some?: SwarmExecutionWhereInput
    none?: SwarmExecutionWhereInput
  }

  export type ServiceRequestListRelationFilter = {
    every?: ServiceRequestWhereInput
    some?: ServiceRequestWhereInput
    none?: ServiceRequestWhereInput
  }

  export type ServiceProviderListRelationFilter = {
    every?: ServiceProviderWhereInput
    some?: ServiceProviderWhereInput
    none?: ServiceProviderWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChatOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AgencySubscriptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AgencyAuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SwarmExecutionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ServiceRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ServiceProviderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AgencyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    subdomain?: SortOrder
    slug?: SortOrder
    subscriptionTier?: SortOrder
    subscriptionStatus?: SortOrder
    billingEmail?: SortOrder
    branding?: SortOrder
    settings?: SortOrder
    userLimit?: SortOrder
    agentLimit?: SortOrder
    storageLimit?: SortOrder
    isActive?: SortOrder
    trialEndsAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AgencyAvgOrderByAggregateInput = {
    userLimit?: SortOrder
    agentLimit?: SortOrder
    storageLimit?: SortOrder
  }

  export type AgencyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    subdomain?: SortOrder
    slug?: SortOrder
    subscriptionTier?: SortOrder
    subscriptionStatus?: SortOrder
    billingEmail?: SortOrder
    userLimit?: SortOrder
    agentLimit?: SortOrder
    storageLimit?: SortOrder
    isActive?: SortOrder
    trialEndsAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AgencyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    subdomain?: SortOrder
    slug?: SortOrder
    subscriptionTier?: SortOrder
    subscriptionStatus?: SortOrder
    billingEmail?: SortOrder
    userLimit?: SortOrder
    agentLimit?: SortOrder
    storageLimit?: SortOrder
    isActive?: SortOrder
    trialEndsAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AgencySumOrderByAggregateInput = {
    userLimit?: SortOrder
    agentLimit?: SortOrder
    storageLimit?: SortOrder
  }

  export type EnumAgencyTierWithAggregatesFilter = {
    equals?: AgencyTier
    in?: Enumerable<AgencyTier>
    notIn?: Enumerable<AgencyTier>
    not?: NestedEnumAgencyTierWithAggregatesFilter | AgencyTier
    _count?: NestedIntFilter
    _min?: NestedEnumAgencyTierFilter
    _max?: NestedEnumAgencyTierFilter
  }

  export type EnumSubscriptionStatusWithAggregatesFilter = {
    equals?: SubscriptionStatus
    in?: Enumerable<SubscriptionStatus>
    notIn?: Enumerable<SubscriptionStatus>
    not?: NestedEnumSubscriptionStatusWithAggregatesFilter | SubscriptionStatus
    _count?: NestedIntFilter
    _min?: NestedEnumSubscriptionStatusFilter
    _max?: NestedEnumSubscriptionStatusFilter
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type EnumEnhancedUserRoleFilter = {
    equals?: EnhancedUserRole
    in?: Enumerable<EnhancedUserRole>
    notIn?: Enumerable<EnhancedUserRole>
    not?: NestedEnumEnhancedUserRoleFilter | EnhancedUserRole
  }

  export type AgencyRelationFilter = {
    is?: AgencyWhereInput | null
    isNot?: AgencyWhereInput | null
  }

  export type ProviderReviewListRelationFilter = {
    every?: ProviderReviewWhereInput
    some?: ProviderReviewWhereInput
    none?: ProviderReviewWhereInput
  }

  export type ServiceReviewListRelationFilter = {
    every?: ServiceReviewWhereInput
    some?: ServiceReviewWhereInput
    none?: ServiceReviewWhereInput
  }

  export type ProviderReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ServiceReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserEmailAgencyIdCompoundUniqueInput = {
    email: string
    agencyId: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    passwordHash?: SortOrder
    agencyId?: SortOrder
    role?: SortOrder
    permissions?: SortOrder
    isActive?: SortOrder
    onboardingCompleted?: SortOrder
    emailVerified?: SortOrder
    lastLoginAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    passwordHash?: SortOrder
    agencyId?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    onboardingCompleted?: SortOrder
    emailVerified?: SortOrder
    lastLoginAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    passwordHash?: SortOrder
    agencyId?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    onboardingCompleted?: SortOrder
    emailVerified?: SortOrder
    lastLoginAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumEnhancedUserRoleWithAggregatesFilter = {
    equals?: EnhancedUserRole
    in?: Enumerable<EnhancedUserRole>
    notIn?: Enumerable<EnhancedUserRole>
    not?: NestedEnumEnhancedUserRoleWithAggregatesFilter | EnhancedUserRole
    _count?: NestedIntFilter
    _min?: NestedEnumEnhancedUserRoleFilter
    _max?: NestedEnumEnhancedUserRoleFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type ChatCountOrderByAggregateInput = {
    id?: SortOrder
    agencyId?: SortOrder
    title?: SortOrder
    createdBy?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChatMaxOrderByAggregateInput = {
    id?: SortOrder
    agencyId?: SortOrder
    title?: SortOrder
    createdBy?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChatMinOrderByAggregateInput = {
    id?: SortOrder
    agencyId?: SortOrder
    title?: SortOrder
    createdBy?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    agencyId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    agencyId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    agencyId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumSwarmExecutionStatusFilter = {
    equals?: SwarmExecutionStatus
    in?: Enumerable<SwarmExecutionStatus>
    notIn?: Enumerable<SwarmExecutionStatus>
    not?: NestedEnumSwarmExecutionStatusFilter | SwarmExecutionStatus
  }

  export type FloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }
  export type JsonFilter = 
    | PatchUndefined<
        Either<Required<JsonFilterBase>, Exclude<keyof Required<JsonFilterBase>, 'path'>>,
        Required<JsonFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase>, 'path'>>

  export type JsonFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string[]
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type ExecutionStepListRelationFilter = {
    every?: ExecutionStepWhereInput
    some?: ExecutionStepWhereInput
    none?: ExecutionStepWhereInput
  }

  export type SwarmMessageListRelationFilter = {
    every?: SwarmMessageWhereInput
    some?: SwarmMessageWhereInput
    none?: SwarmMessageWhereInput
  }

  export type ExecutionStepOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SwarmMessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SwarmExecutionCountOrderByAggregateInput = {
    id?: SortOrder
    serviceRequestId?: SortOrder
    agencyId?: SortOrder
    status?: SortOrder
    qualityScore?: SortOrder
    activeAgents?: SortOrder
    executionPlan?: SortOrder
    results?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
  }

  export type SwarmExecutionAvgOrderByAggregateInput = {
    qualityScore?: SortOrder
  }

  export type SwarmExecutionMaxOrderByAggregateInput = {
    id?: SortOrder
    serviceRequestId?: SortOrder
    agencyId?: SortOrder
    status?: SortOrder
    qualityScore?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
  }

  export type SwarmExecutionMinOrderByAggregateInput = {
    id?: SortOrder
    serviceRequestId?: SortOrder
    agencyId?: SortOrder
    status?: SortOrder
    qualityScore?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
  }

  export type SwarmExecutionSumOrderByAggregateInput = {
    qualityScore?: SortOrder
  }

  export type EnumSwarmExecutionStatusWithAggregatesFilter = {
    equals?: SwarmExecutionStatus
    in?: Enumerable<SwarmExecutionStatus>
    notIn?: Enumerable<SwarmExecutionStatus>
    not?: NestedEnumSwarmExecutionStatusWithAggregatesFilter | SwarmExecutionStatus
    _count?: NestedIntFilter
    _min?: NestedEnumSwarmExecutionStatusFilter
    _max?: NestedEnumSwarmExecutionStatusFilter
  }

  export type FloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }
  export type JsonWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase>, Exclude<keyof Required<JsonWithAggregatesFilterBase>, 'path'>>,
        Required<JsonWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase>, 'path'>>

  export type JsonWithAggregatesFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string[]
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
    _count?: NestedIntFilter
    _min?: NestedJsonFilter
    _max?: NestedJsonFilter
  }

  export type EnumExecutionStepStatusFilter = {
    equals?: ExecutionStepStatus
    in?: Enumerable<ExecutionStepStatus>
    notIn?: Enumerable<ExecutionStepStatus>
    not?: NestedEnumExecutionStepStatusFilter | ExecutionStepStatus
  }

  export type SwarmExecutionRelationFilter = {
    is?: SwarmExecutionWhereInput | null
    isNot?: SwarmExecutionWhereInput | null
  }

  export type ExecutionStepCountOrderByAggregateInput = {
    id?: SortOrder
    swarmExecutionId?: SortOrder
    stepId?: SortOrder
    agentId?: SortOrder
    action?: SortOrder
    input?: SortOrder
    output?: SortOrder
    status?: SortOrder
    qualityScore?: SortOrder
    confidence?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
  }

  export type ExecutionStepAvgOrderByAggregateInput = {
    qualityScore?: SortOrder
    confidence?: SortOrder
  }

  export type ExecutionStepMaxOrderByAggregateInput = {
    id?: SortOrder
    swarmExecutionId?: SortOrder
    stepId?: SortOrder
    agentId?: SortOrder
    action?: SortOrder
    status?: SortOrder
    qualityScore?: SortOrder
    confidence?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
  }

  export type ExecutionStepMinOrderByAggregateInput = {
    id?: SortOrder
    swarmExecutionId?: SortOrder
    stepId?: SortOrder
    agentId?: SortOrder
    action?: SortOrder
    status?: SortOrder
    qualityScore?: SortOrder
    confidence?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
  }

  export type ExecutionStepSumOrderByAggregateInput = {
    qualityScore?: SortOrder
    confidence?: SortOrder
  }

  export type EnumExecutionStepStatusWithAggregatesFilter = {
    equals?: ExecutionStepStatus
    in?: Enumerable<ExecutionStepStatus>
    notIn?: Enumerable<ExecutionStepStatus>
    not?: NestedEnumExecutionStepStatusWithAggregatesFilter | ExecutionStepStatus
    _count?: NestedIntFilter
    _min?: NestedEnumExecutionStepStatusFilter
    _max?: NestedEnumExecutionStepStatusFilter
  }

  export type EnumMessageTypeFilter = {
    equals?: MessageType
    in?: Enumerable<MessageType>
    notIn?: Enumerable<MessageType>
    not?: NestedEnumMessageTypeFilter | MessageType
  }

  export type EnumMessagePriorityFilter = {
    equals?: MessagePriority
    in?: Enumerable<MessagePriority>
    notIn?: Enumerable<MessagePriority>
    not?: NestedEnumMessagePriorityFilter | MessagePriority
  }

  export type EnumMessageStatusFilter = {
    equals?: MessageStatus
    in?: Enumerable<MessageStatus>
    notIn?: Enumerable<MessageStatus>
    not?: NestedEnumMessageStatusFilter | MessageStatus
  }

  export type SwarmMessageCountOrderByAggregateInput = {
    id?: SortOrder
    swarmExecutionId?: SortOrder
    fromAgentId?: SortOrder
    toAgentId?: SortOrder
    type?: SortOrder
    priority?: SortOrder
    content?: SortOrder
    metadata?: SortOrder
    status?: SortOrder
    processedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type SwarmMessageMaxOrderByAggregateInput = {
    id?: SortOrder
    swarmExecutionId?: SortOrder
    fromAgentId?: SortOrder
    toAgentId?: SortOrder
    type?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    processedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type SwarmMessageMinOrderByAggregateInput = {
    id?: SortOrder
    swarmExecutionId?: SortOrder
    fromAgentId?: SortOrder
    toAgentId?: SortOrder
    type?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    processedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumMessageTypeWithAggregatesFilter = {
    equals?: MessageType
    in?: Enumerable<MessageType>
    notIn?: Enumerable<MessageType>
    not?: NestedEnumMessageTypeWithAggregatesFilter | MessageType
    _count?: NestedIntFilter
    _min?: NestedEnumMessageTypeFilter
    _max?: NestedEnumMessageTypeFilter
  }

  export type EnumMessagePriorityWithAggregatesFilter = {
    equals?: MessagePriority
    in?: Enumerable<MessagePriority>
    notIn?: Enumerable<MessagePriority>
    not?: NestedEnumMessagePriorityWithAggregatesFilter | MessagePriority
    _count?: NestedIntFilter
    _min?: NestedEnumMessagePriorityFilter
    _max?: NestedEnumMessagePriorityFilter
  }

  export type EnumMessageStatusWithAggregatesFilter = {
    equals?: MessageStatus
    in?: Enumerable<MessageStatus>
    notIn?: Enumerable<MessageStatus>
    not?: NestedEnumMessageStatusWithAggregatesFilter | MessageStatus
    _count?: NestedIntFilter
    _min?: NestedEnumMessageStatusFilter
    _max?: NestedEnumMessageStatusFilter
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type ServiceCategoryRelationFilter = {
    is?: ServiceCategoryWhereInput | null
    isNot?: ServiceCategoryWhereInput | null
  }

  export type ServiceCategoryListRelationFilter = {
    every?: ServiceCategoryWhereInput
    some?: ServiceCategoryWhereInput
    none?: ServiceCategoryWhereInput
  }

  export type ServiceCategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ServiceCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    parentId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    slug?: SortOrder
    isActive?: SortOrder
    requiresApproval?: SortOrder
    estimatedDuration?: SortOrder
    basePricing?: SortOrder
    complexityFactors?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServiceCategoryAvgOrderByAggregateInput = {
    estimatedDuration?: SortOrder
  }

  export type ServiceCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    parentId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    slug?: SortOrder
    isActive?: SortOrder
    requiresApproval?: SortOrder
    estimatedDuration?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServiceCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    parentId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    slug?: SortOrder
    isActive?: SortOrder
    requiresApproval?: SortOrder
    estimatedDuration?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServiceCategorySumOrderByAggregateInput = {
    estimatedDuration?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type ServiceProviderAgencyIdAgentIdCategoryIdCompoundUniqueInput = {
    agencyId: string
    agentId: string
    categoryId: string
  }

  export type ServiceProviderCountOrderByAggregateInput = {
    id?: SortOrder
    agencyId?: SortOrder
    agentId?: SortOrder
    categoryId?: SortOrder
    capabilities?: SortOrder
    qualityRating?: SortOrder
    completionRate?: SortOrder
    averageRating?: SortOrder
    totalCompletions?: SortOrder
    isActive?: SortOrder
    maxConcurrent?: SortOrder
    currentLoad?: SortOrder
    pricingOverride?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServiceProviderAvgOrderByAggregateInput = {
    qualityRating?: SortOrder
    completionRate?: SortOrder
    averageRating?: SortOrder
    totalCompletions?: SortOrder
    maxConcurrent?: SortOrder
    currentLoad?: SortOrder
  }

  export type ServiceProviderMaxOrderByAggregateInput = {
    id?: SortOrder
    agencyId?: SortOrder
    agentId?: SortOrder
    categoryId?: SortOrder
    qualityRating?: SortOrder
    completionRate?: SortOrder
    averageRating?: SortOrder
    totalCompletions?: SortOrder
    isActive?: SortOrder
    maxConcurrent?: SortOrder
    currentLoad?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServiceProviderMinOrderByAggregateInput = {
    id?: SortOrder
    agencyId?: SortOrder
    agentId?: SortOrder
    categoryId?: SortOrder
    qualityRating?: SortOrder
    completionRate?: SortOrder
    averageRating?: SortOrder
    totalCompletions?: SortOrder
    isActive?: SortOrder
    maxConcurrent?: SortOrder
    currentLoad?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServiceProviderSumOrderByAggregateInput = {
    qualityRating?: SortOrder
    completionRate?: SortOrder
    averageRating?: SortOrder
    totalCompletions?: SortOrder
    maxConcurrent?: SortOrder
    currentLoad?: SortOrder
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type EnumServiceRequestStatusFilter = {
    equals?: ServiceRequestStatus
    in?: Enumerable<ServiceRequestStatus>
    notIn?: Enumerable<ServiceRequestStatus>
    not?: NestedEnumServiceRequestStatusFilter | ServiceRequestStatus
  }

  export type EnumRequestPriorityFilter = {
    equals?: RequestPriority
    in?: Enumerable<RequestPriority>
    notIn?: Enumerable<RequestPriority>
    not?: NestedEnumRequestPriorityFilter | RequestPriority
  }

  export type DecimalNullableFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type ServiceProviderRelationFilter = {
    is?: ServiceProviderWhereInput | null
    isNot?: ServiceProviderWhereInput | null
  }

  export type ServiceRequestCountOrderByAggregateInput = {
    id?: SortOrder
    agencyId?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
    providerId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    requirements?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    estimatedCost?: SortOrder
    actualCost?: SortOrder
    qualityScore?: SortOrder
    clientSatisfaction?: SortOrder
    requestedAt?: SortOrder
    assignedAt?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    dueDate?: SortOrder
    deliverables?: SortOrder
    notes?: SortOrder
  }

  export type ServiceRequestAvgOrderByAggregateInput = {
    estimatedCost?: SortOrder
    actualCost?: SortOrder
    qualityScore?: SortOrder
    clientSatisfaction?: SortOrder
  }

  export type ServiceRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    agencyId?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
    providerId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    estimatedCost?: SortOrder
    actualCost?: SortOrder
    qualityScore?: SortOrder
    clientSatisfaction?: SortOrder
    requestedAt?: SortOrder
    assignedAt?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    dueDate?: SortOrder
    notes?: SortOrder
  }

  export type ServiceRequestMinOrderByAggregateInput = {
    id?: SortOrder
    agencyId?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
    providerId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    estimatedCost?: SortOrder
    actualCost?: SortOrder
    qualityScore?: SortOrder
    clientSatisfaction?: SortOrder
    requestedAt?: SortOrder
    assignedAt?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    dueDate?: SortOrder
    notes?: SortOrder
  }

  export type ServiceRequestSumOrderByAggregateInput = {
    estimatedCost?: SortOrder
    actualCost?: SortOrder
    qualityScore?: SortOrder
    clientSatisfaction?: SortOrder
  }

  export type EnumServiceRequestStatusWithAggregatesFilter = {
    equals?: ServiceRequestStatus
    in?: Enumerable<ServiceRequestStatus>
    notIn?: Enumerable<ServiceRequestStatus>
    not?: NestedEnumServiceRequestStatusWithAggregatesFilter | ServiceRequestStatus
    _count?: NestedIntFilter
    _min?: NestedEnumServiceRequestStatusFilter
    _max?: NestedEnumServiceRequestStatusFilter
  }

  export type EnumRequestPriorityWithAggregatesFilter = {
    equals?: RequestPriority
    in?: Enumerable<RequestPriority>
    notIn?: Enumerable<RequestPriority>
    not?: NestedEnumRequestPriorityWithAggregatesFilter | RequestPriority
    _count?: NestedIntFilter
    _min?: NestedEnumRequestPriorityFilter
    _max?: NestedEnumRequestPriorityFilter
  }

  export type DecimalNullableWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter
    _avg?: NestedDecimalNullableFilter
    _sum?: NestedDecimalNullableFilter
    _min?: NestedDecimalNullableFilter
    _max?: NestedDecimalNullableFilter
  }

  export type ProviderReviewCountOrderByAggregateInput = {
    id?: SortOrder
    providerId?: SortOrder
    reviewerId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    criteria?: SortOrder
    serviceType?: SortOrder
    createdAt?: SortOrder
  }

  export type ProviderReviewAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type ProviderReviewMaxOrderByAggregateInput = {
    id?: SortOrder
    providerId?: SortOrder
    reviewerId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    serviceType?: SortOrder
    createdAt?: SortOrder
  }

  export type ProviderReviewMinOrderByAggregateInput = {
    id?: SortOrder
    providerId?: SortOrder
    reviewerId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    serviceType?: SortOrder
    createdAt?: SortOrder
  }

  export type ProviderReviewSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type ServiceRequestRelationFilter = {
    is?: ServiceRequestWhereInput | null
    isNot?: ServiceRequestWhereInput | null
  }

  export type ServiceReviewServiceRequestIdReviewerIdCompoundUniqueInput = {
    serviceRequestId: string
    reviewerId: string
  }

  export type ServiceReviewCountOrderByAggregateInput = {
    id?: SortOrder
    serviceRequestId?: SortOrder
    reviewerId?: SortOrder
    overallRating?: SortOrder
    qualityRating?: SortOrder
    speedRating?: SortOrder
    communicationRating?: SortOrder
    comment?: SortOrder
    recommendations?: SortOrder
    createdAt?: SortOrder
  }

  export type ServiceReviewAvgOrderByAggregateInput = {
    overallRating?: SortOrder
    qualityRating?: SortOrder
    speedRating?: SortOrder
    communicationRating?: SortOrder
  }

  export type ServiceReviewMaxOrderByAggregateInput = {
    id?: SortOrder
    serviceRequestId?: SortOrder
    reviewerId?: SortOrder
    overallRating?: SortOrder
    qualityRating?: SortOrder
    speedRating?: SortOrder
    communicationRating?: SortOrder
    comment?: SortOrder
    recommendations?: SortOrder
    createdAt?: SortOrder
  }

  export type ServiceReviewMinOrderByAggregateInput = {
    id?: SortOrder
    serviceRequestId?: SortOrder
    reviewerId?: SortOrder
    overallRating?: SortOrder
    qualityRating?: SortOrder
    speedRating?: SortOrder
    communicationRating?: SortOrder
    comment?: SortOrder
    recommendations?: SortOrder
    createdAt?: SortOrder
  }

  export type ServiceReviewSumOrderByAggregateInput = {
    overallRating?: SortOrder
    qualityRating?: SortOrder
    speedRating?: SortOrder
    communicationRating?: SortOrder
  }

  export type EnumBillingCycleFilter = {
    equals?: BillingCycle
    in?: Enumerable<BillingCycle>
    notIn?: Enumerable<BillingCycle>
    not?: NestedEnumBillingCycleFilter | BillingCycle
  }

  export type DecimalFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type AgencySubscriptionCountOrderByAggregateInput = {
    id?: SortOrder
    agencyId?: SortOrder
    tier?: SortOrder
    status?: SortOrder
    billingCycle?: SortOrder
    pricePerMonth?: SortOrder
    currency?: SortOrder
    startedAt?: SortOrder
    endsAt?: SortOrder
    renewedAt?: SortOrder
    cancelledAt?: SortOrder
    stripeSubscriptionId?: SortOrder
    paymentMethodId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AgencySubscriptionAvgOrderByAggregateInput = {
    pricePerMonth?: SortOrder
  }

  export type AgencySubscriptionMaxOrderByAggregateInput = {
    id?: SortOrder
    agencyId?: SortOrder
    tier?: SortOrder
    status?: SortOrder
    billingCycle?: SortOrder
    pricePerMonth?: SortOrder
    currency?: SortOrder
    startedAt?: SortOrder
    endsAt?: SortOrder
    renewedAt?: SortOrder
    cancelledAt?: SortOrder
    stripeSubscriptionId?: SortOrder
    paymentMethodId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AgencySubscriptionMinOrderByAggregateInput = {
    id?: SortOrder
    agencyId?: SortOrder
    tier?: SortOrder
    status?: SortOrder
    billingCycle?: SortOrder
    pricePerMonth?: SortOrder
    currency?: SortOrder
    startedAt?: SortOrder
    endsAt?: SortOrder
    renewedAt?: SortOrder
    cancelledAt?: SortOrder
    stripeSubscriptionId?: SortOrder
    paymentMethodId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AgencySubscriptionSumOrderByAggregateInput = {
    pricePerMonth?: SortOrder
  }

  export type EnumBillingCycleWithAggregatesFilter = {
    equals?: BillingCycle
    in?: Enumerable<BillingCycle>
    notIn?: Enumerable<BillingCycle>
    not?: NestedEnumBillingCycleWithAggregatesFilter | BillingCycle
    _count?: NestedIntFilter
    _min?: NestedEnumBillingCycleFilter
    _max?: NestedEnumBillingCycleFilter
  }

  export type DecimalWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter
    _avg?: NestedDecimalFilter
    _sum?: NestedDecimalFilter
    _min?: NestedDecimalFilter
    _max?: NestedDecimalFilter
  }

  export type AgencyAuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    agencyId?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    changes?: SortOrder
    metadata?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type AgencyAuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    agencyId?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type AgencyAuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    agencyId?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type TaskCreatetagsInput = {
    set: Enumerable<string>
  }

  export type TaskCreatedependenciesInput = {
    set: Enumerable<string>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumTaskStatusFieldUpdateOperationsInput = {
    set?: TaskStatus
  }

  export type EnumTaskPriorityFieldUpdateOperationsInput = {
    set?: TaskPriority
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type TaskUpdatetagsInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type TaskUpdatedependenciesInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type AgentCreatecapabilitiesInput = {
    set: Enumerable<string>
  }

  export type EnumAgentStatusFieldUpdateOperationsInput = {
    set?: AgentStatus
  }

  export type AgentUpdatecapabilitiesInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type UserCreateNestedManyWithoutAgencyInput = {
    create?: XOR<Enumerable<UserCreateWithoutAgencyInput>, Enumerable<UserUncheckedCreateWithoutAgencyInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutAgencyInput>
    createMany?: UserCreateManyAgencyInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type ChatCreateNestedManyWithoutAgencyInput = {
    create?: XOR<Enumerable<ChatCreateWithoutAgencyInput>, Enumerable<ChatUncheckedCreateWithoutAgencyInput>>
    connectOrCreate?: Enumerable<ChatCreateOrConnectWithoutAgencyInput>
    createMany?: ChatCreateManyAgencyInputEnvelope
    connect?: Enumerable<ChatWhereUniqueInput>
  }

  export type SessionCreateNestedManyWithoutAgencyInput = {
    create?: XOR<Enumerable<SessionCreateWithoutAgencyInput>, Enumerable<SessionUncheckedCreateWithoutAgencyInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutAgencyInput>
    createMany?: SessionCreateManyAgencyInputEnvelope
    connect?: Enumerable<SessionWhereUniqueInput>
  }

  export type AgencySubscriptionCreateNestedManyWithoutAgencyInput = {
    create?: XOR<Enumerable<AgencySubscriptionCreateWithoutAgencyInput>, Enumerable<AgencySubscriptionUncheckedCreateWithoutAgencyInput>>
    connectOrCreate?: Enumerable<AgencySubscriptionCreateOrConnectWithoutAgencyInput>
    createMany?: AgencySubscriptionCreateManyAgencyInputEnvelope
    connect?: Enumerable<AgencySubscriptionWhereUniqueInput>
  }

  export type AgencyAuditLogCreateNestedManyWithoutAgencyInput = {
    create?: XOR<Enumerable<AgencyAuditLogCreateWithoutAgencyInput>, Enumerable<AgencyAuditLogUncheckedCreateWithoutAgencyInput>>
    connectOrCreate?: Enumerable<AgencyAuditLogCreateOrConnectWithoutAgencyInput>
    createMany?: AgencyAuditLogCreateManyAgencyInputEnvelope
    connect?: Enumerable<AgencyAuditLogWhereUniqueInput>
  }

  export type SwarmExecutionCreateNestedManyWithoutAgencyInput = {
    create?: XOR<Enumerable<SwarmExecutionCreateWithoutAgencyInput>, Enumerable<SwarmExecutionUncheckedCreateWithoutAgencyInput>>
    connectOrCreate?: Enumerable<SwarmExecutionCreateOrConnectWithoutAgencyInput>
    createMany?: SwarmExecutionCreateManyAgencyInputEnvelope
    connect?: Enumerable<SwarmExecutionWhereUniqueInput>
  }

  export type ServiceRequestCreateNestedManyWithoutAgencyInput = {
    create?: XOR<Enumerable<ServiceRequestCreateWithoutAgencyInput>, Enumerable<ServiceRequestUncheckedCreateWithoutAgencyInput>>
    connectOrCreate?: Enumerable<ServiceRequestCreateOrConnectWithoutAgencyInput>
    createMany?: ServiceRequestCreateManyAgencyInputEnvelope
    connect?: Enumerable<ServiceRequestWhereUniqueInput>
  }

  export type ServiceProviderCreateNestedManyWithoutAgencyInput = {
    create?: XOR<Enumerable<ServiceProviderCreateWithoutAgencyInput>, Enumerable<ServiceProviderUncheckedCreateWithoutAgencyInput>>
    connectOrCreate?: Enumerable<ServiceProviderCreateOrConnectWithoutAgencyInput>
    createMany?: ServiceProviderCreateManyAgencyInputEnvelope
    connect?: Enumerable<ServiceProviderWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutAgencyInput = {
    create?: XOR<Enumerable<UserCreateWithoutAgencyInput>, Enumerable<UserUncheckedCreateWithoutAgencyInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutAgencyInput>
    createMany?: UserCreateManyAgencyInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type ChatUncheckedCreateNestedManyWithoutAgencyInput = {
    create?: XOR<Enumerable<ChatCreateWithoutAgencyInput>, Enumerable<ChatUncheckedCreateWithoutAgencyInput>>
    connectOrCreate?: Enumerable<ChatCreateOrConnectWithoutAgencyInput>
    createMany?: ChatCreateManyAgencyInputEnvelope
    connect?: Enumerable<ChatWhereUniqueInput>
  }

  export type SessionUncheckedCreateNestedManyWithoutAgencyInput = {
    create?: XOR<Enumerable<SessionCreateWithoutAgencyInput>, Enumerable<SessionUncheckedCreateWithoutAgencyInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutAgencyInput>
    createMany?: SessionCreateManyAgencyInputEnvelope
    connect?: Enumerable<SessionWhereUniqueInput>
  }

  export type AgencySubscriptionUncheckedCreateNestedManyWithoutAgencyInput = {
    create?: XOR<Enumerable<AgencySubscriptionCreateWithoutAgencyInput>, Enumerable<AgencySubscriptionUncheckedCreateWithoutAgencyInput>>
    connectOrCreate?: Enumerable<AgencySubscriptionCreateOrConnectWithoutAgencyInput>
    createMany?: AgencySubscriptionCreateManyAgencyInputEnvelope
    connect?: Enumerable<AgencySubscriptionWhereUniqueInput>
  }

  export type AgencyAuditLogUncheckedCreateNestedManyWithoutAgencyInput = {
    create?: XOR<Enumerable<AgencyAuditLogCreateWithoutAgencyInput>, Enumerable<AgencyAuditLogUncheckedCreateWithoutAgencyInput>>
    connectOrCreate?: Enumerable<AgencyAuditLogCreateOrConnectWithoutAgencyInput>
    createMany?: AgencyAuditLogCreateManyAgencyInputEnvelope
    connect?: Enumerable<AgencyAuditLogWhereUniqueInput>
  }

  export type SwarmExecutionUncheckedCreateNestedManyWithoutAgencyInput = {
    create?: XOR<Enumerable<SwarmExecutionCreateWithoutAgencyInput>, Enumerable<SwarmExecutionUncheckedCreateWithoutAgencyInput>>
    connectOrCreate?: Enumerable<SwarmExecutionCreateOrConnectWithoutAgencyInput>
    createMany?: SwarmExecutionCreateManyAgencyInputEnvelope
    connect?: Enumerable<SwarmExecutionWhereUniqueInput>
  }

  export type ServiceRequestUncheckedCreateNestedManyWithoutAgencyInput = {
    create?: XOR<Enumerable<ServiceRequestCreateWithoutAgencyInput>, Enumerable<ServiceRequestUncheckedCreateWithoutAgencyInput>>
    connectOrCreate?: Enumerable<ServiceRequestCreateOrConnectWithoutAgencyInput>
    createMany?: ServiceRequestCreateManyAgencyInputEnvelope
    connect?: Enumerable<ServiceRequestWhereUniqueInput>
  }

  export type ServiceProviderUncheckedCreateNestedManyWithoutAgencyInput = {
    create?: XOR<Enumerable<ServiceProviderCreateWithoutAgencyInput>, Enumerable<ServiceProviderUncheckedCreateWithoutAgencyInput>>
    connectOrCreate?: Enumerable<ServiceProviderCreateOrConnectWithoutAgencyInput>
    createMany?: ServiceProviderCreateManyAgencyInputEnvelope
    connect?: Enumerable<ServiceProviderWhereUniqueInput>
  }

  export type EnumAgencyTierFieldUpdateOperationsInput = {
    set?: AgencyTier
  }

  export type EnumSubscriptionStatusFieldUpdateOperationsInput = {
    set?: SubscriptionStatus
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateManyWithoutAgencyNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutAgencyInput>, Enumerable<UserUncheckedCreateWithoutAgencyInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutAgencyInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutAgencyInput>
    createMany?: UserCreateManyAgencyInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutAgencyInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutAgencyInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type ChatUpdateManyWithoutAgencyNestedInput = {
    create?: XOR<Enumerable<ChatCreateWithoutAgencyInput>, Enumerable<ChatUncheckedCreateWithoutAgencyInput>>
    connectOrCreate?: Enumerable<ChatCreateOrConnectWithoutAgencyInput>
    upsert?: Enumerable<ChatUpsertWithWhereUniqueWithoutAgencyInput>
    createMany?: ChatCreateManyAgencyInputEnvelope
    set?: Enumerable<ChatWhereUniqueInput>
    disconnect?: Enumerable<ChatWhereUniqueInput>
    delete?: Enumerable<ChatWhereUniqueInput>
    connect?: Enumerable<ChatWhereUniqueInput>
    update?: Enumerable<ChatUpdateWithWhereUniqueWithoutAgencyInput>
    updateMany?: Enumerable<ChatUpdateManyWithWhereWithoutAgencyInput>
    deleteMany?: Enumerable<ChatScalarWhereInput>
  }

  export type SessionUpdateManyWithoutAgencyNestedInput = {
    create?: XOR<Enumerable<SessionCreateWithoutAgencyInput>, Enumerable<SessionUncheckedCreateWithoutAgencyInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutAgencyInput>
    upsert?: Enumerable<SessionUpsertWithWhereUniqueWithoutAgencyInput>
    createMany?: SessionCreateManyAgencyInputEnvelope
    set?: Enumerable<SessionWhereUniqueInput>
    disconnect?: Enumerable<SessionWhereUniqueInput>
    delete?: Enumerable<SessionWhereUniqueInput>
    connect?: Enumerable<SessionWhereUniqueInput>
    update?: Enumerable<SessionUpdateWithWhereUniqueWithoutAgencyInput>
    updateMany?: Enumerable<SessionUpdateManyWithWhereWithoutAgencyInput>
    deleteMany?: Enumerable<SessionScalarWhereInput>
  }

  export type AgencySubscriptionUpdateManyWithoutAgencyNestedInput = {
    create?: XOR<Enumerable<AgencySubscriptionCreateWithoutAgencyInput>, Enumerable<AgencySubscriptionUncheckedCreateWithoutAgencyInput>>
    connectOrCreate?: Enumerable<AgencySubscriptionCreateOrConnectWithoutAgencyInput>
    upsert?: Enumerable<AgencySubscriptionUpsertWithWhereUniqueWithoutAgencyInput>
    createMany?: AgencySubscriptionCreateManyAgencyInputEnvelope
    set?: Enumerable<AgencySubscriptionWhereUniqueInput>
    disconnect?: Enumerable<AgencySubscriptionWhereUniqueInput>
    delete?: Enumerable<AgencySubscriptionWhereUniqueInput>
    connect?: Enumerable<AgencySubscriptionWhereUniqueInput>
    update?: Enumerable<AgencySubscriptionUpdateWithWhereUniqueWithoutAgencyInput>
    updateMany?: Enumerable<AgencySubscriptionUpdateManyWithWhereWithoutAgencyInput>
    deleteMany?: Enumerable<AgencySubscriptionScalarWhereInput>
  }

  export type AgencyAuditLogUpdateManyWithoutAgencyNestedInput = {
    create?: XOR<Enumerable<AgencyAuditLogCreateWithoutAgencyInput>, Enumerable<AgencyAuditLogUncheckedCreateWithoutAgencyInput>>
    connectOrCreate?: Enumerable<AgencyAuditLogCreateOrConnectWithoutAgencyInput>
    upsert?: Enumerable<AgencyAuditLogUpsertWithWhereUniqueWithoutAgencyInput>
    createMany?: AgencyAuditLogCreateManyAgencyInputEnvelope
    set?: Enumerable<AgencyAuditLogWhereUniqueInput>
    disconnect?: Enumerable<AgencyAuditLogWhereUniqueInput>
    delete?: Enumerable<AgencyAuditLogWhereUniqueInput>
    connect?: Enumerable<AgencyAuditLogWhereUniqueInput>
    update?: Enumerable<AgencyAuditLogUpdateWithWhereUniqueWithoutAgencyInput>
    updateMany?: Enumerable<AgencyAuditLogUpdateManyWithWhereWithoutAgencyInput>
    deleteMany?: Enumerable<AgencyAuditLogScalarWhereInput>
  }

  export type SwarmExecutionUpdateManyWithoutAgencyNestedInput = {
    create?: XOR<Enumerable<SwarmExecutionCreateWithoutAgencyInput>, Enumerable<SwarmExecutionUncheckedCreateWithoutAgencyInput>>
    connectOrCreate?: Enumerable<SwarmExecutionCreateOrConnectWithoutAgencyInput>
    upsert?: Enumerable<SwarmExecutionUpsertWithWhereUniqueWithoutAgencyInput>
    createMany?: SwarmExecutionCreateManyAgencyInputEnvelope
    set?: Enumerable<SwarmExecutionWhereUniqueInput>
    disconnect?: Enumerable<SwarmExecutionWhereUniqueInput>
    delete?: Enumerable<SwarmExecutionWhereUniqueInput>
    connect?: Enumerable<SwarmExecutionWhereUniqueInput>
    update?: Enumerable<SwarmExecutionUpdateWithWhereUniqueWithoutAgencyInput>
    updateMany?: Enumerable<SwarmExecutionUpdateManyWithWhereWithoutAgencyInput>
    deleteMany?: Enumerable<SwarmExecutionScalarWhereInput>
  }

  export type ServiceRequestUpdateManyWithoutAgencyNestedInput = {
    create?: XOR<Enumerable<ServiceRequestCreateWithoutAgencyInput>, Enumerable<ServiceRequestUncheckedCreateWithoutAgencyInput>>
    connectOrCreate?: Enumerable<ServiceRequestCreateOrConnectWithoutAgencyInput>
    upsert?: Enumerable<ServiceRequestUpsertWithWhereUniqueWithoutAgencyInput>
    createMany?: ServiceRequestCreateManyAgencyInputEnvelope
    set?: Enumerable<ServiceRequestWhereUniqueInput>
    disconnect?: Enumerable<ServiceRequestWhereUniqueInput>
    delete?: Enumerable<ServiceRequestWhereUniqueInput>
    connect?: Enumerable<ServiceRequestWhereUniqueInput>
    update?: Enumerable<ServiceRequestUpdateWithWhereUniqueWithoutAgencyInput>
    updateMany?: Enumerable<ServiceRequestUpdateManyWithWhereWithoutAgencyInput>
    deleteMany?: Enumerable<ServiceRequestScalarWhereInput>
  }

  export type ServiceProviderUpdateManyWithoutAgencyNestedInput = {
    create?: XOR<Enumerable<ServiceProviderCreateWithoutAgencyInput>, Enumerable<ServiceProviderUncheckedCreateWithoutAgencyInput>>
    connectOrCreate?: Enumerable<ServiceProviderCreateOrConnectWithoutAgencyInput>
    upsert?: Enumerable<ServiceProviderUpsertWithWhereUniqueWithoutAgencyInput>
    createMany?: ServiceProviderCreateManyAgencyInputEnvelope
    set?: Enumerable<ServiceProviderWhereUniqueInput>
    disconnect?: Enumerable<ServiceProviderWhereUniqueInput>
    delete?: Enumerable<ServiceProviderWhereUniqueInput>
    connect?: Enumerable<ServiceProviderWhereUniqueInput>
    update?: Enumerable<ServiceProviderUpdateWithWhereUniqueWithoutAgencyInput>
    updateMany?: Enumerable<ServiceProviderUpdateManyWithWhereWithoutAgencyInput>
    deleteMany?: Enumerable<ServiceProviderScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutAgencyNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutAgencyInput>, Enumerable<UserUncheckedCreateWithoutAgencyInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutAgencyInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutAgencyInput>
    createMany?: UserCreateManyAgencyInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutAgencyInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutAgencyInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type ChatUncheckedUpdateManyWithoutAgencyNestedInput = {
    create?: XOR<Enumerable<ChatCreateWithoutAgencyInput>, Enumerable<ChatUncheckedCreateWithoutAgencyInput>>
    connectOrCreate?: Enumerable<ChatCreateOrConnectWithoutAgencyInput>
    upsert?: Enumerable<ChatUpsertWithWhereUniqueWithoutAgencyInput>
    createMany?: ChatCreateManyAgencyInputEnvelope
    set?: Enumerable<ChatWhereUniqueInput>
    disconnect?: Enumerable<ChatWhereUniqueInput>
    delete?: Enumerable<ChatWhereUniqueInput>
    connect?: Enumerable<ChatWhereUniqueInput>
    update?: Enumerable<ChatUpdateWithWhereUniqueWithoutAgencyInput>
    updateMany?: Enumerable<ChatUpdateManyWithWhereWithoutAgencyInput>
    deleteMany?: Enumerable<ChatScalarWhereInput>
  }

  export type SessionUncheckedUpdateManyWithoutAgencyNestedInput = {
    create?: XOR<Enumerable<SessionCreateWithoutAgencyInput>, Enumerable<SessionUncheckedCreateWithoutAgencyInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutAgencyInput>
    upsert?: Enumerable<SessionUpsertWithWhereUniqueWithoutAgencyInput>
    createMany?: SessionCreateManyAgencyInputEnvelope
    set?: Enumerable<SessionWhereUniqueInput>
    disconnect?: Enumerable<SessionWhereUniqueInput>
    delete?: Enumerable<SessionWhereUniqueInput>
    connect?: Enumerable<SessionWhereUniqueInput>
    update?: Enumerable<SessionUpdateWithWhereUniqueWithoutAgencyInput>
    updateMany?: Enumerable<SessionUpdateManyWithWhereWithoutAgencyInput>
    deleteMany?: Enumerable<SessionScalarWhereInput>
  }

  export type AgencySubscriptionUncheckedUpdateManyWithoutAgencyNestedInput = {
    create?: XOR<Enumerable<AgencySubscriptionCreateWithoutAgencyInput>, Enumerable<AgencySubscriptionUncheckedCreateWithoutAgencyInput>>
    connectOrCreate?: Enumerable<AgencySubscriptionCreateOrConnectWithoutAgencyInput>
    upsert?: Enumerable<AgencySubscriptionUpsertWithWhereUniqueWithoutAgencyInput>
    createMany?: AgencySubscriptionCreateManyAgencyInputEnvelope
    set?: Enumerable<AgencySubscriptionWhereUniqueInput>
    disconnect?: Enumerable<AgencySubscriptionWhereUniqueInput>
    delete?: Enumerable<AgencySubscriptionWhereUniqueInput>
    connect?: Enumerable<AgencySubscriptionWhereUniqueInput>
    update?: Enumerable<AgencySubscriptionUpdateWithWhereUniqueWithoutAgencyInput>
    updateMany?: Enumerable<AgencySubscriptionUpdateManyWithWhereWithoutAgencyInput>
    deleteMany?: Enumerable<AgencySubscriptionScalarWhereInput>
  }

  export type AgencyAuditLogUncheckedUpdateManyWithoutAgencyNestedInput = {
    create?: XOR<Enumerable<AgencyAuditLogCreateWithoutAgencyInput>, Enumerable<AgencyAuditLogUncheckedCreateWithoutAgencyInput>>
    connectOrCreate?: Enumerable<AgencyAuditLogCreateOrConnectWithoutAgencyInput>
    upsert?: Enumerable<AgencyAuditLogUpsertWithWhereUniqueWithoutAgencyInput>
    createMany?: AgencyAuditLogCreateManyAgencyInputEnvelope
    set?: Enumerable<AgencyAuditLogWhereUniqueInput>
    disconnect?: Enumerable<AgencyAuditLogWhereUniqueInput>
    delete?: Enumerable<AgencyAuditLogWhereUniqueInput>
    connect?: Enumerable<AgencyAuditLogWhereUniqueInput>
    update?: Enumerable<AgencyAuditLogUpdateWithWhereUniqueWithoutAgencyInput>
    updateMany?: Enumerable<AgencyAuditLogUpdateManyWithWhereWithoutAgencyInput>
    deleteMany?: Enumerable<AgencyAuditLogScalarWhereInput>
  }

  export type SwarmExecutionUncheckedUpdateManyWithoutAgencyNestedInput = {
    create?: XOR<Enumerable<SwarmExecutionCreateWithoutAgencyInput>, Enumerable<SwarmExecutionUncheckedCreateWithoutAgencyInput>>
    connectOrCreate?: Enumerable<SwarmExecutionCreateOrConnectWithoutAgencyInput>
    upsert?: Enumerable<SwarmExecutionUpsertWithWhereUniqueWithoutAgencyInput>
    createMany?: SwarmExecutionCreateManyAgencyInputEnvelope
    set?: Enumerable<SwarmExecutionWhereUniqueInput>
    disconnect?: Enumerable<SwarmExecutionWhereUniqueInput>
    delete?: Enumerable<SwarmExecutionWhereUniqueInput>
    connect?: Enumerable<SwarmExecutionWhereUniqueInput>
    update?: Enumerable<SwarmExecutionUpdateWithWhereUniqueWithoutAgencyInput>
    updateMany?: Enumerable<SwarmExecutionUpdateManyWithWhereWithoutAgencyInput>
    deleteMany?: Enumerable<SwarmExecutionScalarWhereInput>
  }

  export type ServiceRequestUncheckedUpdateManyWithoutAgencyNestedInput = {
    create?: XOR<Enumerable<ServiceRequestCreateWithoutAgencyInput>, Enumerable<ServiceRequestUncheckedCreateWithoutAgencyInput>>
    connectOrCreate?: Enumerable<ServiceRequestCreateOrConnectWithoutAgencyInput>
    upsert?: Enumerable<ServiceRequestUpsertWithWhereUniqueWithoutAgencyInput>
    createMany?: ServiceRequestCreateManyAgencyInputEnvelope
    set?: Enumerable<ServiceRequestWhereUniqueInput>
    disconnect?: Enumerable<ServiceRequestWhereUniqueInput>
    delete?: Enumerable<ServiceRequestWhereUniqueInput>
    connect?: Enumerable<ServiceRequestWhereUniqueInput>
    update?: Enumerable<ServiceRequestUpdateWithWhereUniqueWithoutAgencyInput>
    updateMany?: Enumerable<ServiceRequestUpdateManyWithWhereWithoutAgencyInput>
    deleteMany?: Enumerable<ServiceRequestScalarWhereInput>
  }

  export type ServiceProviderUncheckedUpdateManyWithoutAgencyNestedInput = {
    create?: XOR<Enumerable<ServiceProviderCreateWithoutAgencyInput>, Enumerable<ServiceProviderUncheckedCreateWithoutAgencyInput>>
    connectOrCreate?: Enumerable<ServiceProviderCreateOrConnectWithoutAgencyInput>
    upsert?: Enumerable<ServiceProviderUpsertWithWhereUniqueWithoutAgencyInput>
    createMany?: ServiceProviderCreateManyAgencyInputEnvelope
    set?: Enumerable<ServiceProviderWhereUniqueInput>
    disconnect?: Enumerable<ServiceProviderWhereUniqueInput>
    delete?: Enumerable<ServiceProviderWhereUniqueInput>
    connect?: Enumerable<ServiceProviderWhereUniqueInput>
    update?: Enumerable<ServiceProviderUpdateWithWhereUniqueWithoutAgencyInput>
    updateMany?: Enumerable<ServiceProviderUpdateManyWithWhereWithoutAgencyInput>
    deleteMany?: Enumerable<ServiceProviderScalarWhereInput>
  }

  export type AgencyCreateNestedOneWithoutUsersInput = {
    create?: XOR<AgencyCreateWithoutUsersInput, AgencyUncheckedCreateWithoutUsersInput>
    connectOrCreate?: AgencyCreateOrConnectWithoutUsersInput
    connect?: AgencyWhereUniqueInput
  }

  export type ChatCreateNestedManyWithoutCreatorInput = {
    create?: XOR<Enumerable<ChatCreateWithoutCreatorInput>, Enumerable<ChatUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<ChatCreateOrConnectWithoutCreatorInput>
    createMany?: ChatCreateManyCreatorInputEnvelope
    connect?: Enumerable<ChatWhereUniqueInput>
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: Enumerable<SessionWhereUniqueInput>
  }

  export type AgencyAuditLogCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<AgencyAuditLogCreateWithoutUserInput>, Enumerable<AgencyAuditLogUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AgencyAuditLogCreateOrConnectWithoutUserInput>
    createMany?: AgencyAuditLogCreateManyUserInputEnvelope
    connect?: Enumerable<AgencyAuditLogWhereUniqueInput>
  }

  export type ServiceRequestCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ServiceRequestCreateWithoutUserInput>, Enumerable<ServiceRequestUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ServiceRequestCreateOrConnectWithoutUserInput>
    createMany?: ServiceRequestCreateManyUserInputEnvelope
    connect?: Enumerable<ServiceRequestWhereUniqueInput>
  }

  export type ProviderReviewCreateNestedManyWithoutReviewerInput = {
    create?: XOR<Enumerable<ProviderReviewCreateWithoutReviewerInput>, Enumerable<ProviderReviewUncheckedCreateWithoutReviewerInput>>
    connectOrCreate?: Enumerable<ProviderReviewCreateOrConnectWithoutReviewerInput>
    createMany?: ProviderReviewCreateManyReviewerInputEnvelope
    connect?: Enumerable<ProviderReviewWhereUniqueInput>
  }

  export type ServiceReviewCreateNestedManyWithoutReviewerInput = {
    create?: XOR<Enumerable<ServiceReviewCreateWithoutReviewerInput>, Enumerable<ServiceReviewUncheckedCreateWithoutReviewerInput>>
    connectOrCreate?: Enumerable<ServiceReviewCreateOrConnectWithoutReviewerInput>
    createMany?: ServiceReviewCreateManyReviewerInputEnvelope
    connect?: Enumerable<ServiceReviewWhereUniqueInput>
  }

  export type ChatUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<Enumerable<ChatCreateWithoutCreatorInput>, Enumerable<ChatUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<ChatCreateOrConnectWithoutCreatorInput>
    createMany?: ChatCreateManyCreatorInputEnvelope
    connect?: Enumerable<ChatWhereUniqueInput>
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: Enumerable<SessionWhereUniqueInput>
  }

  export type AgencyAuditLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<AgencyAuditLogCreateWithoutUserInput>, Enumerable<AgencyAuditLogUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AgencyAuditLogCreateOrConnectWithoutUserInput>
    createMany?: AgencyAuditLogCreateManyUserInputEnvelope
    connect?: Enumerable<AgencyAuditLogWhereUniqueInput>
  }

  export type ServiceRequestUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ServiceRequestCreateWithoutUserInput>, Enumerable<ServiceRequestUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ServiceRequestCreateOrConnectWithoutUserInput>
    createMany?: ServiceRequestCreateManyUserInputEnvelope
    connect?: Enumerable<ServiceRequestWhereUniqueInput>
  }

  export type ProviderReviewUncheckedCreateNestedManyWithoutReviewerInput = {
    create?: XOR<Enumerable<ProviderReviewCreateWithoutReviewerInput>, Enumerable<ProviderReviewUncheckedCreateWithoutReviewerInput>>
    connectOrCreate?: Enumerable<ProviderReviewCreateOrConnectWithoutReviewerInput>
    createMany?: ProviderReviewCreateManyReviewerInputEnvelope
    connect?: Enumerable<ProviderReviewWhereUniqueInput>
  }

  export type ServiceReviewUncheckedCreateNestedManyWithoutReviewerInput = {
    create?: XOR<Enumerable<ServiceReviewCreateWithoutReviewerInput>, Enumerable<ServiceReviewUncheckedCreateWithoutReviewerInput>>
    connectOrCreate?: Enumerable<ServiceReviewCreateOrConnectWithoutReviewerInput>
    createMany?: ServiceReviewCreateManyReviewerInputEnvelope
    connect?: Enumerable<ServiceReviewWhereUniqueInput>
  }

  export type EnumEnhancedUserRoleFieldUpdateOperationsInput = {
    set?: EnhancedUserRole
  }

  export type AgencyUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<AgencyCreateWithoutUsersInput, AgencyUncheckedCreateWithoutUsersInput>
    connectOrCreate?: AgencyCreateOrConnectWithoutUsersInput
    upsert?: AgencyUpsertWithoutUsersInput
    connect?: AgencyWhereUniqueInput
    update?: XOR<AgencyUpdateWithoutUsersInput, AgencyUncheckedUpdateWithoutUsersInput>
  }

  export type ChatUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<Enumerable<ChatCreateWithoutCreatorInput>, Enumerable<ChatUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<ChatCreateOrConnectWithoutCreatorInput>
    upsert?: Enumerable<ChatUpsertWithWhereUniqueWithoutCreatorInput>
    createMany?: ChatCreateManyCreatorInputEnvelope
    set?: Enumerable<ChatWhereUniqueInput>
    disconnect?: Enumerable<ChatWhereUniqueInput>
    delete?: Enumerable<ChatWhereUniqueInput>
    connect?: Enumerable<ChatWhereUniqueInput>
    update?: Enumerable<ChatUpdateWithWhereUniqueWithoutCreatorInput>
    updateMany?: Enumerable<ChatUpdateManyWithWhereWithoutCreatorInput>
    deleteMany?: Enumerable<ChatScalarWhereInput>
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SessionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    set?: Enumerable<SessionWhereUniqueInput>
    disconnect?: Enumerable<SessionWhereUniqueInput>
    delete?: Enumerable<SessionWhereUniqueInput>
    connect?: Enumerable<SessionWhereUniqueInput>
    update?: Enumerable<SessionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SessionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SessionScalarWhereInput>
  }

  export type AgencyAuditLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<AgencyAuditLogCreateWithoutUserInput>, Enumerable<AgencyAuditLogUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AgencyAuditLogCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<AgencyAuditLogUpsertWithWhereUniqueWithoutUserInput>
    createMany?: AgencyAuditLogCreateManyUserInputEnvelope
    set?: Enumerable<AgencyAuditLogWhereUniqueInput>
    disconnect?: Enumerable<AgencyAuditLogWhereUniqueInput>
    delete?: Enumerable<AgencyAuditLogWhereUniqueInput>
    connect?: Enumerable<AgencyAuditLogWhereUniqueInput>
    update?: Enumerable<AgencyAuditLogUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<AgencyAuditLogUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<AgencyAuditLogScalarWhereInput>
  }

  export type ServiceRequestUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ServiceRequestCreateWithoutUserInput>, Enumerable<ServiceRequestUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ServiceRequestCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ServiceRequestUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ServiceRequestCreateManyUserInputEnvelope
    set?: Enumerable<ServiceRequestWhereUniqueInput>
    disconnect?: Enumerable<ServiceRequestWhereUniqueInput>
    delete?: Enumerable<ServiceRequestWhereUniqueInput>
    connect?: Enumerable<ServiceRequestWhereUniqueInput>
    update?: Enumerable<ServiceRequestUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ServiceRequestUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ServiceRequestScalarWhereInput>
  }

  export type ProviderReviewUpdateManyWithoutReviewerNestedInput = {
    create?: XOR<Enumerable<ProviderReviewCreateWithoutReviewerInput>, Enumerable<ProviderReviewUncheckedCreateWithoutReviewerInput>>
    connectOrCreate?: Enumerable<ProviderReviewCreateOrConnectWithoutReviewerInput>
    upsert?: Enumerable<ProviderReviewUpsertWithWhereUniqueWithoutReviewerInput>
    createMany?: ProviderReviewCreateManyReviewerInputEnvelope
    set?: Enumerable<ProviderReviewWhereUniqueInput>
    disconnect?: Enumerable<ProviderReviewWhereUniqueInput>
    delete?: Enumerable<ProviderReviewWhereUniqueInput>
    connect?: Enumerable<ProviderReviewWhereUniqueInput>
    update?: Enumerable<ProviderReviewUpdateWithWhereUniqueWithoutReviewerInput>
    updateMany?: Enumerable<ProviderReviewUpdateManyWithWhereWithoutReviewerInput>
    deleteMany?: Enumerable<ProviderReviewScalarWhereInput>
  }

  export type ServiceReviewUpdateManyWithoutReviewerNestedInput = {
    create?: XOR<Enumerable<ServiceReviewCreateWithoutReviewerInput>, Enumerable<ServiceReviewUncheckedCreateWithoutReviewerInput>>
    connectOrCreate?: Enumerable<ServiceReviewCreateOrConnectWithoutReviewerInput>
    upsert?: Enumerable<ServiceReviewUpsertWithWhereUniqueWithoutReviewerInput>
    createMany?: ServiceReviewCreateManyReviewerInputEnvelope
    set?: Enumerable<ServiceReviewWhereUniqueInput>
    disconnect?: Enumerable<ServiceReviewWhereUniqueInput>
    delete?: Enumerable<ServiceReviewWhereUniqueInput>
    connect?: Enumerable<ServiceReviewWhereUniqueInput>
    update?: Enumerable<ServiceReviewUpdateWithWhereUniqueWithoutReviewerInput>
    updateMany?: Enumerable<ServiceReviewUpdateManyWithWhereWithoutReviewerInput>
    deleteMany?: Enumerable<ServiceReviewScalarWhereInput>
  }

  export type ChatUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<Enumerable<ChatCreateWithoutCreatorInput>, Enumerable<ChatUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<ChatCreateOrConnectWithoutCreatorInput>
    upsert?: Enumerable<ChatUpsertWithWhereUniqueWithoutCreatorInput>
    createMany?: ChatCreateManyCreatorInputEnvelope
    set?: Enumerable<ChatWhereUniqueInput>
    disconnect?: Enumerable<ChatWhereUniqueInput>
    delete?: Enumerable<ChatWhereUniqueInput>
    connect?: Enumerable<ChatWhereUniqueInput>
    update?: Enumerable<ChatUpdateWithWhereUniqueWithoutCreatorInput>
    updateMany?: Enumerable<ChatUpdateManyWithWhereWithoutCreatorInput>
    deleteMany?: Enumerable<ChatScalarWhereInput>
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SessionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    set?: Enumerable<SessionWhereUniqueInput>
    disconnect?: Enumerable<SessionWhereUniqueInput>
    delete?: Enumerable<SessionWhereUniqueInput>
    connect?: Enumerable<SessionWhereUniqueInput>
    update?: Enumerable<SessionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SessionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SessionScalarWhereInput>
  }

  export type AgencyAuditLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<AgencyAuditLogCreateWithoutUserInput>, Enumerable<AgencyAuditLogUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AgencyAuditLogCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<AgencyAuditLogUpsertWithWhereUniqueWithoutUserInput>
    createMany?: AgencyAuditLogCreateManyUserInputEnvelope
    set?: Enumerable<AgencyAuditLogWhereUniqueInput>
    disconnect?: Enumerable<AgencyAuditLogWhereUniqueInput>
    delete?: Enumerable<AgencyAuditLogWhereUniqueInput>
    connect?: Enumerable<AgencyAuditLogWhereUniqueInput>
    update?: Enumerable<AgencyAuditLogUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<AgencyAuditLogUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<AgencyAuditLogScalarWhereInput>
  }

  export type ServiceRequestUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ServiceRequestCreateWithoutUserInput>, Enumerable<ServiceRequestUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ServiceRequestCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ServiceRequestUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ServiceRequestCreateManyUserInputEnvelope
    set?: Enumerable<ServiceRequestWhereUniqueInput>
    disconnect?: Enumerable<ServiceRequestWhereUniqueInput>
    delete?: Enumerable<ServiceRequestWhereUniqueInput>
    connect?: Enumerable<ServiceRequestWhereUniqueInput>
    update?: Enumerable<ServiceRequestUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ServiceRequestUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ServiceRequestScalarWhereInput>
  }

  export type ProviderReviewUncheckedUpdateManyWithoutReviewerNestedInput = {
    create?: XOR<Enumerable<ProviderReviewCreateWithoutReviewerInput>, Enumerable<ProviderReviewUncheckedCreateWithoutReviewerInput>>
    connectOrCreate?: Enumerable<ProviderReviewCreateOrConnectWithoutReviewerInput>
    upsert?: Enumerable<ProviderReviewUpsertWithWhereUniqueWithoutReviewerInput>
    createMany?: ProviderReviewCreateManyReviewerInputEnvelope
    set?: Enumerable<ProviderReviewWhereUniqueInput>
    disconnect?: Enumerable<ProviderReviewWhereUniqueInput>
    delete?: Enumerable<ProviderReviewWhereUniqueInput>
    connect?: Enumerable<ProviderReviewWhereUniqueInput>
    update?: Enumerable<ProviderReviewUpdateWithWhereUniqueWithoutReviewerInput>
    updateMany?: Enumerable<ProviderReviewUpdateManyWithWhereWithoutReviewerInput>
    deleteMany?: Enumerable<ProviderReviewScalarWhereInput>
  }

  export type ServiceReviewUncheckedUpdateManyWithoutReviewerNestedInput = {
    create?: XOR<Enumerable<ServiceReviewCreateWithoutReviewerInput>, Enumerable<ServiceReviewUncheckedCreateWithoutReviewerInput>>
    connectOrCreate?: Enumerable<ServiceReviewCreateOrConnectWithoutReviewerInput>
    upsert?: Enumerable<ServiceReviewUpsertWithWhereUniqueWithoutReviewerInput>
    createMany?: ServiceReviewCreateManyReviewerInputEnvelope
    set?: Enumerable<ServiceReviewWhereUniqueInput>
    disconnect?: Enumerable<ServiceReviewWhereUniqueInput>
    delete?: Enumerable<ServiceReviewWhereUniqueInput>
    connect?: Enumerable<ServiceReviewWhereUniqueInput>
    update?: Enumerable<ServiceReviewUpdateWithWhereUniqueWithoutReviewerInput>
    updateMany?: Enumerable<ServiceReviewUpdateManyWithWhereWithoutReviewerInput>
    deleteMany?: Enumerable<ServiceReviewScalarWhereInput>
  }

  export type AgencyCreateNestedOneWithoutChatsInput = {
    create?: XOR<AgencyCreateWithoutChatsInput, AgencyUncheckedCreateWithoutChatsInput>
    connectOrCreate?: AgencyCreateOrConnectWithoutChatsInput
    connect?: AgencyWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedChatsInput = {
    create?: XOR<UserCreateWithoutCreatedChatsInput, UserUncheckedCreateWithoutCreatedChatsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedChatsInput
    connect?: UserWhereUniqueInput
  }

  export type AgencyUpdateOneRequiredWithoutChatsNestedInput = {
    create?: XOR<AgencyCreateWithoutChatsInput, AgencyUncheckedCreateWithoutChatsInput>
    connectOrCreate?: AgencyCreateOrConnectWithoutChatsInput
    upsert?: AgencyUpsertWithoutChatsInput
    connect?: AgencyWhereUniqueInput
    update?: XOR<AgencyUpdateWithoutChatsInput, AgencyUncheckedUpdateWithoutChatsInput>
  }

  export type UserUpdateOneRequiredWithoutCreatedChatsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedChatsInput, UserUncheckedCreateWithoutCreatedChatsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedChatsInput
    upsert?: UserUpsertWithoutCreatedChatsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutCreatedChatsInput, UserUncheckedUpdateWithoutCreatedChatsInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type AgencyCreateNestedOneWithoutSessionsInput = {
    create?: XOR<AgencyCreateWithoutSessionsInput, AgencyUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: AgencyCreateOrConnectWithoutSessionsInput
    connect?: AgencyWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type AgencyUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<AgencyCreateWithoutSessionsInput, AgencyUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: AgencyCreateOrConnectWithoutSessionsInput
    upsert?: AgencyUpsertWithoutSessionsInput
    connect?: AgencyWhereUniqueInput
    update?: XOR<AgencyUpdateWithoutSessionsInput, AgencyUncheckedUpdateWithoutSessionsInput>
  }

  export type AgencyCreateNestedOneWithoutSwarmExecutionsInput = {
    create?: XOR<AgencyCreateWithoutSwarmExecutionsInput, AgencyUncheckedCreateWithoutSwarmExecutionsInput>
    connectOrCreate?: AgencyCreateOrConnectWithoutSwarmExecutionsInput
    connect?: AgencyWhereUniqueInput
  }

  export type ExecutionStepCreateNestedManyWithoutSwarmExecutionInput = {
    create?: XOR<Enumerable<ExecutionStepCreateWithoutSwarmExecutionInput>, Enumerable<ExecutionStepUncheckedCreateWithoutSwarmExecutionInput>>
    connectOrCreate?: Enumerable<ExecutionStepCreateOrConnectWithoutSwarmExecutionInput>
    createMany?: ExecutionStepCreateManySwarmExecutionInputEnvelope
    connect?: Enumerable<ExecutionStepWhereUniqueInput>
  }

  export type SwarmMessageCreateNestedManyWithoutSwarmExecutionInput = {
    create?: XOR<Enumerable<SwarmMessageCreateWithoutSwarmExecutionInput>, Enumerable<SwarmMessageUncheckedCreateWithoutSwarmExecutionInput>>
    connectOrCreate?: Enumerable<SwarmMessageCreateOrConnectWithoutSwarmExecutionInput>
    createMany?: SwarmMessageCreateManySwarmExecutionInputEnvelope
    connect?: Enumerable<SwarmMessageWhereUniqueInput>
  }

  export type ExecutionStepUncheckedCreateNestedManyWithoutSwarmExecutionInput = {
    create?: XOR<Enumerable<ExecutionStepCreateWithoutSwarmExecutionInput>, Enumerable<ExecutionStepUncheckedCreateWithoutSwarmExecutionInput>>
    connectOrCreate?: Enumerable<ExecutionStepCreateOrConnectWithoutSwarmExecutionInput>
    createMany?: ExecutionStepCreateManySwarmExecutionInputEnvelope
    connect?: Enumerable<ExecutionStepWhereUniqueInput>
  }

  export type SwarmMessageUncheckedCreateNestedManyWithoutSwarmExecutionInput = {
    create?: XOR<Enumerable<SwarmMessageCreateWithoutSwarmExecutionInput>, Enumerable<SwarmMessageUncheckedCreateWithoutSwarmExecutionInput>>
    connectOrCreate?: Enumerable<SwarmMessageCreateOrConnectWithoutSwarmExecutionInput>
    createMany?: SwarmMessageCreateManySwarmExecutionInputEnvelope
    connect?: Enumerable<SwarmMessageWhereUniqueInput>
  }

  export type EnumSwarmExecutionStatusFieldUpdateOperationsInput = {
    set?: SwarmExecutionStatus
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AgencyUpdateOneRequiredWithoutSwarmExecutionsNestedInput = {
    create?: XOR<AgencyCreateWithoutSwarmExecutionsInput, AgencyUncheckedCreateWithoutSwarmExecutionsInput>
    connectOrCreate?: AgencyCreateOrConnectWithoutSwarmExecutionsInput
    upsert?: AgencyUpsertWithoutSwarmExecutionsInput
    connect?: AgencyWhereUniqueInput
    update?: XOR<AgencyUpdateWithoutSwarmExecutionsInput, AgencyUncheckedUpdateWithoutSwarmExecutionsInput>
  }

  export type ExecutionStepUpdateManyWithoutSwarmExecutionNestedInput = {
    create?: XOR<Enumerable<ExecutionStepCreateWithoutSwarmExecutionInput>, Enumerable<ExecutionStepUncheckedCreateWithoutSwarmExecutionInput>>
    connectOrCreate?: Enumerable<ExecutionStepCreateOrConnectWithoutSwarmExecutionInput>
    upsert?: Enumerable<ExecutionStepUpsertWithWhereUniqueWithoutSwarmExecutionInput>
    createMany?: ExecutionStepCreateManySwarmExecutionInputEnvelope
    set?: Enumerable<ExecutionStepWhereUniqueInput>
    disconnect?: Enumerable<ExecutionStepWhereUniqueInput>
    delete?: Enumerable<ExecutionStepWhereUniqueInput>
    connect?: Enumerable<ExecutionStepWhereUniqueInput>
    update?: Enumerable<ExecutionStepUpdateWithWhereUniqueWithoutSwarmExecutionInput>
    updateMany?: Enumerable<ExecutionStepUpdateManyWithWhereWithoutSwarmExecutionInput>
    deleteMany?: Enumerable<ExecutionStepScalarWhereInput>
  }

  export type SwarmMessageUpdateManyWithoutSwarmExecutionNestedInput = {
    create?: XOR<Enumerable<SwarmMessageCreateWithoutSwarmExecutionInput>, Enumerable<SwarmMessageUncheckedCreateWithoutSwarmExecutionInput>>
    connectOrCreate?: Enumerable<SwarmMessageCreateOrConnectWithoutSwarmExecutionInput>
    upsert?: Enumerable<SwarmMessageUpsertWithWhereUniqueWithoutSwarmExecutionInput>
    createMany?: SwarmMessageCreateManySwarmExecutionInputEnvelope
    set?: Enumerable<SwarmMessageWhereUniqueInput>
    disconnect?: Enumerable<SwarmMessageWhereUniqueInput>
    delete?: Enumerable<SwarmMessageWhereUniqueInput>
    connect?: Enumerable<SwarmMessageWhereUniqueInput>
    update?: Enumerable<SwarmMessageUpdateWithWhereUniqueWithoutSwarmExecutionInput>
    updateMany?: Enumerable<SwarmMessageUpdateManyWithWhereWithoutSwarmExecutionInput>
    deleteMany?: Enumerable<SwarmMessageScalarWhereInput>
  }

  export type ExecutionStepUncheckedUpdateManyWithoutSwarmExecutionNestedInput = {
    create?: XOR<Enumerable<ExecutionStepCreateWithoutSwarmExecutionInput>, Enumerable<ExecutionStepUncheckedCreateWithoutSwarmExecutionInput>>
    connectOrCreate?: Enumerable<ExecutionStepCreateOrConnectWithoutSwarmExecutionInput>
    upsert?: Enumerable<ExecutionStepUpsertWithWhereUniqueWithoutSwarmExecutionInput>
    createMany?: ExecutionStepCreateManySwarmExecutionInputEnvelope
    set?: Enumerable<ExecutionStepWhereUniqueInput>
    disconnect?: Enumerable<ExecutionStepWhereUniqueInput>
    delete?: Enumerable<ExecutionStepWhereUniqueInput>
    connect?: Enumerable<ExecutionStepWhereUniqueInput>
    update?: Enumerable<ExecutionStepUpdateWithWhereUniqueWithoutSwarmExecutionInput>
    updateMany?: Enumerable<ExecutionStepUpdateManyWithWhereWithoutSwarmExecutionInput>
    deleteMany?: Enumerable<ExecutionStepScalarWhereInput>
  }

  export type SwarmMessageUncheckedUpdateManyWithoutSwarmExecutionNestedInput = {
    create?: XOR<Enumerable<SwarmMessageCreateWithoutSwarmExecutionInput>, Enumerable<SwarmMessageUncheckedCreateWithoutSwarmExecutionInput>>
    connectOrCreate?: Enumerable<SwarmMessageCreateOrConnectWithoutSwarmExecutionInput>
    upsert?: Enumerable<SwarmMessageUpsertWithWhereUniqueWithoutSwarmExecutionInput>
    createMany?: SwarmMessageCreateManySwarmExecutionInputEnvelope
    set?: Enumerable<SwarmMessageWhereUniqueInput>
    disconnect?: Enumerable<SwarmMessageWhereUniqueInput>
    delete?: Enumerable<SwarmMessageWhereUniqueInput>
    connect?: Enumerable<SwarmMessageWhereUniqueInput>
    update?: Enumerable<SwarmMessageUpdateWithWhereUniqueWithoutSwarmExecutionInput>
    updateMany?: Enumerable<SwarmMessageUpdateManyWithWhereWithoutSwarmExecutionInput>
    deleteMany?: Enumerable<SwarmMessageScalarWhereInput>
  }

  export type SwarmExecutionCreateNestedOneWithoutExecutionStepsInput = {
    create?: XOR<SwarmExecutionCreateWithoutExecutionStepsInput, SwarmExecutionUncheckedCreateWithoutExecutionStepsInput>
    connectOrCreate?: SwarmExecutionCreateOrConnectWithoutExecutionStepsInput
    connect?: SwarmExecutionWhereUniqueInput
  }

  export type EnumExecutionStepStatusFieldUpdateOperationsInput = {
    set?: ExecutionStepStatus
  }

  export type SwarmExecutionUpdateOneRequiredWithoutExecutionStepsNestedInput = {
    create?: XOR<SwarmExecutionCreateWithoutExecutionStepsInput, SwarmExecutionUncheckedCreateWithoutExecutionStepsInput>
    connectOrCreate?: SwarmExecutionCreateOrConnectWithoutExecutionStepsInput
    upsert?: SwarmExecutionUpsertWithoutExecutionStepsInput
    connect?: SwarmExecutionWhereUniqueInput
    update?: XOR<SwarmExecutionUpdateWithoutExecutionStepsInput, SwarmExecutionUncheckedUpdateWithoutExecutionStepsInput>
  }

  export type SwarmExecutionCreateNestedOneWithoutMessagesInput = {
    create?: XOR<SwarmExecutionCreateWithoutMessagesInput, SwarmExecutionUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: SwarmExecutionCreateOrConnectWithoutMessagesInput
    connect?: SwarmExecutionWhereUniqueInput
  }

  export type EnumMessageTypeFieldUpdateOperationsInput = {
    set?: MessageType
  }

  export type EnumMessagePriorityFieldUpdateOperationsInput = {
    set?: MessagePriority
  }

  export type EnumMessageStatusFieldUpdateOperationsInput = {
    set?: MessageStatus
  }

  export type SwarmExecutionUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<SwarmExecutionCreateWithoutMessagesInput, SwarmExecutionUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: SwarmExecutionCreateOrConnectWithoutMessagesInput
    upsert?: SwarmExecutionUpsertWithoutMessagesInput
    connect?: SwarmExecutionWhereUniqueInput
    update?: XOR<SwarmExecutionUpdateWithoutMessagesInput, SwarmExecutionUncheckedUpdateWithoutMessagesInput>
  }

  export type ServiceCategoryCreateNestedOneWithoutChildrenInput = {
    create?: XOR<ServiceCategoryCreateWithoutChildrenInput, ServiceCategoryUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: ServiceCategoryCreateOrConnectWithoutChildrenInput
    connect?: ServiceCategoryWhereUniqueInput
  }

  export type ServiceCategoryCreateNestedManyWithoutParentInput = {
    create?: XOR<Enumerable<ServiceCategoryCreateWithoutParentInput>, Enumerable<ServiceCategoryUncheckedCreateWithoutParentInput>>
    connectOrCreate?: Enumerable<ServiceCategoryCreateOrConnectWithoutParentInput>
    createMany?: ServiceCategoryCreateManyParentInputEnvelope
    connect?: Enumerable<ServiceCategoryWhereUniqueInput>
  }

  export type ServiceRequestCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<ServiceRequestCreateWithoutCategoryInput>, Enumerable<ServiceRequestUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<ServiceRequestCreateOrConnectWithoutCategoryInput>
    createMany?: ServiceRequestCreateManyCategoryInputEnvelope
    connect?: Enumerable<ServiceRequestWhereUniqueInput>
  }

  export type ServiceProviderCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<ServiceProviderCreateWithoutCategoryInput>, Enumerable<ServiceProviderUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<ServiceProviderCreateOrConnectWithoutCategoryInput>
    createMany?: ServiceProviderCreateManyCategoryInputEnvelope
    connect?: Enumerable<ServiceProviderWhereUniqueInput>
  }

  export type ServiceCategoryUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<Enumerable<ServiceCategoryCreateWithoutParentInput>, Enumerable<ServiceCategoryUncheckedCreateWithoutParentInput>>
    connectOrCreate?: Enumerable<ServiceCategoryCreateOrConnectWithoutParentInput>
    createMany?: ServiceCategoryCreateManyParentInputEnvelope
    connect?: Enumerable<ServiceCategoryWhereUniqueInput>
  }

  export type ServiceRequestUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<ServiceRequestCreateWithoutCategoryInput>, Enumerable<ServiceRequestUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<ServiceRequestCreateOrConnectWithoutCategoryInput>
    createMany?: ServiceRequestCreateManyCategoryInputEnvelope
    connect?: Enumerable<ServiceRequestWhereUniqueInput>
  }

  export type ServiceProviderUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<ServiceProviderCreateWithoutCategoryInput>, Enumerable<ServiceProviderUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<ServiceProviderCreateOrConnectWithoutCategoryInput>
    createMany?: ServiceProviderCreateManyCategoryInputEnvelope
    connect?: Enumerable<ServiceProviderWhereUniqueInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ServiceCategoryUpdateOneWithoutChildrenNestedInput = {
    create?: XOR<ServiceCategoryCreateWithoutChildrenInput, ServiceCategoryUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: ServiceCategoryCreateOrConnectWithoutChildrenInput
    upsert?: ServiceCategoryUpsertWithoutChildrenInput
    disconnect?: boolean
    delete?: boolean
    connect?: ServiceCategoryWhereUniqueInput
    update?: XOR<ServiceCategoryUpdateWithoutChildrenInput, ServiceCategoryUncheckedUpdateWithoutChildrenInput>
  }

  export type ServiceCategoryUpdateManyWithoutParentNestedInput = {
    create?: XOR<Enumerable<ServiceCategoryCreateWithoutParentInput>, Enumerable<ServiceCategoryUncheckedCreateWithoutParentInput>>
    connectOrCreate?: Enumerable<ServiceCategoryCreateOrConnectWithoutParentInput>
    upsert?: Enumerable<ServiceCategoryUpsertWithWhereUniqueWithoutParentInput>
    createMany?: ServiceCategoryCreateManyParentInputEnvelope
    set?: Enumerable<ServiceCategoryWhereUniqueInput>
    disconnect?: Enumerable<ServiceCategoryWhereUniqueInput>
    delete?: Enumerable<ServiceCategoryWhereUniqueInput>
    connect?: Enumerable<ServiceCategoryWhereUniqueInput>
    update?: Enumerable<ServiceCategoryUpdateWithWhereUniqueWithoutParentInput>
    updateMany?: Enumerable<ServiceCategoryUpdateManyWithWhereWithoutParentInput>
    deleteMany?: Enumerable<ServiceCategoryScalarWhereInput>
  }

  export type ServiceRequestUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Enumerable<ServiceRequestCreateWithoutCategoryInput>, Enumerable<ServiceRequestUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<ServiceRequestCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<ServiceRequestUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: ServiceRequestCreateManyCategoryInputEnvelope
    set?: Enumerable<ServiceRequestWhereUniqueInput>
    disconnect?: Enumerable<ServiceRequestWhereUniqueInput>
    delete?: Enumerable<ServiceRequestWhereUniqueInput>
    connect?: Enumerable<ServiceRequestWhereUniqueInput>
    update?: Enumerable<ServiceRequestUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<ServiceRequestUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<ServiceRequestScalarWhereInput>
  }

  export type ServiceProviderUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Enumerable<ServiceProviderCreateWithoutCategoryInput>, Enumerable<ServiceProviderUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<ServiceProviderCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<ServiceProviderUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: ServiceProviderCreateManyCategoryInputEnvelope
    set?: Enumerable<ServiceProviderWhereUniqueInput>
    disconnect?: Enumerable<ServiceProviderWhereUniqueInput>
    delete?: Enumerable<ServiceProviderWhereUniqueInput>
    connect?: Enumerable<ServiceProviderWhereUniqueInput>
    update?: Enumerable<ServiceProviderUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<ServiceProviderUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<ServiceProviderScalarWhereInput>
  }

  export type ServiceCategoryUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<Enumerable<ServiceCategoryCreateWithoutParentInput>, Enumerable<ServiceCategoryUncheckedCreateWithoutParentInput>>
    connectOrCreate?: Enumerable<ServiceCategoryCreateOrConnectWithoutParentInput>
    upsert?: Enumerable<ServiceCategoryUpsertWithWhereUniqueWithoutParentInput>
    createMany?: ServiceCategoryCreateManyParentInputEnvelope
    set?: Enumerable<ServiceCategoryWhereUniqueInput>
    disconnect?: Enumerable<ServiceCategoryWhereUniqueInput>
    delete?: Enumerable<ServiceCategoryWhereUniqueInput>
    connect?: Enumerable<ServiceCategoryWhereUniqueInput>
    update?: Enumerable<ServiceCategoryUpdateWithWhereUniqueWithoutParentInput>
    updateMany?: Enumerable<ServiceCategoryUpdateManyWithWhereWithoutParentInput>
    deleteMany?: Enumerable<ServiceCategoryScalarWhereInput>
  }

  export type ServiceRequestUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Enumerable<ServiceRequestCreateWithoutCategoryInput>, Enumerable<ServiceRequestUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<ServiceRequestCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<ServiceRequestUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: ServiceRequestCreateManyCategoryInputEnvelope
    set?: Enumerable<ServiceRequestWhereUniqueInput>
    disconnect?: Enumerable<ServiceRequestWhereUniqueInput>
    delete?: Enumerable<ServiceRequestWhereUniqueInput>
    connect?: Enumerable<ServiceRequestWhereUniqueInput>
    update?: Enumerable<ServiceRequestUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<ServiceRequestUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<ServiceRequestScalarWhereInput>
  }

  export type ServiceProviderUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Enumerable<ServiceProviderCreateWithoutCategoryInput>, Enumerable<ServiceProviderUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<ServiceProviderCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<ServiceProviderUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: ServiceProviderCreateManyCategoryInputEnvelope
    set?: Enumerable<ServiceProviderWhereUniqueInput>
    disconnect?: Enumerable<ServiceProviderWhereUniqueInput>
    delete?: Enumerable<ServiceProviderWhereUniqueInput>
    connect?: Enumerable<ServiceProviderWhereUniqueInput>
    update?: Enumerable<ServiceProviderUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<ServiceProviderUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<ServiceProviderScalarWhereInput>
  }

  export type AgencyCreateNestedOneWithoutServiceProvidersInput = {
    create?: XOR<AgencyCreateWithoutServiceProvidersInput, AgencyUncheckedCreateWithoutServiceProvidersInput>
    connectOrCreate?: AgencyCreateOrConnectWithoutServiceProvidersInput
    connect?: AgencyWhereUniqueInput
  }

  export type ServiceCategoryCreateNestedOneWithoutProvidersInput = {
    create?: XOR<ServiceCategoryCreateWithoutProvidersInput, ServiceCategoryUncheckedCreateWithoutProvidersInput>
    connectOrCreate?: ServiceCategoryCreateOrConnectWithoutProvidersInput
    connect?: ServiceCategoryWhereUniqueInput
  }

  export type ServiceRequestCreateNestedManyWithoutProviderInput = {
    create?: XOR<Enumerable<ServiceRequestCreateWithoutProviderInput>, Enumerable<ServiceRequestUncheckedCreateWithoutProviderInput>>
    connectOrCreate?: Enumerable<ServiceRequestCreateOrConnectWithoutProviderInput>
    createMany?: ServiceRequestCreateManyProviderInputEnvelope
    connect?: Enumerable<ServiceRequestWhereUniqueInput>
  }

  export type ProviderReviewCreateNestedManyWithoutProviderInput = {
    create?: XOR<Enumerable<ProviderReviewCreateWithoutProviderInput>, Enumerable<ProviderReviewUncheckedCreateWithoutProviderInput>>
    connectOrCreate?: Enumerable<ProviderReviewCreateOrConnectWithoutProviderInput>
    createMany?: ProviderReviewCreateManyProviderInputEnvelope
    connect?: Enumerable<ProviderReviewWhereUniqueInput>
  }

  export type ServiceRequestUncheckedCreateNestedManyWithoutProviderInput = {
    create?: XOR<Enumerable<ServiceRequestCreateWithoutProviderInput>, Enumerable<ServiceRequestUncheckedCreateWithoutProviderInput>>
    connectOrCreate?: Enumerable<ServiceRequestCreateOrConnectWithoutProviderInput>
    createMany?: ServiceRequestCreateManyProviderInputEnvelope
    connect?: Enumerable<ServiceRequestWhereUniqueInput>
  }

  export type ProviderReviewUncheckedCreateNestedManyWithoutProviderInput = {
    create?: XOR<Enumerable<ProviderReviewCreateWithoutProviderInput>, Enumerable<ProviderReviewUncheckedCreateWithoutProviderInput>>
    connectOrCreate?: Enumerable<ProviderReviewCreateOrConnectWithoutProviderInput>
    createMany?: ProviderReviewCreateManyProviderInputEnvelope
    connect?: Enumerable<ProviderReviewWhereUniqueInput>
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AgencyUpdateOneRequiredWithoutServiceProvidersNestedInput = {
    create?: XOR<AgencyCreateWithoutServiceProvidersInput, AgencyUncheckedCreateWithoutServiceProvidersInput>
    connectOrCreate?: AgencyCreateOrConnectWithoutServiceProvidersInput
    upsert?: AgencyUpsertWithoutServiceProvidersInput
    connect?: AgencyWhereUniqueInput
    update?: XOR<AgencyUpdateWithoutServiceProvidersInput, AgencyUncheckedUpdateWithoutServiceProvidersInput>
  }

  export type ServiceCategoryUpdateOneRequiredWithoutProvidersNestedInput = {
    create?: XOR<ServiceCategoryCreateWithoutProvidersInput, ServiceCategoryUncheckedCreateWithoutProvidersInput>
    connectOrCreate?: ServiceCategoryCreateOrConnectWithoutProvidersInput
    upsert?: ServiceCategoryUpsertWithoutProvidersInput
    connect?: ServiceCategoryWhereUniqueInput
    update?: XOR<ServiceCategoryUpdateWithoutProvidersInput, ServiceCategoryUncheckedUpdateWithoutProvidersInput>
  }

  export type ServiceRequestUpdateManyWithoutProviderNestedInput = {
    create?: XOR<Enumerable<ServiceRequestCreateWithoutProviderInput>, Enumerable<ServiceRequestUncheckedCreateWithoutProviderInput>>
    connectOrCreate?: Enumerable<ServiceRequestCreateOrConnectWithoutProviderInput>
    upsert?: Enumerable<ServiceRequestUpsertWithWhereUniqueWithoutProviderInput>
    createMany?: ServiceRequestCreateManyProviderInputEnvelope
    set?: Enumerable<ServiceRequestWhereUniqueInput>
    disconnect?: Enumerable<ServiceRequestWhereUniqueInput>
    delete?: Enumerable<ServiceRequestWhereUniqueInput>
    connect?: Enumerable<ServiceRequestWhereUniqueInput>
    update?: Enumerable<ServiceRequestUpdateWithWhereUniqueWithoutProviderInput>
    updateMany?: Enumerable<ServiceRequestUpdateManyWithWhereWithoutProviderInput>
    deleteMany?: Enumerable<ServiceRequestScalarWhereInput>
  }

  export type ProviderReviewUpdateManyWithoutProviderNestedInput = {
    create?: XOR<Enumerable<ProviderReviewCreateWithoutProviderInput>, Enumerable<ProviderReviewUncheckedCreateWithoutProviderInput>>
    connectOrCreate?: Enumerable<ProviderReviewCreateOrConnectWithoutProviderInput>
    upsert?: Enumerable<ProviderReviewUpsertWithWhereUniqueWithoutProviderInput>
    createMany?: ProviderReviewCreateManyProviderInputEnvelope
    set?: Enumerable<ProviderReviewWhereUniqueInput>
    disconnect?: Enumerable<ProviderReviewWhereUniqueInput>
    delete?: Enumerable<ProviderReviewWhereUniqueInput>
    connect?: Enumerable<ProviderReviewWhereUniqueInput>
    update?: Enumerable<ProviderReviewUpdateWithWhereUniqueWithoutProviderInput>
    updateMany?: Enumerable<ProviderReviewUpdateManyWithWhereWithoutProviderInput>
    deleteMany?: Enumerable<ProviderReviewScalarWhereInput>
  }

  export type ServiceRequestUncheckedUpdateManyWithoutProviderNestedInput = {
    create?: XOR<Enumerable<ServiceRequestCreateWithoutProviderInput>, Enumerable<ServiceRequestUncheckedCreateWithoutProviderInput>>
    connectOrCreate?: Enumerable<ServiceRequestCreateOrConnectWithoutProviderInput>
    upsert?: Enumerable<ServiceRequestUpsertWithWhereUniqueWithoutProviderInput>
    createMany?: ServiceRequestCreateManyProviderInputEnvelope
    set?: Enumerable<ServiceRequestWhereUniqueInput>
    disconnect?: Enumerable<ServiceRequestWhereUniqueInput>
    delete?: Enumerable<ServiceRequestWhereUniqueInput>
    connect?: Enumerable<ServiceRequestWhereUniqueInput>
    update?: Enumerable<ServiceRequestUpdateWithWhereUniqueWithoutProviderInput>
    updateMany?: Enumerable<ServiceRequestUpdateManyWithWhereWithoutProviderInput>
    deleteMany?: Enumerable<ServiceRequestScalarWhereInput>
  }

  export type ProviderReviewUncheckedUpdateManyWithoutProviderNestedInput = {
    create?: XOR<Enumerable<ProviderReviewCreateWithoutProviderInput>, Enumerable<ProviderReviewUncheckedCreateWithoutProviderInput>>
    connectOrCreate?: Enumerable<ProviderReviewCreateOrConnectWithoutProviderInput>
    upsert?: Enumerable<ProviderReviewUpsertWithWhereUniqueWithoutProviderInput>
    createMany?: ProviderReviewCreateManyProviderInputEnvelope
    set?: Enumerable<ProviderReviewWhereUniqueInput>
    disconnect?: Enumerable<ProviderReviewWhereUniqueInput>
    delete?: Enumerable<ProviderReviewWhereUniqueInput>
    connect?: Enumerable<ProviderReviewWhereUniqueInput>
    update?: Enumerable<ProviderReviewUpdateWithWhereUniqueWithoutProviderInput>
    updateMany?: Enumerable<ProviderReviewUpdateManyWithWhereWithoutProviderInput>
    deleteMany?: Enumerable<ProviderReviewScalarWhereInput>
  }

  export type AgencyCreateNestedOneWithoutServiceRequestsInput = {
    create?: XOR<AgencyCreateWithoutServiceRequestsInput, AgencyUncheckedCreateWithoutServiceRequestsInput>
    connectOrCreate?: AgencyCreateOrConnectWithoutServiceRequestsInput
    connect?: AgencyWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutServiceRequestsInput = {
    create?: XOR<UserCreateWithoutServiceRequestsInput, UserUncheckedCreateWithoutServiceRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutServiceRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type ServiceCategoryCreateNestedOneWithoutServiceRequestsInput = {
    create?: XOR<ServiceCategoryCreateWithoutServiceRequestsInput, ServiceCategoryUncheckedCreateWithoutServiceRequestsInput>
    connectOrCreate?: ServiceCategoryCreateOrConnectWithoutServiceRequestsInput
    connect?: ServiceCategoryWhereUniqueInput
  }

  export type ServiceProviderCreateNestedOneWithoutServiceRequestsInput = {
    create?: XOR<ServiceProviderCreateWithoutServiceRequestsInput, ServiceProviderUncheckedCreateWithoutServiceRequestsInput>
    connectOrCreate?: ServiceProviderCreateOrConnectWithoutServiceRequestsInput
    connect?: ServiceProviderWhereUniqueInput
  }

  export type ServiceReviewCreateNestedManyWithoutServiceRequestInput = {
    create?: XOR<Enumerable<ServiceReviewCreateWithoutServiceRequestInput>, Enumerable<ServiceReviewUncheckedCreateWithoutServiceRequestInput>>
    connectOrCreate?: Enumerable<ServiceReviewCreateOrConnectWithoutServiceRequestInput>
    createMany?: ServiceReviewCreateManyServiceRequestInputEnvelope
    connect?: Enumerable<ServiceReviewWhereUniqueInput>
  }

  export type ServiceReviewUncheckedCreateNestedManyWithoutServiceRequestInput = {
    create?: XOR<Enumerable<ServiceReviewCreateWithoutServiceRequestInput>, Enumerable<ServiceReviewUncheckedCreateWithoutServiceRequestInput>>
    connectOrCreate?: Enumerable<ServiceReviewCreateOrConnectWithoutServiceRequestInput>
    createMany?: ServiceReviewCreateManyServiceRequestInputEnvelope
    connect?: Enumerable<ServiceReviewWhereUniqueInput>
  }

  export type EnumServiceRequestStatusFieldUpdateOperationsInput = {
    set?: ServiceRequestStatus
  }

  export type EnumRequestPriorityFieldUpdateOperationsInput = {
    set?: RequestPriority
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type AgencyUpdateOneRequiredWithoutServiceRequestsNestedInput = {
    create?: XOR<AgencyCreateWithoutServiceRequestsInput, AgencyUncheckedCreateWithoutServiceRequestsInput>
    connectOrCreate?: AgencyCreateOrConnectWithoutServiceRequestsInput
    upsert?: AgencyUpsertWithoutServiceRequestsInput
    connect?: AgencyWhereUniqueInput
    update?: XOR<AgencyUpdateWithoutServiceRequestsInput, AgencyUncheckedUpdateWithoutServiceRequestsInput>
  }

  export type UserUpdateOneRequiredWithoutServiceRequestsNestedInput = {
    create?: XOR<UserCreateWithoutServiceRequestsInput, UserUncheckedCreateWithoutServiceRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutServiceRequestsInput
    upsert?: UserUpsertWithoutServiceRequestsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutServiceRequestsInput, UserUncheckedUpdateWithoutServiceRequestsInput>
  }

  export type ServiceCategoryUpdateOneRequiredWithoutServiceRequestsNestedInput = {
    create?: XOR<ServiceCategoryCreateWithoutServiceRequestsInput, ServiceCategoryUncheckedCreateWithoutServiceRequestsInput>
    connectOrCreate?: ServiceCategoryCreateOrConnectWithoutServiceRequestsInput
    upsert?: ServiceCategoryUpsertWithoutServiceRequestsInput
    connect?: ServiceCategoryWhereUniqueInput
    update?: XOR<ServiceCategoryUpdateWithoutServiceRequestsInput, ServiceCategoryUncheckedUpdateWithoutServiceRequestsInput>
  }

  export type ServiceProviderUpdateOneWithoutServiceRequestsNestedInput = {
    create?: XOR<ServiceProviderCreateWithoutServiceRequestsInput, ServiceProviderUncheckedCreateWithoutServiceRequestsInput>
    connectOrCreate?: ServiceProviderCreateOrConnectWithoutServiceRequestsInput
    upsert?: ServiceProviderUpsertWithoutServiceRequestsInput
    disconnect?: boolean
    delete?: boolean
    connect?: ServiceProviderWhereUniqueInput
    update?: XOR<ServiceProviderUpdateWithoutServiceRequestsInput, ServiceProviderUncheckedUpdateWithoutServiceRequestsInput>
  }

  export type ServiceReviewUpdateManyWithoutServiceRequestNestedInput = {
    create?: XOR<Enumerable<ServiceReviewCreateWithoutServiceRequestInput>, Enumerable<ServiceReviewUncheckedCreateWithoutServiceRequestInput>>
    connectOrCreate?: Enumerable<ServiceReviewCreateOrConnectWithoutServiceRequestInput>
    upsert?: Enumerable<ServiceReviewUpsertWithWhereUniqueWithoutServiceRequestInput>
    createMany?: ServiceReviewCreateManyServiceRequestInputEnvelope
    set?: Enumerable<ServiceReviewWhereUniqueInput>
    disconnect?: Enumerable<ServiceReviewWhereUniqueInput>
    delete?: Enumerable<ServiceReviewWhereUniqueInput>
    connect?: Enumerable<ServiceReviewWhereUniqueInput>
    update?: Enumerable<ServiceReviewUpdateWithWhereUniqueWithoutServiceRequestInput>
    updateMany?: Enumerable<ServiceReviewUpdateManyWithWhereWithoutServiceRequestInput>
    deleteMany?: Enumerable<ServiceReviewScalarWhereInput>
  }

  export type ServiceReviewUncheckedUpdateManyWithoutServiceRequestNestedInput = {
    create?: XOR<Enumerable<ServiceReviewCreateWithoutServiceRequestInput>, Enumerable<ServiceReviewUncheckedCreateWithoutServiceRequestInput>>
    connectOrCreate?: Enumerable<ServiceReviewCreateOrConnectWithoutServiceRequestInput>
    upsert?: Enumerable<ServiceReviewUpsertWithWhereUniqueWithoutServiceRequestInput>
    createMany?: ServiceReviewCreateManyServiceRequestInputEnvelope
    set?: Enumerable<ServiceReviewWhereUniqueInput>
    disconnect?: Enumerable<ServiceReviewWhereUniqueInput>
    delete?: Enumerable<ServiceReviewWhereUniqueInput>
    connect?: Enumerable<ServiceReviewWhereUniqueInput>
    update?: Enumerable<ServiceReviewUpdateWithWhereUniqueWithoutServiceRequestInput>
    updateMany?: Enumerable<ServiceReviewUpdateManyWithWhereWithoutServiceRequestInput>
    deleteMany?: Enumerable<ServiceReviewScalarWhereInput>
  }

  export type ServiceProviderCreateNestedOneWithoutReviewsInput = {
    create?: XOR<ServiceProviderCreateWithoutReviewsInput, ServiceProviderUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: ServiceProviderCreateOrConnectWithoutReviewsInput
    connect?: ServiceProviderWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutProviderReviewsInput = {
    create?: XOR<UserCreateWithoutProviderReviewsInput, UserUncheckedCreateWithoutProviderReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProviderReviewsInput
    connect?: UserWhereUniqueInput
  }

  export type ServiceProviderUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<ServiceProviderCreateWithoutReviewsInput, ServiceProviderUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: ServiceProviderCreateOrConnectWithoutReviewsInput
    upsert?: ServiceProviderUpsertWithoutReviewsInput
    connect?: ServiceProviderWhereUniqueInput
    update?: XOR<ServiceProviderUpdateWithoutReviewsInput, ServiceProviderUncheckedUpdateWithoutReviewsInput>
  }

  export type UserUpdateOneRequiredWithoutProviderReviewsNestedInput = {
    create?: XOR<UserCreateWithoutProviderReviewsInput, UserUncheckedCreateWithoutProviderReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProviderReviewsInput
    upsert?: UserUpsertWithoutProviderReviewsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutProviderReviewsInput, UserUncheckedUpdateWithoutProviderReviewsInput>
  }

  export type ServiceRequestCreateNestedOneWithoutReviewsInput = {
    create?: XOR<ServiceRequestCreateWithoutReviewsInput, ServiceRequestUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: ServiceRequestCreateOrConnectWithoutReviewsInput
    connect?: ServiceRequestWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutServiceReviewsInput = {
    create?: XOR<UserCreateWithoutServiceReviewsInput, UserUncheckedCreateWithoutServiceReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutServiceReviewsInput
    connect?: UserWhereUniqueInput
  }

  export type ServiceRequestUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<ServiceRequestCreateWithoutReviewsInput, ServiceRequestUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: ServiceRequestCreateOrConnectWithoutReviewsInput
    upsert?: ServiceRequestUpsertWithoutReviewsInput
    connect?: ServiceRequestWhereUniqueInput
    update?: XOR<ServiceRequestUpdateWithoutReviewsInput, ServiceRequestUncheckedUpdateWithoutReviewsInput>
  }

  export type UserUpdateOneRequiredWithoutServiceReviewsNestedInput = {
    create?: XOR<UserCreateWithoutServiceReviewsInput, UserUncheckedCreateWithoutServiceReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutServiceReviewsInput
    upsert?: UserUpsertWithoutServiceReviewsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutServiceReviewsInput, UserUncheckedUpdateWithoutServiceReviewsInput>
  }

  export type AgencyCreateNestedOneWithoutSubscriptionsInput = {
    create?: XOR<AgencyCreateWithoutSubscriptionsInput, AgencyUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: AgencyCreateOrConnectWithoutSubscriptionsInput
    connect?: AgencyWhereUniqueInput
  }

  export type EnumBillingCycleFieldUpdateOperationsInput = {
    set?: BillingCycle
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type AgencyUpdateOneRequiredWithoutSubscriptionsNestedInput = {
    create?: XOR<AgencyCreateWithoutSubscriptionsInput, AgencyUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: AgencyCreateOrConnectWithoutSubscriptionsInput
    upsert?: AgencyUpsertWithoutSubscriptionsInput
    connect?: AgencyWhereUniqueInput
    update?: XOR<AgencyUpdateWithoutSubscriptionsInput, AgencyUncheckedUpdateWithoutSubscriptionsInput>
  }

  export type AgencyCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<AgencyCreateWithoutAuditLogsInput, AgencyUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: AgencyCreateOrConnectWithoutAuditLogsInput
    connect?: AgencyWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
  }

  export type AgencyUpdateOneRequiredWithoutAuditLogsNestedInput = {
    create?: XOR<AgencyCreateWithoutAuditLogsInput, AgencyUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: AgencyCreateOrConnectWithoutAuditLogsInput
    upsert?: AgencyUpsertWithoutAuditLogsInput
    connect?: AgencyWhereUniqueInput
    update?: XOR<AgencyUpdateWithoutAuditLogsInput, AgencyUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserUpdateOneWithoutAuditLogsNestedInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    upsert?: UserUpsertWithoutAuditLogsInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedEnumTaskStatusFilter = {
    equals?: TaskStatus
    in?: Enumerable<TaskStatus>
    notIn?: Enumerable<TaskStatus>
    not?: NestedEnumTaskStatusFilter | TaskStatus
  }

  export type NestedEnumTaskPriorityFilter = {
    equals?: TaskPriority
    in?: Enumerable<TaskPriority>
    notIn?: Enumerable<TaskPriority>
    not?: NestedEnumTaskPriorityFilter | TaskPriority
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedEnumTaskStatusWithAggregatesFilter = {
    equals?: TaskStatus
    in?: Enumerable<TaskStatus>
    notIn?: Enumerable<TaskStatus>
    not?: NestedEnumTaskStatusWithAggregatesFilter | TaskStatus
    _count?: NestedIntFilter
    _min?: NestedEnumTaskStatusFilter
    _max?: NestedEnumTaskStatusFilter
  }

  export type NestedEnumTaskPriorityWithAggregatesFilter = {
    equals?: TaskPriority
    in?: Enumerable<TaskPriority>
    notIn?: Enumerable<TaskPriority>
    not?: NestedEnumTaskPriorityWithAggregatesFilter | TaskPriority
    _count?: NestedIntFilter
    _min?: NestedEnumTaskPriorityFilter
    _max?: NestedEnumTaskPriorityFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }
  export type NestedJsonNullableFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase>, Exclude<keyof Required<NestedJsonNullableFilterBase>, 'path'>>,
        Required<NestedJsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase>, 'path'>>

  export type NestedJsonNullableFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string[]
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type NestedEnumAgentStatusFilter = {
    equals?: AgentStatus
    in?: Enumerable<AgentStatus>
    notIn?: Enumerable<AgentStatus>
    not?: NestedEnumAgentStatusFilter | AgentStatus
  }

  export type NestedEnumAgentStatusWithAggregatesFilter = {
    equals?: AgentStatus
    in?: Enumerable<AgentStatus>
    notIn?: Enumerable<AgentStatus>
    not?: NestedEnumAgentStatusWithAggregatesFilter | AgentStatus
    _count?: NestedIntFilter
    _min?: NestedEnumAgentStatusFilter
    _max?: NestedEnumAgentStatusFilter
  }

  export type NestedEnumAgencyTierFilter = {
    equals?: AgencyTier
    in?: Enumerable<AgencyTier>
    notIn?: Enumerable<AgencyTier>
    not?: NestedEnumAgencyTierFilter | AgencyTier
  }

  export type NestedEnumSubscriptionStatusFilter = {
    equals?: SubscriptionStatus
    in?: Enumerable<SubscriptionStatus>
    notIn?: Enumerable<SubscriptionStatus>
    not?: NestedEnumSubscriptionStatusFilter | SubscriptionStatus
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedEnumAgencyTierWithAggregatesFilter = {
    equals?: AgencyTier
    in?: Enumerable<AgencyTier>
    notIn?: Enumerable<AgencyTier>
    not?: NestedEnumAgencyTierWithAggregatesFilter | AgencyTier
    _count?: NestedIntFilter
    _min?: NestedEnumAgencyTierFilter
    _max?: NestedEnumAgencyTierFilter
  }

  export type NestedEnumSubscriptionStatusWithAggregatesFilter = {
    equals?: SubscriptionStatus
    in?: Enumerable<SubscriptionStatus>
    notIn?: Enumerable<SubscriptionStatus>
    not?: NestedEnumSubscriptionStatusWithAggregatesFilter | SubscriptionStatus
    _count?: NestedIntFilter
    _min?: NestedEnumSubscriptionStatusFilter
    _max?: NestedEnumSubscriptionStatusFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedEnumEnhancedUserRoleFilter = {
    equals?: EnhancedUserRole
    in?: Enumerable<EnhancedUserRole>
    notIn?: Enumerable<EnhancedUserRole>
    not?: NestedEnumEnhancedUserRoleFilter | EnhancedUserRole
  }

  export type NestedEnumEnhancedUserRoleWithAggregatesFilter = {
    equals?: EnhancedUserRole
    in?: Enumerable<EnhancedUserRole>
    notIn?: Enumerable<EnhancedUserRole>
    not?: NestedEnumEnhancedUserRoleWithAggregatesFilter | EnhancedUserRole
    _count?: NestedIntFilter
    _min?: NestedEnumEnhancedUserRoleFilter
    _max?: NestedEnumEnhancedUserRoleFilter
  }

  export type NestedEnumSwarmExecutionStatusFilter = {
    equals?: SwarmExecutionStatus
    in?: Enumerable<SwarmExecutionStatus>
    notIn?: Enumerable<SwarmExecutionStatus>
    not?: NestedEnumSwarmExecutionStatusFilter | SwarmExecutionStatus
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedEnumSwarmExecutionStatusWithAggregatesFilter = {
    equals?: SwarmExecutionStatus
    in?: Enumerable<SwarmExecutionStatus>
    notIn?: Enumerable<SwarmExecutionStatus>
    not?: NestedEnumSwarmExecutionStatusWithAggregatesFilter | SwarmExecutionStatus
    _count?: NestedIntFilter
    _min?: NestedEnumSwarmExecutionStatusFilter
    _max?: NestedEnumSwarmExecutionStatusFilter
  }

  export type NestedFloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }
  export type NestedJsonFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase>, Exclude<keyof Required<NestedJsonFilterBase>, 'path'>>,
        Required<NestedJsonFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase>, 'path'>>

  export type NestedJsonFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string[]
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type NestedEnumExecutionStepStatusFilter = {
    equals?: ExecutionStepStatus
    in?: Enumerable<ExecutionStepStatus>
    notIn?: Enumerable<ExecutionStepStatus>
    not?: NestedEnumExecutionStepStatusFilter | ExecutionStepStatus
  }

  export type NestedEnumExecutionStepStatusWithAggregatesFilter = {
    equals?: ExecutionStepStatus
    in?: Enumerable<ExecutionStepStatus>
    notIn?: Enumerable<ExecutionStepStatus>
    not?: NestedEnumExecutionStepStatusWithAggregatesFilter | ExecutionStepStatus
    _count?: NestedIntFilter
    _min?: NestedEnumExecutionStepStatusFilter
    _max?: NestedEnumExecutionStepStatusFilter
  }

  export type NestedEnumMessageTypeFilter = {
    equals?: MessageType
    in?: Enumerable<MessageType>
    notIn?: Enumerable<MessageType>
    not?: NestedEnumMessageTypeFilter | MessageType
  }

  export type NestedEnumMessagePriorityFilter = {
    equals?: MessagePriority
    in?: Enumerable<MessagePriority>
    notIn?: Enumerable<MessagePriority>
    not?: NestedEnumMessagePriorityFilter | MessagePriority
  }

  export type NestedEnumMessageStatusFilter = {
    equals?: MessageStatus
    in?: Enumerable<MessageStatus>
    notIn?: Enumerable<MessageStatus>
    not?: NestedEnumMessageStatusFilter | MessageStatus
  }

  export type NestedEnumMessageTypeWithAggregatesFilter = {
    equals?: MessageType
    in?: Enumerable<MessageType>
    notIn?: Enumerable<MessageType>
    not?: NestedEnumMessageTypeWithAggregatesFilter | MessageType
    _count?: NestedIntFilter
    _min?: NestedEnumMessageTypeFilter
    _max?: NestedEnumMessageTypeFilter
  }

  export type NestedEnumMessagePriorityWithAggregatesFilter = {
    equals?: MessagePriority
    in?: Enumerable<MessagePriority>
    notIn?: Enumerable<MessagePriority>
    not?: NestedEnumMessagePriorityWithAggregatesFilter | MessagePriority
    _count?: NestedIntFilter
    _min?: NestedEnumMessagePriorityFilter
    _max?: NestedEnumMessagePriorityFilter
  }

  export type NestedEnumMessageStatusWithAggregatesFilter = {
    equals?: MessageStatus
    in?: Enumerable<MessageStatus>
    notIn?: Enumerable<MessageStatus>
    not?: NestedEnumMessageStatusWithAggregatesFilter | MessageStatus
    _count?: NestedIntFilter
    _min?: NestedEnumMessageStatusFilter
    _max?: NestedEnumMessageStatusFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedEnumServiceRequestStatusFilter = {
    equals?: ServiceRequestStatus
    in?: Enumerable<ServiceRequestStatus>
    notIn?: Enumerable<ServiceRequestStatus>
    not?: NestedEnumServiceRequestStatusFilter | ServiceRequestStatus
  }

  export type NestedEnumRequestPriorityFilter = {
    equals?: RequestPriority
    in?: Enumerable<RequestPriority>
    notIn?: Enumerable<RequestPriority>
    not?: NestedEnumRequestPriorityFilter | RequestPriority
  }

  export type NestedDecimalNullableFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedEnumServiceRequestStatusWithAggregatesFilter = {
    equals?: ServiceRequestStatus
    in?: Enumerable<ServiceRequestStatus>
    notIn?: Enumerable<ServiceRequestStatus>
    not?: NestedEnumServiceRequestStatusWithAggregatesFilter | ServiceRequestStatus
    _count?: NestedIntFilter
    _min?: NestedEnumServiceRequestStatusFilter
    _max?: NestedEnumServiceRequestStatusFilter
  }

  export type NestedEnumRequestPriorityWithAggregatesFilter = {
    equals?: RequestPriority
    in?: Enumerable<RequestPriority>
    notIn?: Enumerable<RequestPriority>
    not?: NestedEnumRequestPriorityWithAggregatesFilter | RequestPriority
    _count?: NestedIntFilter
    _min?: NestedEnumRequestPriorityFilter
    _max?: NestedEnumRequestPriorityFilter
  }

  export type NestedDecimalNullableWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter
    _avg?: NestedDecimalNullableFilter
    _sum?: NestedDecimalNullableFilter
    _min?: NestedDecimalNullableFilter
    _max?: NestedDecimalNullableFilter
  }

  export type NestedEnumBillingCycleFilter = {
    equals?: BillingCycle
    in?: Enumerable<BillingCycle>
    notIn?: Enumerable<BillingCycle>
    not?: NestedEnumBillingCycleFilter | BillingCycle
  }

  export type NestedDecimalFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type NestedEnumBillingCycleWithAggregatesFilter = {
    equals?: BillingCycle
    in?: Enumerable<BillingCycle>
    notIn?: Enumerable<BillingCycle>
    not?: NestedEnumBillingCycleWithAggregatesFilter | BillingCycle
    _count?: NestedIntFilter
    _min?: NestedEnumBillingCycleFilter
    _max?: NestedEnumBillingCycleFilter
  }

  export type NestedDecimalWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter
    _avg?: NestedDecimalFilter
    _sum?: NestedDecimalFilter
    _min?: NestedDecimalFilter
    _max?: NestedDecimalFilter
  }

  export type UserCreateWithoutAgencyInput = {
    id?: string
    email: string
    name?: string | null
    passwordHash: string
    role?: EnhancedUserRole
    permissions?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    onboardingCompleted?: boolean
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdChats?: ChatCreateNestedManyWithoutCreatorInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    auditLogs?: AgencyAuditLogCreateNestedManyWithoutUserInput
    serviceRequests?: ServiceRequestCreateNestedManyWithoutUserInput
    providerReviews?: ProviderReviewCreateNestedManyWithoutReviewerInput
    serviceReviews?: ServiceReviewCreateNestedManyWithoutReviewerInput
  }

  export type UserUncheckedCreateWithoutAgencyInput = {
    id?: string
    email: string
    name?: string | null
    passwordHash: string
    role?: EnhancedUserRole
    permissions?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    onboardingCompleted?: boolean
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdChats?: ChatUncheckedCreateNestedManyWithoutCreatorInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AgencyAuditLogUncheckedCreateNestedManyWithoutUserInput
    serviceRequests?: ServiceRequestUncheckedCreateNestedManyWithoutUserInput
    providerReviews?: ProviderReviewUncheckedCreateNestedManyWithoutReviewerInput
    serviceReviews?: ServiceReviewUncheckedCreateNestedManyWithoutReviewerInput
  }

  export type UserCreateOrConnectWithoutAgencyInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAgencyInput, UserUncheckedCreateWithoutAgencyInput>
  }

  export type UserCreateManyAgencyInputEnvelope = {
    data: Enumerable<UserCreateManyAgencyInput>
    skipDuplicates?: boolean
  }

  export type ChatCreateWithoutAgencyInput = {
    id?: string
    title?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutCreatedChatsInput
  }

  export type ChatUncheckedCreateWithoutAgencyInput = {
    id?: string
    title?: string | null
    createdBy: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChatCreateOrConnectWithoutAgencyInput = {
    where: ChatWhereUniqueInput
    create: XOR<ChatCreateWithoutAgencyInput, ChatUncheckedCreateWithoutAgencyInput>
  }

  export type ChatCreateManyAgencyInputEnvelope = {
    data: Enumerable<ChatCreateManyAgencyInput>
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutAgencyInput = {
    id?: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateWithoutAgencyInput = {
    id?: string
    userId: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type SessionCreateOrConnectWithoutAgencyInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutAgencyInput, SessionUncheckedCreateWithoutAgencyInput>
  }

  export type SessionCreateManyAgencyInputEnvelope = {
    data: Enumerable<SessionCreateManyAgencyInput>
    skipDuplicates?: boolean
  }

  export type AgencySubscriptionCreateWithoutAgencyInput = {
    id?: string
    tier: AgencyTier
    status?: SubscriptionStatus
    billingCycle?: BillingCycle
    pricePerMonth: Decimal | DecimalJsLike | number | string
    currency?: string
    startedAt?: Date | string
    endsAt?: Date | string | null
    renewedAt?: Date | string | null
    cancelledAt?: Date | string | null
    stripeSubscriptionId?: string | null
    paymentMethodId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AgencySubscriptionUncheckedCreateWithoutAgencyInput = {
    id?: string
    tier: AgencyTier
    status?: SubscriptionStatus
    billingCycle?: BillingCycle
    pricePerMonth: Decimal | DecimalJsLike | number | string
    currency?: string
    startedAt?: Date | string
    endsAt?: Date | string | null
    renewedAt?: Date | string | null
    cancelledAt?: Date | string | null
    stripeSubscriptionId?: string | null
    paymentMethodId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AgencySubscriptionCreateOrConnectWithoutAgencyInput = {
    where: AgencySubscriptionWhereUniqueInput
    create: XOR<AgencySubscriptionCreateWithoutAgencyInput, AgencySubscriptionUncheckedCreateWithoutAgencyInput>
  }

  export type AgencySubscriptionCreateManyAgencyInputEnvelope = {
    data: Enumerable<AgencySubscriptionCreateManyAgencyInput>
    skipDuplicates?: boolean
  }

  export type AgencyAuditLogCreateWithoutAgencyInput = {
    id?: string
    action: string
    entityType: string
    entityId?: string | null
    changes?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutAuditLogsInput
  }

  export type AgencyAuditLogUncheckedCreateWithoutAgencyInput = {
    id?: string
    userId?: string | null
    action: string
    entityType: string
    entityId?: string | null
    changes?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AgencyAuditLogCreateOrConnectWithoutAgencyInput = {
    where: AgencyAuditLogWhereUniqueInput
    create: XOR<AgencyAuditLogCreateWithoutAgencyInput, AgencyAuditLogUncheckedCreateWithoutAgencyInput>
  }

  export type AgencyAuditLogCreateManyAgencyInputEnvelope = {
    data: Enumerable<AgencyAuditLogCreateManyAgencyInput>
    skipDuplicates?: boolean
  }

  export type SwarmExecutionCreateWithoutAgencyInput = {
    id?: string
    serviceRequestId?: string | null
    status?: SwarmExecutionStatus
    qualityScore?: number | null
    activeAgents: JsonNullValueInput | InputJsonValue
    executionPlan: JsonNullValueInput | InputJsonValue
    results?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string
    completedAt?: Date | string | null
    executionSteps?: ExecutionStepCreateNestedManyWithoutSwarmExecutionInput
    messages?: SwarmMessageCreateNestedManyWithoutSwarmExecutionInput
  }

  export type SwarmExecutionUncheckedCreateWithoutAgencyInput = {
    id?: string
    serviceRequestId?: string | null
    status?: SwarmExecutionStatus
    qualityScore?: number | null
    activeAgents: JsonNullValueInput | InputJsonValue
    executionPlan: JsonNullValueInput | InputJsonValue
    results?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string
    completedAt?: Date | string | null
    executionSteps?: ExecutionStepUncheckedCreateNestedManyWithoutSwarmExecutionInput
    messages?: SwarmMessageUncheckedCreateNestedManyWithoutSwarmExecutionInput
  }

  export type SwarmExecutionCreateOrConnectWithoutAgencyInput = {
    where: SwarmExecutionWhereUniqueInput
    create: XOR<SwarmExecutionCreateWithoutAgencyInput, SwarmExecutionUncheckedCreateWithoutAgencyInput>
  }

  export type SwarmExecutionCreateManyAgencyInputEnvelope = {
    data: Enumerable<SwarmExecutionCreateManyAgencyInput>
    skipDuplicates?: boolean
  }

  export type ServiceRequestCreateWithoutAgencyInput = {
    id?: string
    title: string
    description: string
    requirements?: NullableJsonNullValueInput | InputJsonValue
    status?: ServiceRequestStatus
    priority?: RequestPriority
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    qualityScore?: number | null
    clientSatisfaction?: number | null
    requestedAt?: Date | string
    assignedAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate?: Date | string | null
    deliverables?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
    user: UserCreateNestedOneWithoutServiceRequestsInput
    category: ServiceCategoryCreateNestedOneWithoutServiceRequestsInput
    provider?: ServiceProviderCreateNestedOneWithoutServiceRequestsInput
    reviews?: ServiceReviewCreateNestedManyWithoutServiceRequestInput
  }

  export type ServiceRequestUncheckedCreateWithoutAgencyInput = {
    id?: string
    userId: string
    categoryId: string
    providerId?: string | null
    title: string
    description: string
    requirements?: NullableJsonNullValueInput | InputJsonValue
    status?: ServiceRequestStatus
    priority?: RequestPriority
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    qualityScore?: number | null
    clientSatisfaction?: number | null
    requestedAt?: Date | string
    assignedAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate?: Date | string | null
    deliverables?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
    reviews?: ServiceReviewUncheckedCreateNestedManyWithoutServiceRequestInput
  }

  export type ServiceRequestCreateOrConnectWithoutAgencyInput = {
    where: ServiceRequestWhereUniqueInput
    create: XOR<ServiceRequestCreateWithoutAgencyInput, ServiceRequestUncheckedCreateWithoutAgencyInput>
  }

  export type ServiceRequestCreateManyAgencyInputEnvelope = {
    data: Enumerable<ServiceRequestCreateManyAgencyInput>
    skipDuplicates?: boolean
  }

  export type ServiceProviderCreateWithoutAgencyInput = {
    id?: string
    agentId: string
    capabilities: JsonNullValueInput | InputJsonValue
    qualityRating?: number
    completionRate?: number
    averageRating?: number
    totalCompletions?: number
    isActive?: boolean
    maxConcurrent?: number
    currentLoad?: number
    pricingOverride?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    category: ServiceCategoryCreateNestedOneWithoutProvidersInput
    serviceRequests?: ServiceRequestCreateNestedManyWithoutProviderInput
    reviews?: ProviderReviewCreateNestedManyWithoutProviderInput
  }

  export type ServiceProviderUncheckedCreateWithoutAgencyInput = {
    id?: string
    agentId: string
    categoryId: string
    capabilities: JsonNullValueInput | InputJsonValue
    qualityRating?: number
    completionRate?: number
    averageRating?: number
    totalCompletions?: number
    isActive?: boolean
    maxConcurrent?: number
    currentLoad?: number
    pricingOverride?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    serviceRequests?: ServiceRequestUncheckedCreateNestedManyWithoutProviderInput
    reviews?: ProviderReviewUncheckedCreateNestedManyWithoutProviderInput
  }

  export type ServiceProviderCreateOrConnectWithoutAgencyInput = {
    where: ServiceProviderWhereUniqueInput
    create: XOR<ServiceProviderCreateWithoutAgencyInput, ServiceProviderUncheckedCreateWithoutAgencyInput>
  }

  export type ServiceProviderCreateManyAgencyInputEnvelope = {
    data: Enumerable<ServiceProviderCreateManyAgencyInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutAgencyInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutAgencyInput, UserUncheckedUpdateWithoutAgencyInput>
    create: XOR<UserCreateWithoutAgencyInput, UserUncheckedCreateWithoutAgencyInput>
  }

  export type UserUpdateWithWhereUniqueWithoutAgencyInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutAgencyInput, UserUncheckedUpdateWithoutAgencyInput>
  }

  export type UserUpdateManyWithWhereWithoutAgencyInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutUsersInput>
  }

  export type UserScalarWhereInput = {
    AND?: Enumerable<UserScalarWhereInput>
    OR?: Enumerable<UserScalarWhereInput>
    NOT?: Enumerable<UserScalarWhereInput>
    id?: StringFilter | string
    email?: StringFilter | string
    name?: StringNullableFilter | string | null
    passwordHash?: StringFilter | string
    agencyId?: StringFilter | string
    role?: EnumEnhancedUserRoleFilter | EnhancedUserRole
    permissions?: JsonNullableFilter
    isActive?: BoolFilter | boolean
    onboardingCompleted?: BoolFilter | boolean
    emailVerified?: BoolFilter | boolean
    lastLoginAt?: DateTimeNullableFilter | Date | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ChatUpsertWithWhereUniqueWithoutAgencyInput = {
    where: ChatWhereUniqueInput
    update: XOR<ChatUpdateWithoutAgencyInput, ChatUncheckedUpdateWithoutAgencyInput>
    create: XOR<ChatCreateWithoutAgencyInput, ChatUncheckedCreateWithoutAgencyInput>
  }

  export type ChatUpdateWithWhereUniqueWithoutAgencyInput = {
    where: ChatWhereUniqueInput
    data: XOR<ChatUpdateWithoutAgencyInput, ChatUncheckedUpdateWithoutAgencyInput>
  }

  export type ChatUpdateManyWithWhereWithoutAgencyInput = {
    where: ChatScalarWhereInput
    data: XOR<ChatUpdateManyMutationInput, ChatUncheckedUpdateManyWithoutChatsInput>
  }

  export type ChatScalarWhereInput = {
    AND?: Enumerable<ChatScalarWhereInput>
    OR?: Enumerable<ChatScalarWhereInput>
    NOT?: Enumerable<ChatScalarWhereInput>
    id?: StringFilter | string
    agencyId?: StringFilter | string
    title?: StringNullableFilter | string | null
    createdBy?: StringFilter | string
    isActive?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type SessionUpsertWithWhereUniqueWithoutAgencyInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutAgencyInput, SessionUncheckedUpdateWithoutAgencyInput>
    create: XOR<SessionCreateWithoutAgencyInput, SessionUncheckedCreateWithoutAgencyInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutAgencyInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutAgencyInput, SessionUncheckedUpdateWithoutAgencyInput>
  }

  export type SessionUpdateManyWithWhereWithoutAgencyInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutSessionsInput>
  }

  export type SessionScalarWhereInput = {
    AND?: Enumerable<SessionScalarWhereInput>
    OR?: Enumerable<SessionScalarWhereInput>
    NOT?: Enumerable<SessionScalarWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    agencyId?: StringFilter | string
    token?: StringFilter | string
    expiresAt?: DateTimeFilter | Date | string
    createdAt?: DateTimeFilter | Date | string
  }

  export type AgencySubscriptionUpsertWithWhereUniqueWithoutAgencyInput = {
    where: AgencySubscriptionWhereUniqueInput
    update: XOR<AgencySubscriptionUpdateWithoutAgencyInput, AgencySubscriptionUncheckedUpdateWithoutAgencyInput>
    create: XOR<AgencySubscriptionCreateWithoutAgencyInput, AgencySubscriptionUncheckedCreateWithoutAgencyInput>
  }

  export type AgencySubscriptionUpdateWithWhereUniqueWithoutAgencyInput = {
    where: AgencySubscriptionWhereUniqueInput
    data: XOR<AgencySubscriptionUpdateWithoutAgencyInput, AgencySubscriptionUncheckedUpdateWithoutAgencyInput>
  }

  export type AgencySubscriptionUpdateManyWithWhereWithoutAgencyInput = {
    where: AgencySubscriptionScalarWhereInput
    data: XOR<AgencySubscriptionUpdateManyMutationInput, AgencySubscriptionUncheckedUpdateManyWithoutSubscriptionsInput>
  }

  export type AgencySubscriptionScalarWhereInput = {
    AND?: Enumerable<AgencySubscriptionScalarWhereInput>
    OR?: Enumerable<AgencySubscriptionScalarWhereInput>
    NOT?: Enumerable<AgencySubscriptionScalarWhereInput>
    id?: StringFilter | string
    agencyId?: StringFilter | string
    tier?: EnumAgencyTierFilter | AgencyTier
    status?: EnumSubscriptionStatusFilter | SubscriptionStatus
    billingCycle?: EnumBillingCycleFilter | BillingCycle
    pricePerMonth?: DecimalFilter | Decimal | DecimalJsLike | number | string
    currency?: StringFilter | string
    startedAt?: DateTimeFilter | Date | string
    endsAt?: DateTimeNullableFilter | Date | string | null
    renewedAt?: DateTimeNullableFilter | Date | string | null
    cancelledAt?: DateTimeNullableFilter | Date | string | null
    stripeSubscriptionId?: StringNullableFilter | string | null
    paymentMethodId?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type AgencyAuditLogUpsertWithWhereUniqueWithoutAgencyInput = {
    where: AgencyAuditLogWhereUniqueInput
    update: XOR<AgencyAuditLogUpdateWithoutAgencyInput, AgencyAuditLogUncheckedUpdateWithoutAgencyInput>
    create: XOR<AgencyAuditLogCreateWithoutAgencyInput, AgencyAuditLogUncheckedCreateWithoutAgencyInput>
  }

  export type AgencyAuditLogUpdateWithWhereUniqueWithoutAgencyInput = {
    where: AgencyAuditLogWhereUniqueInput
    data: XOR<AgencyAuditLogUpdateWithoutAgencyInput, AgencyAuditLogUncheckedUpdateWithoutAgencyInput>
  }

  export type AgencyAuditLogUpdateManyWithWhereWithoutAgencyInput = {
    where: AgencyAuditLogScalarWhereInput
    data: XOR<AgencyAuditLogUpdateManyMutationInput, AgencyAuditLogUncheckedUpdateManyWithoutAuditLogsInput>
  }

  export type AgencyAuditLogScalarWhereInput = {
    AND?: Enumerable<AgencyAuditLogScalarWhereInput>
    OR?: Enumerable<AgencyAuditLogScalarWhereInput>
    NOT?: Enumerable<AgencyAuditLogScalarWhereInput>
    id?: StringFilter | string
    agencyId?: StringFilter | string
    userId?: StringNullableFilter | string | null
    action?: StringFilter | string
    entityType?: StringFilter | string
    entityId?: StringNullableFilter | string | null
    changes?: JsonNullableFilter
    metadata?: JsonNullableFilter
    ipAddress?: StringNullableFilter | string | null
    userAgent?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
  }

  export type SwarmExecutionUpsertWithWhereUniqueWithoutAgencyInput = {
    where: SwarmExecutionWhereUniqueInput
    update: XOR<SwarmExecutionUpdateWithoutAgencyInput, SwarmExecutionUncheckedUpdateWithoutAgencyInput>
    create: XOR<SwarmExecutionCreateWithoutAgencyInput, SwarmExecutionUncheckedCreateWithoutAgencyInput>
  }

  export type SwarmExecutionUpdateWithWhereUniqueWithoutAgencyInput = {
    where: SwarmExecutionWhereUniqueInput
    data: XOR<SwarmExecutionUpdateWithoutAgencyInput, SwarmExecutionUncheckedUpdateWithoutAgencyInput>
  }

  export type SwarmExecutionUpdateManyWithWhereWithoutAgencyInput = {
    where: SwarmExecutionScalarWhereInput
    data: XOR<SwarmExecutionUpdateManyMutationInput, SwarmExecutionUncheckedUpdateManyWithoutSwarmExecutionsInput>
  }

  export type SwarmExecutionScalarWhereInput = {
    AND?: Enumerable<SwarmExecutionScalarWhereInput>
    OR?: Enumerable<SwarmExecutionScalarWhereInput>
    NOT?: Enumerable<SwarmExecutionScalarWhereInput>
    id?: StringFilter | string
    serviceRequestId?: StringNullableFilter | string | null
    agencyId?: StringFilter | string
    status?: EnumSwarmExecutionStatusFilter | SwarmExecutionStatus
    qualityScore?: FloatNullableFilter | number | null
    activeAgents?: JsonFilter
    executionPlan?: JsonFilter
    results?: JsonNullableFilter
    startedAt?: DateTimeFilter | Date | string
    completedAt?: DateTimeNullableFilter | Date | string | null
  }

  export type ServiceRequestUpsertWithWhereUniqueWithoutAgencyInput = {
    where: ServiceRequestWhereUniqueInput
    update: XOR<ServiceRequestUpdateWithoutAgencyInput, ServiceRequestUncheckedUpdateWithoutAgencyInput>
    create: XOR<ServiceRequestCreateWithoutAgencyInput, ServiceRequestUncheckedCreateWithoutAgencyInput>
  }

  export type ServiceRequestUpdateWithWhereUniqueWithoutAgencyInput = {
    where: ServiceRequestWhereUniqueInput
    data: XOR<ServiceRequestUpdateWithoutAgencyInput, ServiceRequestUncheckedUpdateWithoutAgencyInput>
  }

  export type ServiceRequestUpdateManyWithWhereWithoutAgencyInput = {
    where: ServiceRequestScalarWhereInput
    data: XOR<ServiceRequestUpdateManyMutationInput, ServiceRequestUncheckedUpdateManyWithoutServiceRequestsInput>
  }

  export type ServiceRequestScalarWhereInput = {
    AND?: Enumerable<ServiceRequestScalarWhereInput>
    OR?: Enumerable<ServiceRequestScalarWhereInput>
    NOT?: Enumerable<ServiceRequestScalarWhereInput>
    id?: StringFilter | string
    agencyId?: StringFilter | string
    userId?: StringFilter | string
    categoryId?: StringFilter | string
    providerId?: StringNullableFilter | string | null
    title?: StringFilter | string
    description?: StringFilter | string
    requirements?: JsonNullableFilter
    status?: EnumServiceRequestStatusFilter | ServiceRequestStatus
    priority?: EnumRequestPriorityFilter | RequestPriority
    estimatedCost?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    actualCost?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    qualityScore?: FloatNullableFilter | number | null
    clientSatisfaction?: FloatNullableFilter | number | null
    requestedAt?: DateTimeFilter | Date | string
    assignedAt?: DateTimeNullableFilter | Date | string | null
    startedAt?: DateTimeNullableFilter | Date | string | null
    completedAt?: DateTimeNullableFilter | Date | string | null
    dueDate?: DateTimeNullableFilter | Date | string | null
    deliverables?: JsonNullableFilter
    notes?: StringNullableFilter | string | null
  }

  export type ServiceProviderUpsertWithWhereUniqueWithoutAgencyInput = {
    where: ServiceProviderWhereUniqueInput
    update: XOR<ServiceProviderUpdateWithoutAgencyInput, ServiceProviderUncheckedUpdateWithoutAgencyInput>
    create: XOR<ServiceProviderCreateWithoutAgencyInput, ServiceProviderUncheckedCreateWithoutAgencyInput>
  }

  export type ServiceProviderUpdateWithWhereUniqueWithoutAgencyInput = {
    where: ServiceProviderWhereUniqueInput
    data: XOR<ServiceProviderUpdateWithoutAgencyInput, ServiceProviderUncheckedUpdateWithoutAgencyInput>
  }

  export type ServiceProviderUpdateManyWithWhereWithoutAgencyInput = {
    where: ServiceProviderScalarWhereInput
    data: XOR<ServiceProviderUpdateManyMutationInput, ServiceProviderUncheckedUpdateManyWithoutServiceProvidersInput>
  }

  export type ServiceProviderScalarWhereInput = {
    AND?: Enumerable<ServiceProviderScalarWhereInput>
    OR?: Enumerable<ServiceProviderScalarWhereInput>
    NOT?: Enumerable<ServiceProviderScalarWhereInput>
    id?: StringFilter | string
    agencyId?: StringFilter | string
    agentId?: StringFilter | string
    categoryId?: StringFilter | string
    capabilities?: JsonFilter
    qualityRating?: FloatFilter | number
    completionRate?: FloatFilter | number
    averageRating?: FloatFilter | number
    totalCompletions?: IntFilter | number
    isActive?: BoolFilter | boolean
    maxConcurrent?: IntFilter | number
    currentLoad?: IntFilter | number
    pricingOverride?: JsonNullableFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type AgencyCreateWithoutUsersInput = {
    id?: string
    name: string
    subdomain: string
    slug: string
    subscriptionTier?: AgencyTier
    subscriptionStatus?: SubscriptionStatus
    billingEmail: string
    branding?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    userLimit?: number
    agentLimit?: number
    storageLimit?: number
    isActive?: boolean
    trialEndsAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chats?: ChatCreateNestedManyWithoutAgencyInput
    sessions?: SessionCreateNestedManyWithoutAgencyInput
    subscriptions?: AgencySubscriptionCreateNestedManyWithoutAgencyInput
    auditLogs?: AgencyAuditLogCreateNestedManyWithoutAgencyInput
    swarmExecutions?: SwarmExecutionCreateNestedManyWithoutAgencyInput
    serviceRequests?: ServiceRequestCreateNestedManyWithoutAgencyInput
    serviceProviders?: ServiceProviderCreateNestedManyWithoutAgencyInput
  }

  export type AgencyUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    subdomain: string
    slug: string
    subscriptionTier?: AgencyTier
    subscriptionStatus?: SubscriptionStatus
    billingEmail: string
    branding?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    userLimit?: number
    agentLimit?: number
    storageLimit?: number
    isActive?: boolean
    trialEndsAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chats?: ChatUncheckedCreateNestedManyWithoutAgencyInput
    sessions?: SessionUncheckedCreateNestedManyWithoutAgencyInput
    subscriptions?: AgencySubscriptionUncheckedCreateNestedManyWithoutAgencyInput
    auditLogs?: AgencyAuditLogUncheckedCreateNestedManyWithoutAgencyInput
    swarmExecutions?: SwarmExecutionUncheckedCreateNestedManyWithoutAgencyInput
    serviceRequests?: ServiceRequestUncheckedCreateNestedManyWithoutAgencyInput
    serviceProviders?: ServiceProviderUncheckedCreateNestedManyWithoutAgencyInput
  }

  export type AgencyCreateOrConnectWithoutUsersInput = {
    where: AgencyWhereUniqueInput
    create: XOR<AgencyCreateWithoutUsersInput, AgencyUncheckedCreateWithoutUsersInput>
  }

  export type ChatCreateWithoutCreatorInput = {
    id?: string
    title?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    agency: AgencyCreateNestedOneWithoutChatsInput
  }

  export type ChatUncheckedCreateWithoutCreatorInput = {
    id?: string
    agencyId: string
    title?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChatCreateOrConnectWithoutCreatorInput = {
    where: ChatWhereUniqueInput
    create: XOR<ChatCreateWithoutCreatorInput, ChatUncheckedCreateWithoutCreatorInput>
  }

  export type ChatCreateManyCreatorInputEnvelope = {
    data: Enumerable<ChatCreateManyCreatorInput>
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
    agency: AgencyCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    agencyId: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: Enumerable<SessionCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type AgencyAuditLogCreateWithoutUserInput = {
    id?: string
    action: string
    entityType: string
    entityId?: string | null
    changes?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    agency: AgencyCreateNestedOneWithoutAuditLogsInput
  }

  export type AgencyAuditLogUncheckedCreateWithoutUserInput = {
    id?: string
    agencyId: string
    action: string
    entityType: string
    entityId?: string | null
    changes?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AgencyAuditLogCreateOrConnectWithoutUserInput = {
    where: AgencyAuditLogWhereUniqueInput
    create: XOR<AgencyAuditLogCreateWithoutUserInput, AgencyAuditLogUncheckedCreateWithoutUserInput>
  }

  export type AgencyAuditLogCreateManyUserInputEnvelope = {
    data: Enumerable<AgencyAuditLogCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ServiceRequestCreateWithoutUserInput = {
    id?: string
    title: string
    description: string
    requirements?: NullableJsonNullValueInput | InputJsonValue
    status?: ServiceRequestStatus
    priority?: RequestPriority
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    qualityScore?: number | null
    clientSatisfaction?: number | null
    requestedAt?: Date | string
    assignedAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate?: Date | string | null
    deliverables?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
    agency: AgencyCreateNestedOneWithoutServiceRequestsInput
    category: ServiceCategoryCreateNestedOneWithoutServiceRequestsInput
    provider?: ServiceProviderCreateNestedOneWithoutServiceRequestsInput
    reviews?: ServiceReviewCreateNestedManyWithoutServiceRequestInput
  }

  export type ServiceRequestUncheckedCreateWithoutUserInput = {
    id?: string
    agencyId: string
    categoryId: string
    providerId?: string | null
    title: string
    description: string
    requirements?: NullableJsonNullValueInput | InputJsonValue
    status?: ServiceRequestStatus
    priority?: RequestPriority
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    qualityScore?: number | null
    clientSatisfaction?: number | null
    requestedAt?: Date | string
    assignedAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate?: Date | string | null
    deliverables?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
    reviews?: ServiceReviewUncheckedCreateNestedManyWithoutServiceRequestInput
  }

  export type ServiceRequestCreateOrConnectWithoutUserInput = {
    where: ServiceRequestWhereUniqueInput
    create: XOR<ServiceRequestCreateWithoutUserInput, ServiceRequestUncheckedCreateWithoutUserInput>
  }

  export type ServiceRequestCreateManyUserInputEnvelope = {
    data: Enumerable<ServiceRequestCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ProviderReviewCreateWithoutReviewerInput = {
    id?: string
    rating: number
    comment?: string | null
    criteria?: NullableJsonNullValueInput | InputJsonValue
    serviceType?: string | null
    createdAt?: Date | string
    provider: ServiceProviderCreateNestedOneWithoutReviewsInput
  }

  export type ProviderReviewUncheckedCreateWithoutReviewerInput = {
    id?: string
    providerId: string
    rating: number
    comment?: string | null
    criteria?: NullableJsonNullValueInput | InputJsonValue
    serviceType?: string | null
    createdAt?: Date | string
  }

  export type ProviderReviewCreateOrConnectWithoutReviewerInput = {
    where: ProviderReviewWhereUniqueInput
    create: XOR<ProviderReviewCreateWithoutReviewerInput, ProviderReviewUncheckedCreateWithoutReviewerInput>
  }

  export type ProviderReviewCreateManyReviewerInputEnvelope = {
    data: Enumerable<ProviderReviewCreateManyReviewerInput>
    skipDuplicates?: boolean
  }

  export type ServiceReviewCreateWithoutReviewerInput = {
    id?: string
    overallRating: number
    qualityRating?: number | null
    speedRating?: number | null
    communicationRating?: number | null
    comment?: string | null
    recommendations?: string | null
    createdAt?: Date | string
    serviceRequest: ServiceRequestCreateNestedOneWithoutReviewsInput
  }

  export type ServiceReviewUncheckedCreateWithoutReviewerInput = {
    id?: string
    serviceRequestId: string
    overallRating: number
    qualityRating?: number | null
    speedRating?: number | null
    communicationRating?: number | null
    comment?: string | null
    recommendations?: string | null
    createdAt?: Date | string
  }

  export type ServiceReviewCreateOrConnectWithoutReviewerInput = {
    where: ServiceReviewWhereUniqueInput
    create: XOR<ServiceReviewCreateWithoutReviewerInput, ServiceReviewUncheckedCreateWithoutReviewerInput>
  }

  export type ServiceReviewCreateManyReviewerInputEnvelope = {
    data: Enumerable<ServiceReviewCreateManyReviewerInput>
    skipDuplicates?: boolean
  }

  export type AgencyUpsertWithoutUsersInput = {
    update: XOR<AgencyUpdateWithoutUsersInput, AgencyUncheckedUpdateWithoutUsersInput>
    create: XOR<AgencyCreateWithoutUsersInput, AgencyUncheckedCreateWithoutUsersInput>
  }

  export type AgencyUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: EnumAgencyTierFieldUpdateOperationsInput | AgencyTier
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | SubscriptionStatus
    billingEmail?: StringFieldUpdateOperationsInput | string
    branding?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    userLimit?: IntFieldUpdateOperationsInput | number
    agentLimit?: IntFieldUpdateOperationsInput | number
    storageLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chats?: ChatUpdateManyWithoutAgencyNestedInput
    sessions?: SessionUpdateManyWithoutAgencyNestedInput
    subscriptions?: AgencySubscriptionUpdateManyWithoutAgencyNestedInput
    auditLogs?: AgencyAuditLogUpdateManyWithoutAgencyNestedInput
    swarmExecutions?: SwarmExecutionUpdateManyWithoutAgencyNestedInput
    serviceRequests?: ServiceRequestUpdateManyWithoutAgencyNestedInput
    serviceProviders?: ServiceProviderUpdateManyWithoutAgencyNestedInput
  }

  export type AgencyUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: EnumAgencyTierFieldUpdateOperationsInput | AgencyTier
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | SubscriptionStatus
    billingEmail?: StringFieldUpdateOperationsInput | string
    branding?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    userLimit?: IntFieldUpdateOperationsInput | number
    agentLimit?: IntFieldUpdateOperationsInput | number
    storageLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chats?: ChatUncheckedUpdateManyWithoutAgencyNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutAgencyNestedInput
    subscriptions?: AgencySubscriptionUncheckedUpdateManyWithoutAgencyNestedInput
    auditLogs?: AgencyAuditLogUncheckedUpdateManyWithoutAgencyNestedInput
    swarmExecutions?: SwarmExecutionUncheckedUpdateManyWithoutAgencyNestedInput
    serviceRequests?: ServiceRequestUncheckedUpdateManyWithoutAgencyNestedInput
    serviceProviders?: ServiceProviderUncheckedUpdateManyWithoutAgencyNestedInput
  }

  export type ChatUpsertWithWhereUniqueWithoutCreatorInput = {
    where: ChatWhereUniqueInput
    update: XOR<ChatUpdateWithoutCreatorInput, ChatUncheckedUpdateWithoutCreatorInput>
    create: XOR<ChatCreateWithoutCreatorInput, ChatUncheckedCreateWithoutCreatorInput>
  }

  export type ChatUpdateWithWhereUniqueWithoutCreatorInput = {
    where: ChatWhereUniqueInput
    data: XOR<ChatUpdateWithoutCreatorInput, ChatUncheckedUpdateWithoutCreatorInput>
  }

  export type ChatUpdateManyWithWhereWithoutCreatorInput = {
    where: ChatScalarWhereInput
    data: XOR<ChatUpdateManyMutationInput, ChatUncheckedUpdateManyWithoutCreatedChatsInput>
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutSessionsInput>
  }

  export type AgencyAuditLogUpsertWithWhereUniqueWithoutUserInput = {
    where: AgencyAuditLogWhereUniqueInput
    update: XOR<AgencyAuditLogUpdateWithoutUserInput, AgencyAuditLogUncheckedUpdateWithoutUserInput>
    create: XOR<AgencyAuditLogCreateWithoutUserInput, AgencyAuditLogUncheckedCreateWithoutUserInput>
  }

  export type AgencyAuditLogUpdateWithWhereUniqueWithoutUserInput = {
    where: AgencyAuditLogWhereUniqueInput
    data: XOR<AgencyAuditLogUpdateWithoutUserInput, AgencyAuditLogUncheckedUpdateWithoutUserInput>
  }

  export type AgencyAuditLogUpdateManyWithWhereWithoutUserInput = {
    where: AgencyAuditLogScalarWhereInput
    data: XOR<AgencyAuditLogUpdateManyMutationInput, AgencyAuditLogUncheckedUpdateManyWithoutAuditLogsInput>
  }

  export type ServiceRequestUpsertWithWhereUniqueWithoutUserInput = {
    where: ServiceRequestWhereUniqueInput
    update: XOR<ServiceRequestUpdateWithoutUserInput, ServiceRequestUncheckedUpdateWithoutUserInput>
    create: XOR<ServiceRequestCreateWithoutUserInput, ServiceRequestUncheckedCreateWithoutUserInput>
  }

  export type ServiceRequestUpdateWithWhereUniqueWithoutUserInput = {
    where: ServiceRequestWhereUniqueInput
    data: XOR<ServiceRequestUpdateWithoutUserInput, ServiceRequestUncheckedUpdateWithoutUserInput>
  }

  export type ServiceRequestUpdateManyWithWhereWithoutUserInput = {
    where: ServiceRequestScalarWhereInput
    data: XOR<ServiceRequestUpdateManyMutationInput, ServiceRequestUncheckedUpdateManyWithoutServiceRequestsInput>
  }

  export type ProviderReviewUpsertWithWhereUniqueWithoutReviewerInput = {
    where: ProviderReviewWhereUniqueInput
    update: XOR<ProviderReviewUpdateWithoutReviewerInput, ProviderReviewUncheckedUpdateWithoutReviewerInput>
    create: XOR<ProviderReviewCreateWithoutReviewerInput, ProviderReviewUncheckedCreateWithoutReviewerInput>
  }

  export type ProviderReviewUpdateWithWhereUniqueWithoutReviewerInput = {
    where: ProviderReviewWhereUniqueInput
    data: XOR<ProviderReviewUpdateWithoutReviewerInput, ProviderReviewUncheckedUpdateWithoutReviewerInput>
  }

  export type ProviderReviewUpdateManyWithWhereWithoutReviewerInput = {
    where: ProviderReviewScalarWhereInput
    data: XOR<ProviderReviewUpdateManyMutationInput, ProviderReviewUncheckedUpdateManyWithoutProviderReviewsInput>
  }

  export type ProviderReviewScalarWhereInput = {
    AND?: Enumerable<ProviderReviewScalarWhereInput>
    OR?: Enumerable<ProviderReviewScalarWhereInput>
    NOT?: Enumerable<ProviderReviewScalarWhereInput>
    id?: StringFilter | string
    providerId?: StringFilter | string
    reviewerId?: StringFilter | string
    rating?: IntFilter | number
    comment?: StringNullableFilter | string | null
    criteria?: JsonNullableFilter
    serviceType?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
  }

  export type ServiceReviewUpsertWithWhereUniqueWithoutReviewerInput = {
    where: ServiceReviewWhereUniqueInput
    update: XOR<ServiceReviewUpdateWithoutReviewerInput, ServiceReviewUncheckedUpdateWithoutReviewerInput>
    create: XOR<ServiceReviewCreateWithoutReviewerInput, ServiceReviewUncheckedCreateWithoutReviewerInput>
  }

  export type ServiceReviewUpdateWithWhereUniqueWithoutReviewerInput = {
    where: ServiceReviewWhereUniqueInput
    data: XOR<ServiceReviewUpdateWithoutReviewerInput, ServiceReviewUncheckedUpdateWithoutReviewerInput>
  }

  export type ServiceReviewUpdateManyWithWhereWithoutReviewerInput = {
    where: ServiceReviewScalarWhereInput
    data: XOR<ServiceReviewUpdateManyMutationInput, ServiceReviewUncheckedUpdateManyWithoutServiceReviewsInput>
  }

  export type ServiceReviewScalarWhereInput = {
    AND?: Enumerable<ServiceReviewScalarWhereInput>
    OR?: Enumerable<ServiceReviewScalarWhereInput>
    NOT?: Enumerable<ServiceReviewScalarWhereInput>
    id?: StringFilter | string
    serviceRequestId?: StringFilter | string
    reviewerId?: StringFilter | string
    overallRating?: IntFilter | number
    qualityRating?: IntNullableFilter | number | null
    speedRating?: IntNullableFilter | number | null
    communicationRating?: IntNullableFilter | number | null
    comment?: StringNullableFilter | string | null
    recommendations?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
  }

  export type AgencyCreateWithoutChatsInput = {
    id?: string
    name: string
    subdomain: string
    slug: string
    subscriptionTier?: AgencyTier
    subscriptionStatus?: SubscriptionStatus
    billingEmail: string
    branding?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    userLimit?: number
    agentLimit?: number
    storageLimit?: number
    isActive?: boolean
    trialEndsAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutAgencyInput
    sessions?: SessionCreateNestedManyWithoutAgencyInput
    subscriptions?: AgencySubscriptionCreateNestedManyWithoutAgencyInput
    auditLogs?: AgencyAuditLogCreateNestedManyWithoutAgencyInput
    swarmExecutions?: SwarmExecutionCreateNestedManyWithoutAgencyInput
    serviceRequests?: ServiceRequestCreateNestedManyWithoutAgencyInput
    serviceProviders?: ServiceProviderCreateNestedManyWithoutAgencyInput
  }

  export type AgencyUncheckedCreateWithoutChatsInput = {
    id?: string
    name: string
    subdomain: string
    slug: string
    subscriptionTier?: AgencyTier
    subscriptionStatus?: SubscriptionStatus
    billingEmail: string
    branding?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    userLimit?: number
    agentLimit?: number
    storageLimit?: number
    isActive?: boolean
    trialEndsAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutAgencyInput
    sessions?: SessionUncheckedCreateNestedManyWithoutAgencyInput
    subscriptions?: AgencySubscriptionUncheckedCreateNestedManyWithoutAgencyInput
    auditLogs?: AgencyAuditLogUncheckedCreateNestedManyWithoutAgencyInput
    swarmExecutions?: SwarmExecutionUncheckedCreateNestedManyWithoutAgencyInput
    serviceRequests?: ServiceRequestUncheckedCreateNestedManyWithoutAgencyInput
    serviceProviders?: ServiceProviderUncheckedCreateNestedManyWithoutAgencyInput
  }

  export type AgencyCreateOrConnectWithoutChatsInput = {
    where: AgencyWhereUniqueInput
    create: XOR<AgencyCreateWithoutChatsInput, AgencyUncheckedCreateWithoutChatsInput>
  }

  export type UserCreateWithoutCreatedChatsInput = {
    id?: string
    email: string
    name?: string | null
    passwordHash: string
    role?: EnhancedUserRole
    permissions?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    onboardingCompleted?: boolean
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    agency: AgencyCreateNestedOneWithoutUsersInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    auditLogs?: AgencyAuditLogCreateNestedManyWithoutUserInput
    serviceRequests?: ServiceRequestCreateNestedManyWithoutUserInput
    providerReviews?: ProviderReviewCreateNestedManyWithoutReviewerInput
    serviceReviews?: ServiceReviewCreateNestedManyWithoutReviewerInput
  }

  export type UserUncheckedCreateWithoutCreatedChatsInput = {
    id?: string
    email: string
    name?: string | null
    passwordHash: string
    agencyId: string
    role?: EnhancedUserRole
    permissions?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    onboardingCompleted?: boolean
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AgencyAuditLogUncheckedCreateNestedManyWithoutUserInput
    serviceRequests?: ServiceRequestUncheckedCreateNestedManyWithoutUserInput
    providerReviews?: ProviderReviewUncheckedCreateNestedManyWithoutReviewerInput
    serviceReviews?: ServiceReviewUncheckedCreateNestedManyWithoutReviewerInput
  }

  export type UserCreateOrConnectWithoutCreatedChatsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedChatsInput, UserUncheckedCreateWithoutCreatedChatsInput>
  }

  export type AgencyUpsertWithoutChatsInput = {
    update: XOR<AgencyUpdateWithoutChatsInput, AgencyUncheckedUpdateWithoutChatsInput>
    create: XOR<AgencyCreateWithoutChatsInput, AgencyUncheckedCreateWithoutChatsInput>
  }

  export type AgencyUpdateWithoutChatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: EnumAgencyTierFieldUpdateOperationsInput | AgencyTier
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | SubscriptionStatus
    billingEmail?: StringFieldUpdateOperationsInput | string
    branding?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    userLimit?: IntFieldUpdateOperationsInput | number
    agentLimit?: IntFieldUpdateOperationsInput | number
    storageLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutAgencyNestedInput
    sessions?: SessionUpdateManyWithoutAgencyNestedInput
    subscriptions?: AgencySubscriptionUpdateManyWithoutAgencyNestedInput
    auditLogs?: AgencyAuditLogUpdateManyWithoutAgencyNestedInput
    swarmExecutions?: SwarmExecutionUpdateManyWithoutAgencyNestedInput
    serviceRequests?: ServiceRequestUpdateManyWithoutAgencyNestedInput
    serviceProviders?: ServiceProviderUpdateManyWithoutAgencyNestedInput
  }

  export type AgencyUncheckedUpdateWithoutChatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: EnumAgencyTierFieldUpdateOperationsInput | AgencyTier
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | SubscriptionStatus
    billingEmail?: StringFieldUpdateOperationsInput | string
    branding?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    userLimit?: IntFieldUpdateOperationsInput | number
    agentLimit?: IntFieldUpdateOperationsInput | number
    storageLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutAgencyNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutAgencyNestedInput
    subscriptions?: AgencySubscriptionUncheckedUpdateManyWithoutAgencyNestedInput
    auditLogs?: AgencyAuditLogUncheckedUpdateManyWithoutAgencyNestedInput
    swarmExecutions?: SwarmExecutionUncheckedUpdateManyWithoutAgencyNestedInput
    serviceRequests?: ServiceRequestUncheckedUpdateManyWithoutAgencyNestedInput
    serviceProviders?: ServiceProviderUncheckedUpdateManyWithoutAgencyNestedInput
  }

  export type UserUpsertWithoutCreatedChatsInput = {
    update: XOR<UserUpdateWithoutCreatedChatsInput, UserUncheckedUpdateWithoutCreatedChatsInput>
    create: XOR<UserCreateWithoutCreatedChatsInput, UserUncheckedCreateWithoutCreatedChatsInput>
  }

  export type UserUpdateWithoutCreatedChatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumEnhancedUserRoleFieldUpdateOperationsInput | EnhancedUserRole
    permissions?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agency?: AgencyUpdateOneRequiredWithoutUsersNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    auditLogs?: AgencyAuditLogUpdateManyWithoutUserNestedInput
    serviceRequests?: ServiceRequestUpdateManyWithoutUserNestedInput
    providerReviews?: ProviderReviewUpdateManyWithoutReviewerNestedInput
    serviceReviews?: ServiceReviewUpdateManyWithoutReviewerNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedChatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    role?: EnumEnhancedUserRoleFieldUpdateOperationsInput | EnhancedUserRole
    permissions?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AgencyAuditLogUncheckedUpdateManyWithoutUserNestedInput
    serviceRequests?: ServiceRequestUncheckedUpdateManyWithoutUserNestedInput
    providerReviews?: ProviderReviewUncheckedUpdateManyWithoutReviewerNestedInput
    serviceReviews?: ServiceReviewUncheckedUpdateManyWithoutReviewerNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    email: string
    name?: string | null
    passwordHash: string
    role?: EnhancedUserRole
    permissions?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    onboardingCompleted?: boolean
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    agency: AgencyCreateNestedOneWithoutUsersInput
    createdChats?: ChatCreateNestedManyWithoutCreatorInput
    auditLogs?: AgencyAuditLogCreateNestedManyWithoutUserInput
    serviceRequests?: ServiceRequestCreateNestedManyWithoutUserInput
    providerReviews?: ProviderReviewCreateNestedManyWithoutReviewerInput
    serviceReviews?: ServiceReviewCreateNestedManyWithoutReviewerInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    email: string
    name?: string | null
    passwordHash: string
    agencyId: string
    role?: EnhancedUserRole
    permissions?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    onboardingCompleted?: boolean
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdChats?: ChatUncheckedCreateNestedManyWithoutCreatorInput
    auditLogs?: AgencyAuditLogUncheckedCreateNestedManyWithoutUserInput
    serviceRequests?: ServiceRequestUncheckedCreateNestedManyWithoutUserInput
    providerReviews?: ProviderReviewUncheckedCreateNestedManyWithoutReviewerInput
    serviceReviews?: ServiceReviewUncheckedCreateNestedManyWithoutReviewerInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type AgencyCreateWithoutSessionsInput = {
    id?: string
    name: string
    subdomain: string
    slug: string
    subscriptionTier?: AgencyTier
    subscriptionStatus?: SubscriptionStatus
    billingEmail: string
    branding?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    userLimit?: number
    agentLimit?: number
    storageLimit?: number
    isActive?: boolean
    trialEndsAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutAgencyInput
    chats?: ChatCreateNestedManyWithoutAgencyInput
    subscriptions?: AgencySubscriptionCreateNestedManyWithoutAgencyInput
    auditLogs?: AgencyAuditLogCreateNestedManyWithoutAgencyInput
    swarmExecutions?: SwarmExecutionCreateNestedManyWithoutAgencyInput
    serviceRequests?: ServiceRequestCreateNestedManyWithoutAgencyInput
    serviceProviders?: ServiceProviderCreateNestedManyWithoutAgencyInput
  }

  export type AgencyUncheckedCreateWithoutSessionsInput = {
    id?: string
    name: string
    subdomain: string
    slug: string
    subscriptionTier?: AgencyTier
    subscriptionStatus?: SubscriptionStatus
    billingEmail: string
    branding?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    userLimit?: number
    agentLimit?: number
    storageLimit?: number
    isActive?: boolean
    trialEndsAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutAgencyInput
    chats?: ChatUncheckedCreateNestedManyWithoutAgencyInput
    subscriptions?: AgencySubscriptionUncheckedCreateNestedManyWithoutAgencyInput
    auditLogs?: AgencyAuditLogUncheckedCreateNestedManyWithoutAgencyInput
    swarmExecutions?: SwarmExecutionUncheckedCreateNestedManyWithoutAgencyInput
    serviceRequests?: ServiceRequestUncheckedCreateNestedManyWithoutAgencyInput
    serviceProviders?: ServiceProviderUncheckedCreateNestedManyWithoutAgencyInput
  }

  export type AgencyCreateOrConnectWithoutSessionsInput = {
    where: AgencyWhereUniqueInput
    create: XOR<AgencyCreateWithoutSessionsInput, AgencyUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumEnhancedUserRoleFieldUpdateOperationsInput | EnhancedUserRole
    permissions?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agency?: AgencyUpdateOneRequiredWithoutUsersNestedInput
    createdChats?: ChatUpdateManyWithoutCreatorNestedInput
    auditLogs?: AgencyAuditLogUpdateManyWithoutUserNestedInput
    serviceRequests?: ServiceRequestUpdateManyWithoutUserNestedInput
    providerReviews?: ProviderReviewUpdateManyWithoutReviewerNestedInput
    serviceReviews?: ServiceReviewUpdateManyWithoutReviewerNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    role?: EnumEnhancedUserRoleFieldUpdateOperationsInput | EnhancedUserRole
    permissions?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdChats?: ChatUncheckedUpdateManyWithoutCreatorNestedInput
    auditLogs?: AgencyAuditLogUncheckedUpdateManyWithoutUserNestedInput
    serviceRequests?: ServiceRequestUncheckedUpdateManyWithoutUserNestedInput
    providerReviews?: ProviderReviewUncheckedUpdateManyWithoutReviewerNestedInput
    serviceReviews?: ServiceReviewUncheckedUpdateManyWithoutReviewerNestedInput
  }

  export type AgencyUpsertWithoutSessionsInput = {
    update: XOR<AgencyUpdateWithoutSessionsInput, AgencyUncheckedUpdateWithoutSessionsInput>
    create: XOR<AgencyCreateWithoutSessionsInput, AgencyUncheckedCreateWithoutSessionsInput>
  }

  export type AgencyUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: EnumAgencyTierFieldUpdateOperationsInput | AgencyTier
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | SubscriptionStatus
    billingEmail?: StringFieldUpdateOperationsInput | string
    branding?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    userLimit?: IntFieldUpdateOperationsInput | number
    agentLimit?: IntFieldUpdateOperationsInput | number
    storageLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutAgencyNestedInput
    chats?: ChatUpdateManyWithoutAgencyNestedInput
    subscriptions?: AgencySubscriptionUpdateManyWithoutAgencyNestedInput
    auditLogs?: AgencyAuditLogUpdateManyWithoutAgencyNestedInput
    swarmExecutions?: SwarmExecutionUpdateManyWithoutAgencyNestedInput
    serviceRequests?: ServiceRequestUpdateManyWithoutAgencyNestedInput
    serviceProviders?: ServiceProviderUpdateManyWithoutAgencyNestedInput
  }

  export type AgencyUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: EnumAgencyTierFieldUpdateOperationsInput | AgencyTier
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | SubscriptionStatus
    billingEmail?: StringFieldUpdateOperationsInput | string
    branding?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    userLimit?: IntFieldUpdateOperationsInput | number
    agentLimit?: IntFieldUpdateOperationsInput | number
    storageLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutAgencyNestedInput
    chats?: ChatUncheckedUpdateManyWithoutAgencyNestedInput
    subscriptions?: AgencySubscriptionUncheckedUpdateManyWithoutAgencyNestedInput
    auditLogs?: AgencyAuditLogUncheckedUpdateManyWithoutAgencyNestedInput
    swarmExecutions?: SwarmExecutionUncheckedUpdateManyWithoutAgencyNestedInput
    serviceRequests?: ServiceRequestUncheckedUpdateManyWithoutAgencyNestedInput
    serviceProviders?: ServiceProviderUncheckedUpdateManyWithoutAgencyNestedInput
  }

  export type AgencyCreateWithoutSwarmExecutionsInput = {
    id?: string
    name: string
    subdomain: string
    slug: string
    subscriptionTier?: AgencyTier
    subscriptionStatus?: SubscriptionStatus
    billingEmail: string
    branding?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    userLimit?: number
    agentLimit?: number
    storageLimit?: number
    isActive?: boolean
    trialEndsAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutAgencyInput
    chats?: ChatCreateNestedManyWithoutAgencyInput
    sessions?: SessionCreateNestedManyWithoutAgencyInput
    subscriptions?: AgencySubscriptionCreateNestedManyWithoutAgencyInput
    auditLogs?: AgencyAuditLogCreateNestedManyWithoutAgencyInput
    serviceRequests?: ServiceRequestCreateNestedManyWithoutAgencyInput
    serviceProviders?: ServiceProviderCreateNestedManyWithoutAgencyInput
  }

  export type AgencyUncheckedCreateWithoutSwarmExecutionsInput = {
    id?: string
    name: string
    subdomain: string
    slug: string
    subscriptionTier?: AgencyTier
    subscriptionStatus?: SubscriptionStatus
    billingEmail: string
    branding?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    userLimit?: number
    agentLimit?: number
    storageLimit?: number
    isActive?: boolean
    trialEndsAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutAgencyInput
    chats?: ChatUncheckedCreateNestedManyWithoutAgencyInput
    sessions?: SessionUncheckedCreateNestedManyWithoutAgencyInput
    subscriptions?: AgencySubscriptionUncheckedCreateNestedManyWithoutAgencyInput
    auditLogs?: AgencyAuditLogUncheckedCreateNestedManyWithoutAgencyInput
    serviceRequests?: ServiceRequestUncheckedCreateNestedManyWithoutAgencyInput
    serviceProviders?: ServiceProviderUncheckedCreateNestedManyWithoutAgencyInput
  }

  export type AgencyCreateOrConnectWithoutSwarmExecutionsInput = {
    where: AgencyWhereUniqueInput
    create: XOR<AgencyCreateWithoutSwarmExecutionsInput, AgencyUncheckedCreateWithoutSwarmExecutionsInput>
  }

  export type ExecutionStepCreateWithoutSwarmExecutionInput = {
    id?: string
    stepId: string
    agentId: string
    action: string
    input?: NullableJsonNullValueInput | InputJsonValue
    output?: NullableJsonNullValueInput | InputJsonValue
    status?: ExecutionStepStatus
    qualityScore?: number | null
    confidence?: number | null
    startedAt?: Date | string
    completedAt?: Date | string | null
  }

  export type ExecutionStepUncheckedCreateWithoutSwarmExecutionInput = {
    id?: string
    stepId: string
    agentId: string
    action: string
    input?: NullableJsonNullValueInput | InputJsonValue
    output?: NullableJsonNullValueInput | InputJsonValue
    status?: ExecutionStepStatus
    qualityScore?: number | null
    confidence?: number | null
    startedAt?: Date | string
    completedAt?: Date | string | null
  }

  export type ExecutionStepCreateOrConnectWithoutSwarmExecutionInput = {
    where: ExecutionStepWhereUniqueInput
    create: XOR<ExecutionStepCreateWithoutSwarmExecutionInput, ExecutionStepUncheckedCreateWithoutSwarmExecutionInput>
  }

  export type ExecutionStepCreateManySwarmExecutionInputEnvelope = {
    data: Enumerable<ExecutionStepCreateManySwarmExecutionInput>
    skipDuplicates?: boolean
  }

  export type SwarmMessageCreateWithoutSwarmExecutionInput = {
    id?: string
    fromAgentId: string
    toAgentId?: string | null
    type?: MessageType
    priority?: MessagePriority
    content: JsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    status?: MessageStatus
    processedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type SwarmMessageUncheckedCreateWithoutSwarmExecutionInput = {
    id?: string
    fromAgentId: string
    toAgentId?: string | null
    type?: MessageType
    priority?: MessagePriority
    content: JsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    status?: MessageStatus
    processedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type SwarmMessageCreateOrConnectWithoutSwarmExecutionInput = {
    where: SwarmMessageWhereUniqueInput
    create: XOR<SwarmMessageCreateWithoutSwarmExecutionInput, SwarmMessageUncheckedCreateWithoutSwarmExecutionInput>
  }

  export type SwarmMessageCreateManySwarmExecutionInputEnvelope = {
    data: Enumerable<SwarmMessageCreateManySwarmExecutionInput>
    skipDuplicates?: boolean
  }

  export type AgencyUpsertWithoutSwarmExecutionsInput = {
    update: XOR<AgencyUpdateWithoutSwarmExecutionsInput, AgencyUncheckedUpdateWithoutSwarmExecutionsInput>
    create: XOR<AgencyCreateWithoutSwarmExecutionsInput, AgencyUncheckedCreateWithoutSwarmExecutionsInput>
  }

  export type AgencyUpdateWithoutSwarmExecutionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: EnumAgencyTierFieldUpdateOperationsInput | AgencyTier
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | SubscriptionStatus
    billingEmail?: StringFieldUpdateOperationsInput | string
    branding?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    userLimit?: IntFieldUpdateOperationsInput | number
    agentLimit?: IntFieldUpdateOperationsInput | number
    storageLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutAgencyNestedInput
    chats?: ChatUpdateManyWithoutAgencyNestedInput
    sessions?: SessionUpdateManyWithoutAgencyNestedInput
    subscriptions?: AgencySubscriptionUpdateManyWithoutAgencyNestedInput
    auditLogs?: AgencyAuditLogUpdateManyWithoutAgencyNestedInput
    serviceRequests?: ServiceRequestUpdateManyWithoutAgencyNestedInput
    serviceProviders?: ServiceProviderUpdateManyWithoutAgencyNestedInput
  }

  export type AgencyUncheckedUpdateWithoutSwarmExecutionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: EnumAgencyTierFieldUpdateOperationsInput | AgencyTier
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | SubscriptionStatus
    billingEmail?: StringFieldUpdateOperationsInput | string
    branding?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    userLimit?: IntFieldUpdateOperationsInput | number
    agentLimit?: IntFieldUpdateOperationsInput | number
    storageLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutAgencyNestedInput
    chats?: ChatUncheckedUpdateManyWithoutAgencyNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutAgencyNestedInput
    subscriptions?: AgencySubscriptionUncheckedUpdateManyWithoutAgencyNestedInput
    auditLogs?: AgencyAuditLogUncheckedUpdateManyWithoutAgencyNestedInput
    serviceRequests?: ServiceRequestUncheckedUpdateManyWithoutAgencyNestedInput
    serviceProviders?: ServiceProviderUncheckedUpdateManyWithoutAgencyNestedInput
  }

  export type ExecutionStepUpsertWithWhereUniqueWithoutSwarmExecutionInput = {
    where: ExecutionStepWhereUniqueInput
    update: XOR<ExecutionStepUpdateWithoutSwarmExecutionInput, ExecutionStepUncheckedUpdateWithoutSwarmExecutionInput>
    create: XOR<ExecutionStepCreateWithoutSwarmExecutionInput, ExecutionStepUncheckedCreateWithoutSwarmExecutionInput>
  }

  export type ExecutionStepUpdateWithWhereUniqueWithoutSwarmExecutionInput = {
    where: ExecutionStepWhereUniqueInput
    data: XOR<ExecutionStepUpdateWithoutSwarmExecutionInput, ExecutionStepUncheckedUpdateWithoutSwarmExecutionInput>
  }

  export type ExecutionStepUpdateManyWithWhereWithoutSwarmExecutionInput = {
    where: ExecutionStepScalarWhereInput
    data: XOR<ExecutionStepUpdateManyMutationInput, ExecutionStepUncheckedUpdateManyWithoutExecutionStepsInput>
  }

  export type ExecutionStepScalarWhereInput = {
    AND?: Enumerable<ExecutionStepScalarWhereInput>
    OR?: Enumerable<ExecutionStepScalarWhereInput>
    NOT?: Enumerable<ExecutionStepScalarWhereInput>
    id?: StringFilter | string
    swarmExecutionId?: StringFilter | string
    stepId?: StringFilter | string
    agentId?: StringFilter | string
    action?: StringFilter | string
    input?: JsonNullableFilter
    output?: JsonNullableFilter
    status?: EnumExecutionStepStatusFilter | ExecutionStepStatus
    qualityScore?: FloatNullableFilter | number | null
    confidence?: FloatNullableFilter | number | null
    startedAt?: DateTimeFilter | Date | string
    completedAt?: DateTimeNullableFilter | Date | string | null
  }

  export type SwarmMessageUpsertWithWhereUniqueWithoutSwarmExecutionInput = {
    where: SwarmMessageWhereUniqueInput
    update: XOR<SwarmMessageUpdateWithoutSwarmExecutionInput, SwarmMessageUncheckedUpdateWithoutSwarmExecutionInput>
    create: XOR<SwarmMessageCreateWithoutSwarmExecutionInput, SwarmMessageUncheckedCreateWithoutSwarmExecutionInput>
  }

  export type SwarmMessageUpdateWithWhereUniqueWithoutSwarmExecutionInput = {
    where: SwarmMessageWhereUniqueInput
    data: XOR<SwarmMessageUpdateWithoutSwarmExecutionInput, SwarmMessageUncheckedUpdateWithoutSwarmExecutionInput>
  }

  export type SwarmMessageUpdateManyWithWhereWithoutSwarmExecutionInput = {
    where: SwarmMessageScalarWhereInput
    data: XOR<SwarmMessageUpdateManyMutationInput, SwarmMessageUncheckedUpdateManyWithoutMessagesInput>
  }

  export type SwarmMessageScalarWhereInput = {
    AND?: Enumerable<SwarmMessageScalarWhereInput>
    OR?: Enumerable<SwarmMessageScalarWhereInput>
    NOT?: Enumerable<SwarmMessageScalarWhereInput>
    id?: StringFilter | string
    swarmExecutionId?: StringFilter | string
    fromAgentId?: StringFilter | string
    toAgentId?: StringNullableFilter | string | null
    type?: EnumMessageTypeFilter | MessageType
    priority?: EnumMessagePriorityFilter | MessagePriority
    content?: JsonFilter
    metadata?: JsonNullableFilter
    status?: EnumMessageStatusFilter | MessageStatus
    processedAt?: DateTimeNullableFilter | Date | string | null
    createdAt?: DateTimeFilter | Date | string
  }

  export type SwarmExecutionCreateWithoutExecutionStepsInput = {
    id?: string
    serviceRequestId?: string | null
    status?: SwarmExecutionStatus
    qualityScore?: number | null
    activeAgents: JsonNullValueInput | InputJsonValue
    executionPlan: JsonNullValueInput | InputJsonValue
    results?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string
    completedAt?: Date | string | null
    agency: AgencyCreateNestedOneWithoutSwarmExecutionsInput
    messages?: SwarmMessageCreateNestedManyWithoutSwarmExecutionInput
  }

  export type SwarmExecutionUncheckedCreateWithoutExecutionStepsInput = {
    id?: string
    serviceRequestId?: string | null
    agencyId: string
    status?: SwarmExecutionStatus
    qualityScore?: number | null
    activeAgents: JsonNullValueInput | InputJsonValue
    executionPlan: JsonNullValueInput | InputJsonValue
    results?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string
    completedAt?: Date | string | null
    messages?: SwarmMessageUncheckedCreateNestedManyWithoutSwarmExecutionInput
  }

  export type SwarmExecutionCreateOrConnectWithoutExecutionStepsInput = {
    where: SwarmExecutionWhereUniqueInput
    create: XOR<SwarmExecutionCreateWithoutExecutionStepsInput, SwarmExecutionUncheckedCreateWithoutExecutionStepsInput>
  }

  export type SwarmExecutionUpsertWithoutExecutionStepsInput = {
    update: XOR<SwarmExecutionUpdateWithoutExecutionStepsInput, SwarmExecutionUncheckedUpdateWithoutExecutionStepsInput>
    create: XOR<SwarmExecutionCreateWithoutExecutionStepsInput, SwarmExecutionUncheckedCreateWithoutExecutionStepsInput>
  }

  export type SwarmExecutionUpdateWithoutExecutionStepsInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceRequestId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSwarmExecutionStatusFieldUpdateOperationsInput | SwarmExecutionStatus
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    activeAgents?: JsonNullValueInput | InputJsonValue
    executionPlan?: JsonNullValueInput | InputJsonValue
    results?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agency?: AgencyUpdateOneRequiredWithoutSwarmExecutionsNestedInput
    messages?: SwarmMessageUpdateManyWithoutSwarmExecutionNestedInput
  }

  export type SwarmExecutionUncheckedUpdateWithoutExecutionStepsInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceRequestId?: NullableStringFieldUpdateOperationsInput | string | null
    agencyId?: StringFieldUpdateOperationsInput | string
    status?: EnumSwarmExecutionStatusFieldUpdateOperationsInput | SwarmExecutionStatus
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    activeAgents?: JsonNullValueInput | InputJsonValue
    executionPlan?: JsonNullValueInput | InputJsonValue
    results?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messages?: SwarmMessageUncheckedUpdateManyWithoutSwarmExecutionNestedInput
  }

  export type SwarmExecutionCreateWithoutMessagesInput = {
    id?: string
    serviceRequestId?: string | null
    status?: SwarmExecutionStatus
    qualityScore?: number | null
    activeAgents: JsonNullValueInput | InputJsonValue
    executionPlan: JsonNullValueInput | InputJsonValue
    results?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string
    completedAt?: Date | string | null
    agency: AgencyCreateNestedOneWithoutSwarmExecutionsInput
    executionSteps?: ExecutionStepCreateNestedManyWithoutSwarmExecutionInput
  }

  export type SwarmExecutionUncheckedCreateWithoutMessagesInput = {
    id?: string
    serviceRequestId?: string | null
    agencyId: string
    status?: SwarmExecutionStatus
    qualityScore?: number | null
    activeAgents: JsonNullValueInput | InputJsonValue
    executionPlan: JsonNullValueInput | InputJsonValue
    results?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string
    completedAt?: Date | string | null
    executionSteps?: ExecutionStepUncheckedCreateNestedManyWithoutSwarmExecutionInput
  }

  export type SwarmExecutionCreateOrConnectWithoutMessagesInput = {
    where: SwarmExecutionWhereUniqueInput
    create: XOR<SwarmExecutionCreateWithoutMessagesInput, SwarmExecutionUncheckedCreateWithoutMessagesInput>
  }

  export type SwarmExecutionUpsertWithoutMessagesInput = {
    update: XOR<SwarmExecutionUpdateWithoutMessagesInput, SwarmExecutionUncheckedUpdateWithoutMessagesInput>
    create: XOR<SwarmExecutionCreateWithoutMessagesInput, SwarmExecutionUncheckedCreateWithoutMessagesInput>
  }

  export type SwarmExecutionUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceRequestId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSwarmExecutionStatusFieldUpdateOperationsInput | SwarmExecutionStatus
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    activeAgents?: JsonNullValueInput | InputJsonValue
    executionPlan?: JsonNullValueInput | InputJsonValue
    results?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agency?: AgencyUpdateOneRequiredWithoutSwarmExecutionsNestedInput
    executionSteps?: ExecutionStepUpdateManyWithoutSwarmExecutionNestedInput
  }

  export type SwarmExecutionUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceRequestId?: NullableStringFieldUpdateOperationsInput | string | null
    agencyId?: StringFieldUpdateOperationsInput | string
    status?: EnumSwarmExecutionStatusFieldUpdateOperationsInput | SwarmExecutionStatus
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    activeAgents?: JsonNullValueInput | InputJsonValue
    executionPlan?: JsonNullValueInput | InputJsonValue
    results?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    executionSteps?: ExecutionStepUncheckedUpdateManyWithoutSwarmExecutionNestedInput
  }

  export type ServiceCategoryCreateWithoutChildrenInput = {
    id?: string
    name: string
    description?: string | null
    slug: string
    isActive?: boolean
    requiresApproval?: boolean
    estimatedDuration?: number | null
    basePricing?: NullableJsonNullValueInput | InputJsonValue
    complexityFactors?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: ServiceCategoryCreateNestedOneWithoutChildrenInput
    serviceRequests?: ServiceRequestCreateNestedManyWithoutCategoryInput
    providers?: ServiceProviderCreateNestedManyWithoutCategoryInput
  }

  export type ServiceCategoryUncheckedCreateWithoutChildrenInput = {
    id?: string
    parentId?: string | null
    name: string
    description?: string | null
    slug: string
    isActive?: boolean
    requiresApproval?: boolean
    estimatedDuration?: number | null
    basePricing?: NullableJsonNullValueInput | InputJsonValue
    complexityFactors?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    serviceRequests?: ServiceRequestUncheckedCreateNestedManyWithoutCategoryInput
    providers?: ServiceProviderUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type ServiceCategoryCreateOrConnectWithoutChildrenInput = {
    where: ServiceCategoryWhereUniqueInput
    create: XOR<ServiceCategoryCreateWithoutChildrenInput, ServiceCategoryUncheckedCreateWithoutChildrenInput>
  }

  export type ServiceCategoryCreateWithoutParentInput = {
    id?: string
    name: string
    description?: string | null
    slug: string
    isActive?: boolean
    requiresApproval?: boolean
    estimatedDuration?: number | null
    basePricing?: NullableJsonNullValueInput | InputJsonValue
    complexityFactors?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: ServiceCategoryCreateNestedManyWithoutParentInput
    serviceRequests?: ServiceRequestCreateNestedManyWithoutCategoryInput
    providers?: ServiceProviderCreateNestedManyWithoutCategoryInput
  }

  export type ServiceCategoryUncheckedCreateWithoutParentInput = {
    id?: string
    name: string
    description?: string | null
    slug: string
    isActive?: boolean
    requiresApproval?: boolean
    estimatedDuration?: number | null
    basePricing?: NullableJsonNullValueInput | InputJsonValue
    complexityFactors?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: ServiceCategoryUncheckedCreateNestedManyWithoutParentInput
    serviceRequests?: ServiceRequestUncheckedCreateNestedManyWithoutCategoryInput
    providers?: ServiceProviderUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type ServiceCategoryCreateOrConnectWithoutParentInput = {
    where: ServiceCategoryWhereUniqueInput
    create: XOR<ServiceCategoryCreateWithoutParentInput, ServiceCategoryUncheckedCreateWithoutParentInput>
  }

  export type ServiceCategoryCreateManyParentInputEnvelope = {
    data: Enumerable<ServiceCategoryCreateManyParentInput>
    skipDuplicates?: boolean
  }

  export type ServiceRequestCreateWithoutCategoryInput = {
    id?: string
    title: string
    description: string
    requirements?: NullableJsonNullValueInput | InputJsonValue
    status?: ServiceRequestStatus
    priority?: RequestPriority
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    qualityScore?: number | null
    clientSatisfaction?: number | null
    requestedAt?: Date | string
    assignedAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate?: Date | string | null
    deliverables?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
    agency: AgencyCreateNestedOneWithoutServiceRequestsInput
    user: UserCreateNestedOneWithoutServiceRequestsInput
    provider?: ServiceProviderCreateNestedOneWithoutServiceRequestsInput
    reviews?: ServiceReviewCreateNestedManyWithoutServiceRequestInput
  }

  export type ServiceRequestUncheckedCreateWithoutCategoryInput = {
    id?: string
    agencyId: string
    userId: string
    providerId?: string | null
    title: string
    description: string
    requirements?: NullableJsonNullValueInput | InputJsonValue
    status?: ServiceRequestStatus
    priority?: RequestPriority
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    qualityScore?: number | null
    clientSatisfaction?: number | null
    requestedAt?: Date | string
    assignedAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate?: Date | string | null
    deliverables?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
    reviews?: ServiceReviewUncheckedCreateNestedManyWithoutServiceRequestInput
  }

  export type ServiceRequestCreateOrConnectWithoutCategoryInput = {
    where: ServiceRequestWhereUniqueInput
    create: XOR<ServiceRequestCreateWithoutCategoryInput, ServiceRequestUncheckedCreateWithoutCategoryInput>
  }

  export type ServiceRequestCreateManyCategoryInputEnvelope = {
    data: Enumerable<ServiceRequestCreateManyCategoryInput>
    skipDuplicates?: boolean
  }

  export type ServiceProviderCreateWithoutCategoryInput = {
    id?: string
    agentId: string
    capabilities: JsonNullValueInput | InputJsonValue
    qualityRating?: number
    completionRate?: number
    averageRating?: number
    totalCompletions?: number
    isActive?: boolean
    maxConcurrent?: number
    currentLoad?: number
    pricingOverride?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    agency: AgencyCreateNestedOneWithoutServiceProvidersInput
    serviceRequests?: ServiceRequestCreateNestedManyWithoutProviderInput
    reviews?: ProviderReviewCreateNestedManyWithoutProviderInput
  }

  export type ServiceProviderUncheckedCreateWithoutCategoryInput = {
    id?: string
    agencyId: string
    agentId: string
    capabilities: JsonNullValueInput | InputJsonValue
    qualityRating?: number
    completionRate?: number
    averageRating?: number
    totalCompletions?: number
    isActive?: boolean
    maxConcurrent?: number
    currentLoad?: number
    pricingOverride?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    serviceRequests?: ServiceRequestUncheckedCreateNestedManyWithoutProviderInput
    reviews?: ProviderReviewUncheckedCreateNestedManyWithoutProviderInput
  }

  export type ServiceProviderCreateOrConnectWithoutCategoryInput = {
    where: ServiceProviderWhereUniqueInput
    create: XOR<ServiceProviderCreateWithoutCategoryInput, ServiceProviderUncheckedCreateWithoutCategoryInput>
  }

  export type ServiceProviderCreateManyCategoryInputEnvelope = {
    data: Enumerable<ServiceProviderCreateManyCategoryInput>
    skipDuplicates?: boolean
  }

  export type ServiceCategoryUpsertWithoutChildrenInput = {
    update: XOR<ServiceCategoryUpdateWithoutChildrenInput, ServiceCategoryUncheckedUpdateWithoutChildrenInput>
    create: XOR<ServiceCategoryCreateWithoutChildrenInput, ServiceCategoryUncheckedCreateWithoutChildrenInput>
  }

  export type ServiceCategoryUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    basePricing?: NullableJsonNullValueInput | InputJsonValue
    complexityFactors?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: ServiceCategoryUpdateOneWithoutChildrenNestedInput
    serviceRequests?: ServiceRequestUpdateManyWithoutCategoryNestedInput
    providers?: ServiceProviderUpdateManyWithoutCategoryNestedInput
  }

  export type ServiceCategoryUncheckedUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    basePricing?: NullableJsonNullValueInput | InputJsonValue
    complexityFactors?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceRequests?: ServiceRequestUncheckedUpdateManyWithoutCategoryNestedInput
    providers?: ServiceProviderUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type ServiceCategoryUpsertWithWhereUniqueWithoutParentInput = {
    where: ServiceCategoryWhereUniqueInput
    update: XOR<ServiceCategoryUpdateWithoutParentInput, ServiceCategoryUncheckedUpdateWithoutParentInput>
    create: XOR<ServiceCategoryCreateWithoutParentInput, ServiceCategoryUncheckedCreateWithoutParentInput>
  }

  export type ServiceCategoryUpdateWithWhereUniqueWithoutParentInput = {
    where: ServiceCategoryWhereUniqueInput
    data: XOR<ServiceCategoryUpdateWithoutParentInput, ServiceCategoryUncheckedUpdateWithoutParentInput>
  }

  export type ServiceCategoryUpdateManyWithWhereWithoutParentInput = {
    where: ServiceCategoryScalarWhereInput
    data: XOR<ServiceCategoryUpdateManyMutationInput, ServiceCategoryUncheckedUpdateManyWithoutChildrenInput>
  }

  export type ServiceCategoryScalarWhereInput = {
    AND?: Enumerable<ServiceCategoryScalarWhereInput>
    OR?: Enumerable<ServiceCategoryScalarWhereInput>
    NOT?: Enumerable<ServiceCategoryScalarWhereInput>
    id?: StringFilter | string
    parentId?: StringNullableFilter | string | null
    name?: StringFilter | string
    description?: StringNullableFilter | string | null
    slug?: StringFilter | string
    isActive?: BoolFilter | boolean
    requiresApproval?: BoolFilter | boolean
    estimatedDuration?: IntNullableFilter | number | null
    basePricing?: JsonNullableFilter
    complexityFactors?: JsonNullableFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ServiceRequestUpsertWithWhereUniqueWithoutCategoryInput = {
    where: ServiceRequestWhereUniqueInput
    update: XOR<ServiceRequestUpdateWithoutCategoryInput, ServiceRequestUncheckedUpdateWithoutCategoryInput>
    create: XOR<ServiceRequestCreateWithoutCategoryInput, ServiceRequestUncheckedCreateWithoutCategoryInput>
  }

  export type ServiceRequestUpdateWithWhereUniqueWithoutCategoryInput = {
    where: ServiceRequestWhereUniqueInput
    data: XOR<ServiceRequestUpdateWithoutCategoryInput, ServiceRequestUncheckedUpdateWithoutCategoryInput>
  }

  export type ServiceRequestUpdateManyWithWhereWithoutCategoryInput = {
    where: ServiceRequestScalarWhereInput
    data: XOR<ServiceRequestUpdateManyMutationInput, ServiceRequestUncheckedUpdateManyWithoutServiceRequestsInput>
  }

  export type ServiceProviderUpsertWithWhereUniqueWithoutCategoryInput = {
    where: ServiceProviderWhereUniqueInput
    update: XOR<ServiceProviderUpdateWithoutCategoryInput, ServiceProviderUncheckedUpdateWithoutCategoryInput>
    create: XOR<ServiceProviderCreateWithoutCategoryInput, ServiceProviderUncheckedCreateWithoutCategoryInput>
  }

  export type ServiceProviderUpdateWithWhereUniqueWithoutCategoryInput = {
    where: ServiceProviderWhereUniqueInput
    data: XOR<ServiceProviderUpdateWithoutCategoryInput, ServiceProviderUncheckedUpdateWithoutCategoryInput>
  }

  export type ServiceProviderUpdateManyWithWhereWithoutCategoryInput = {
    where: ServiceProviderScalarWhereInput
    data: XOR<ServiceProviderUpdateManyMutationInput, ServiceProviderUncheckedUpdateManyWithoutProvidersInput>
  }

  export type AgencyCreateWithoutServiceProvidersInput = {
    id?: string
    name: string
    subdomain: string
    slug: string
    subscriptionTier?: AgencyTier
    subscriptionStatus?: SubscriptionStatus
    billingEmail: string
    branding?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    userLimit?: number
    agentLimit?: number
    storageLimit?: number
    isActive?: boolean
    trialEndsAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutAgencyInput
    chats?: ChatCreateNestedManyWithoutAgencyInput
    sessions?: SessionCreateNestedManyWithoutAgencyInput
    subscriptions?: AgencySubscriptionCreateNestedManyWithoutAgencyInput
    auditLogs?: AgencyAuditLogCreateNestedManyWithoutAgencyInput
    swarmExecutions?: SwarmExecutionCreateNestedManyWithoutAgencyInput
    serviceRequests?: ServiceRequestCreateNestedManyWithoutAgencyInput
  }

  export type AgencyUncheckedCreateWithoutServiceProvidersInput = {
    id?: string
    name: string
    subdomain: string
    slug: string
    subscriptionTier?: AgencyTier
    subscriptionStatus?: SubscriptionStatus
    billingEmail: string
    branding?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    userLimit?: number
    agentLimit?: number
    storageLimit?: number
    isActive?: boolean
    trialEndsAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutAgencyInput
    chats?: ChatUncheckedCreateNestedManyWithoutAgencyInput
    sessions?: SessionUncheckedCreateNestedManyWithoutAgencyInput
    subscriptions?: AgencySubscriptionUncheckedCreateNestedManyWithoutAgencyInput
    auditLogs?: AgencyAuditLogUncheckedCreateNestedManyWithoutAgencyInput
    swarmExecutions?: SwarmExecutionUncheckedCreateNestedManyWithoutAgencyInput
    serviceRequests?: ServiceRequestUncheckedCreateNestedManyWithoutAgencyInput
  }

  export type AgencyCreateOrConnectWithoutServiceProvidersInput = {
    where: AgencyWhereUniqueInput
    create: XOR<AgencyCreateWithoutServiceProvidersInput, AgencyUncheckedCreateWithoutServiceProvidersInput>
  }

  export type ServiceCategoryCreateWithoutProvidersInput = {
    id?: string
    name: string
    description?: string | null
    slug: string
    isActive?: boolean
    requiresApproval?: boolean
    estimatedDuration?: number | null
    basePricing?: NullableJsonNullValueInput | InputJsonValue
    complexityFactors?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: ServiceCategoryCreateNestedOneWithoutChildrenInput
    children?: ServiceCategoryCreateNestedManyWithoutParentInput
    serviceRequests?: ServiceRequestCreateNestedManyWithoutCategoryInput
  }

  export type ServiceCategoryUncheckedCreateWithoutProvidersInput = {
    id?: string
    parentId?: string | null
    name: string
    description?: string | null
    slug: string
    isActive?: boolean
    requiresApproval?: boolean
    estimatedDuration?: number | null
    basePricing?: NullableJsonNullValueInput | InputJsonValue
    complexityFactors?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: ServiceCategoryUncheckedCreateNestedManyWithoutParentInput
    serviceRequests?: ServiceRequestUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type ServiceCategoryCreateOrConnectWithoutProvidersInput = {
    where: ServiceCategoryWhereUniqueInput
    create: XOR<ServiceCategoryCreateWithoutProvidersInput, ServiceCategoryUncheckedCreateWithoutProvidersInput>
  }

  export type ServiceRequestCreateWithoutProviderInput = {
    id?: string
    title: string
    description: string
    requirements?: NullableJsonNullValueInput | InputJsonValue
    status?: ServiceRequestStatus
    priority?: RequestPriority
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    qualityScore?: number | null
    clientSatisfaction?: number | null
    requestedAt?: Date | string
    assignedAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate?: Date | string | null
    deliverables?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
    agency: AgencyCreateNestedOneWithoutServiceRequestsInput
    user: UserCreateNestedOneWithoutServiceRequestsInput
    category: ServiceCategoryCreateNestedOneWithoutServiceRequestsInput
    reviews?: ServiceReviewCreateNestedManyWithoutServiceRequestInput
  }

  export type ServiceRequestUncheckedCreateWithoutProviderInput = {
    id?: string
    agencyId: string
    userId: string
    categoryId: string
    title: string
    description: string
    requirements?: NullableJsonNullValueInput | InputJsonValue
    status?: ServiceRequestStatus
    priority?: RequestPriority
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    qualityScore?: number | null
    clientSatisfaction?: number | null
    requestedAt?: Date | string
    assignedAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate?: Date | string | null
    deliverables?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
    reviews?: ServiceReviewUncheckedCreateNestedManyWithoutServiceRequestInput
  }

  export type ServiceRequestCreateOrConnectWithoutProviderInput = {
    where: ServiceRequestWhereUniqueInput
    create: XOR<ServiceRequestCreateWithoutProviderInput, ServiceRequestUncheckedCreateWithoutProviderInput>
  }

  export type ServiceRequestCreateManyProviderInputEnvelope = {
    data: Enumerable<ServiceRequestCreateManyProviderInput>
    skipDuplicates?: boolean
  }

  export type ProviderReviewCreateWithoutProviderInput = {
    id?: string
    rating: number
    comment?: string | null
    criteria?: NullableJsonNullValueInput | InputJsonValue
    serviceType?: string | null
    createdAt?: Date | string
    reviewer: UserCreateNestedOneWithoutProviderReviewsInput
  }

  export type ProviderReviewUncheckedCreateWithoutProviderInput = {
    id?: string
    reviewerId: string
    rating: number
    comment?: string | null
    criteria?: NullableJsonNullValueInput | InputJsonValue
    serviceType?: string | null
    createdAt?: Date | string
  }

  export type ProviderReviewCreateOrConnectWithoutProviderInput = {
    where: ProviderReviewWhereUniqueInput
    create: XOR<ProviderReviewCreateWithoutProviderInput, ProviderReviewUncheckedCreateWithoutProviderInput>
  }

  export type ProviderReviewCreateManyProviderInputEnvelope = {
    data: Enumerable<ProviderReviewCreateManyProviderInput>
    skipDuplicates?: boolean
  }

  export type AgencyUpsertWithoutServiceProvidersInput = {
    update: XOR<AgencyUpdateWithoutServiceProvidersInput, AgencyUncheckedUpdateWithoutServiceProvidersInput>
    create: XOR<AgencyCreateWithoutServiceProvidersInput, AgencyUncheckedCreateWithoutServiceProvidersInput>
  }

  export type AgencyUpdateWithoutServiceProvidersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: EnumAgencyTierFieldUpdateOperationsInput | AgencyTier
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | SubscriptionStatus
    billingEmail?: StringFieldUpdateOperationsInput | string
    branding?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    userLimit?: IntFieldUpdateOperationsInput | number
    agentLimit?: IntFieldUpdateOperationsInput | number
    storageLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutAgencyNestedInput
    chats?: ChatUpdateManyWithoutAgencyNestedInput
    sessions?: SessionUpdateManyWithoutAgencyNestedInput
    subscriptions?: AgencySubscriptionUpdateManyWithoutAgencyNestedInput
    auditLogs?: AgencyAuditLogUpdateManyWithoutAgencyNestedInput
    swarmExecutions?: SwarmExecutionUpdateManyWithoutAgencyNestedInput
    serviceRequests?: ServiceRequestUpdateManyWithoutAgencyNestedInput
  }

  export type AgencyUncheckedUpdateWithoutServiceProvidersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: EnumAgencyTierFieldUpdateOperationsInput | AgencyTier
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | SubscriptionStatus
    billingEmail?: StringFieldUpdateOperationsInput | string
    branding?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    userLimit?: IntFieldUpdateOperationsInput | number
    agentLimit?: IntFieldUpdateOperationsInput | number
    storageLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutAgencyNestedInput
    chats?: ChatUncheckedUpdateManyWithoutAgencyNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutAgencyNestedInput
    subscriptions?: AgencySubscriptionUncheckedUpdateManyWithoutAgencyNestedInput
    auditLogs?: AgencyAuditLogUncheckedUpdateManyWithoutAgencyNestedInput
    swarmExecutions?: SwarmExecutionUncheckedUpdateManyWithoutAgencyNestedInput
    serviceRequests?: ServiceRequestUncheckedUpdateManyWithoutAgencyNestedInput
  }

  export type ServiceCategoryUpsertWithoutProvidersInput = {
    update: XOR<ServiceCategoryUpdateWithoutProvidersInput, ServiceCategoryUncheckedUpdateWithoutProvidersInput>
    create: XOR<ServiceCategoryCreateWithoutProvidersInput, ServiceCategoryUncheckedCreateWithoutProvidersInput>
  }

  export type ServiceCategoryUpdateWithoutProvidersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    basePricing?: NullableJsonNullValueInput | InputJsonValue
    complexityFactors?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: ServiceCategoryUpdateOneWithoutChildrenNestedInput
    children?: ServiceCategoryUpdateManyWithoutParentNestedInput
    serviceRequests?: ServiceRequestUpdateManyWithoutCategoryNestedInput
  }

  export type ServiceCategoryUncheckedUpdateWithoutProvidersInput = {
    id?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    basePricing?: NullableJsonNullValueInput | InputJsonValue
    complexityFactors?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: ServiceCategoryUncheckedUpdateManyWithoutParentNestedInput
    serviceRequests?: ServiceRequestUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type ServiceRequestUpsertWithWhereUniqueWithoutProviderInput = {
    where: ServiceRequestWhereUniqueInput
    update: XOR<ServiceRequestUpdateWithoutProviderInput, ServiceRequestUncheckedUpdateWithoutProviderInput>
    create: XOR<ServiceRequestCreateWithoutProviderInput, ServiceRequestUncheckedCreateWithoutProviderInput>
  }

  export type ServiceRequestUpdateWithWhereUniqueWithoutProviderInput = {
    where: ServiceRequestWhereUniqueInput
    data: XOR<ServiceRequestUpdateWithoutProviderInput, ServiceRequestUncheckedUpdateWithoutProviderInput>
  }

  export type ServiceRequestUpdateManyWithWhereWithoutProviderInput = {
    where: ServiceRequestScalarWhereInput
    data: XOR<ServiceRequestUpdateManyMutationInput, ServiceRequestUncheckedUpdateManyWithoutServiceRequestsInput>
  }

  export type ProviderReviewUpsertWithWhereUniqueWithoutProviderInput = {
    where: ProviderReviewWhereUniqueInput
    update: XOR<ProviderReviewUpdateWithoutProviderInput, ProviderReviewUncheckedUpdateWithoutProviderInput>
    create: XOR<ProviderReviewCreateWithoutProviderInput, ProviderReviewUncheckedCreateWithoutProviderInput>
  }

  export type ProviderReviewUpdateWithWhereUniqueWithoutProviderInput = {
    where: ProviderReviewWhereUniqueInput
    data: XOR<ProviderReviewUpdateWithoutProviderInput, ProviderReviewUncheckedUpdateWithoutProviderInput>
  }

  export type ProviderReviewUpdateManyWithWhereWithoutProviderInput = {
    where: ProviderReviewScalarWhereInput
    data: XOR<ProviderReviewUpdateManyMutationInput, ProviderReviewUncheckedUpdateManyWithoutReviewsInput>
  }

  export type AgencyCreateWithoutServiceRequestsInput = {
    id?: string
    name: string
    subdomain: string
    slug: string
    subscriptionTier?: AgencyTier
    subscriptionStatus?: SubscriptionStatus
    billingEmail: string
    branding?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    userLimit?: number
    agentLimit?: number
    storageLimit?: number
    isActive?: boolean
    trialEndsAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutAgencyInput
    chats?: ChatCreateNestedManyWithoutAgencyInput
    sessions?: SessionCreateNestedManyWithoutAgencyInput
    subscriptions?: AgencySubscriptionCreateNestedManyWithoutAgencyInput
    auditLogs?: AgencyAuditLogCreateNestedManyWithoutAgencyInput
    swarmExecutions?: SwarmExecutionCreateNestedManyWithoutAgencyInput
    serviceProviders?: ServiceProviderCreateNestedManyWithoutAgencyInput
  }

  export type AgencyUncheckedCreateWithoutServiceRequestsInput = {
    id?: string
    name: string
    subdomain: string
    slug: string
    subscriptionTier?: AgencyTier
    subscriptionStatus?: SubscriptionStatus
    billingEmail: string
    branding?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    userLimit?: number
    agentLimit?: number
    storageLimit?: number
    isActive?: boolean
    trialEndsAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutAgencyInput
    chats?: ChatUncheckedCreateNestedManyWithoutAgencyInput
    sessions?: SessionUncheckedCreateNestedManyWithoutAgencyInput
    subscriptions?: AgencySubscriptionUncheckedCreateNestedManyWithoutAgencyInput
    auditLogs?: AgencyAuditLogUncheckedCreateNestedManyWithoutAgencyInput
    swarmExecutions?: SwarmExecutionUncheckedCreateNestedManyWithoutAgencyInput
    serviceProviders?: ServiceProviderUncheckedCreateNestedManyWithoutAgencyInput
  }

  export type AgencyCreateOrConnectWithoutServiceRequestsInput = {
    where: AgencyWhereUniqueInput
    create: XOR<AgencyCreateWithoutServiceRequestsInput, AgencyUncheckedCreateWithoutServiceRequestsInput>
  }

  export type UserCreateWithoutServiceRequestsInput = {
    id?: string
    email: string
    name?: string | null
    passwordHash: string
    role?: EnhancedUserRole
    permissions?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    onboardingCompleted?: boolean
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    agency: AgencyCreateNestedOneWithoutUsersInput
    createdChats?: ChatCreateNestedManyWithoutCreatorInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    auditLogs?: AgencyAuditLogCreateNestedManyWithoutUserInput
    providerReviews?: ProviderReviewCreateNestedManyWithoutReviewerInput
    serviceReviews?: ServiceReviewCreateNestedManyWithoutReviewerInput
  }

  export type UserUncheckedCreateWithoutServiceRequestsInput = {
    id?: string
    email: string
    name?: string | null
    passwordHash: string
    agencyId: string
    role?: EnhancedUserRole
    permissions?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    onboardingCompleted?: boolean
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdChats?: ChatUncheckedCreateNestedManyWithoutCreatorInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AgencyAuditLogUncheckedCreateNestedManyWithoutUserInput
    providerReviews?: ProviderReviewUncheckedCreateNestedManyWithoutReviewerInput
    serviceReviews?: ServiceReviewUncheckedCreateNestedManyWithoutReviewerInput
  }

  export type UserCreateOrConnectWithoutServiceRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutServiceRequestsInput, UserUncheckedCreateWithoutServiceRequestsInput>
  }

  export type ServiceCategoryCreateWithoutServiceRequestsInput = {
    id?: string
    name: string
    description?: string | null
    slug: string
    isActive?: boolean
    requiresApproval?: boolean
    estimatedDuration?: number | null
    basePricing?: NullableJsonNullValueInput | InputJsonValue
    complexityFactors?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: ServiceCategoryCreateNestedOneWithoutChildrenInput
    children?: ServiceCategoryCreateNestedManyWithoutParentInput
    providers?: ServiceProviderCreateNestedManyWithoutCategoryInput
  }

  export type ServiceCategoryUncheckedCreateWithoutServiceRequestsInput = {
    id?: string
    parentId?: string | null
    name: string
    description?: string | null
    slug: string
    isActive?: boolean
    requiresApproval?: boolean
    estimatedDuration?: number | null
    basePricing?: NullableJsonNullValueInput | InputJsonValue
    complexityFactors?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: ServiceCategoryUncheckedCreateNestedManyWithoutParentInput
    providers?: ServiceProviderUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type ServiceCategoryCreateOrConnectWithoutServiceRequestsInput = {
    where: ServiceCategoryWhereUniqueInput
    create: XOR<ServiceCategoryCreateWithoutServiceRequestsInput, ServiceCategoryUncheckedCreateWithoutServiceRequestsInput>
  }

  export type ServiceProviderCreateWithoutServiceRequestsInput = {
    id?: string
    agentId: string
    capabilities: JsonNullValueInput | InputJsonValue
    qualityRating?: number
    completionRate?: number
    averageRating?: number
    totalCompletions?: number
    isActive?: boolean
    maxConcurrent?: number
    currentLoad?: number
    pricingOverride?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    agency: AgencyCreateNestedOneWithoutServiceProvidersInput
    category: ServiceCategoryCreateNestedOneWithoutProvidersInput
    reviews?: ProviderReviewCreateNestedManyWithoutProviderInput
  }

  export type ServiceProviderUncheckedCreateWithoutServiceRequestsInput = {
    id?: string
    agencyId: string
    agentId: string
    categoryId: string
    capabilities: JsonNullValueInput | InputJsonValue
    qualityRating?: number
    completionRate?: number
    averageRating?: number
    totalCompletions?: number
    isActive?: boolean
    maxConcurrent?: number
    currentLoad?: number
    pricingOverride?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    reviews?: ProviderReviewUncheckedCreateNestedManyWithoutProviderInput
  }

  export type ServiceProviderCreateOrConnectWithoutServiceRequestsInput = {
    where: ServiceProviderWhereUniqueInput
    create: XOR<ServiceProviderCreateWithoutServiceRequestsInput, ServiceProviderUncheckedCreateWithoutServiceRequestsInput>
  }

  export type ServiceReviewCreateWithoutServiceRequestInput = {
    id?: string
    overallRating: number
    qualityRating?: number | null
    speedRating?: number | null
    communicationRating?: number | null
    comment?: string | null
    recommendations?: string | null
    createdAt?: Date | string
    reviewer: UserCreateNestedOneWithoutServiceReviewsInput
  }

  export type ServiceReviewUncheckedCreateWithoutServiceRequestInput = {
    id?: string
    reviewerId: string
    overallRating: number
    qualityRating?: number | null
    speedRating?: number | null
    communicationRating?: number | null
    comment?: string | null
    recommendations?: string | null
    createdAt?: Date | string
  }

  export type ServiceReviewCreateOrConnectWithoutServiceRequestInput = {
    where: ServiceReviewWhereUniqueInput
    create: XOR<ServiceReviewCreateWithoutServiceRequestInput, ServiceReviewUncheckedCreateWithoutServiceRequestInput>
  }

  export type ServiceReviewCreateManyServiceRequestInputEnvelope = {
    data: Enumerable<ServiceReviewCreateManyServiceRequestInput>
    skipDuplicates?: boolean
  }

  export type AgencyUpsertWithoutServiceRequestsInput = {
    update: XOR<AgencyUpdateWithoutServiceRequestsInput, AgencyUncheckedUpdateWithoutServiceRequestsInput>
    create: XOR<AgencyCreateWithoutServiceRequestsInput, AgencyUncheckedCreateWithoutServiceRequestsInput>
  }

  export type AgencyUpdateWithoutServiceRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: EnumAgencyTierFieldUpdateOperationsInput | AgencyTier
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | SubscriptionStatus
    billingEmail?: StringFieldUpdateOperationsInput | string
    branding?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    userLimit?: IntFieldUpdateOperationsInput | number
    agentLimit?: IntFieldUpdateOperationsInput | number
    storageLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutAgencyNestedInput
    chats?: ChatUpdateManyWithoutAgencyNestedInput
    sessions?: SessionUpdateManyWithoutAgencyNestedInput
    subscriptions?: AgencySubscriptionUpdateManyWithoutAgencyNestedInput
    auditLogs?: AgencyAuditLogUpdateManyWithoutAgencyNestedInput
    swarmExecutions?: SwarmExecutionUpdateManyWithoutAgencyNestedInput
    serviceProviders?: ServiceProviderUpdateManyWithoutAgencyNestedInput
  }

  export type AgencyUncheckedUpdateWithoutServiceRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: EnumAgencyTierFieldUpdateOperationsInput | AgencyTier
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | SubscriptionStatus
    billingEmail?: StringFieldUpdateOperationsInput | string
    branding?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    userLimit?: IntFieldUpdateOperationsInput | number
    agentLimit?: IntFieldUpdateOperationsInput | number
    storageLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutAgencyNestedInput
    chats?: ChatUncheckedUpdateManyWithoutAgencyNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutAgencyNestedInput
    subscriptions?: AgencySubscriptionUncheckedUpdateManyWithoutAgencyNestedInput
    auditLogs?: AgencyAuditLogUncheckedUpdateManyWithoutAgencyNestedInput
    swarmExecutions?: SwarmExecutionUncheckedUpdateManyWithoutAgencyNestedInput
    serviceProviders?: ServiceProviderUncheckedUpdateManyWithoutAgencyNestedInput
  }

  export type UserUpsertWithoutServiceRequestsInput = {
    update: XOR<UserUpdateWithoutServiceRequestsInput, UserUncheckedUpdateWithoutServiceRequestsInput>
    create: XOR<UserCreateWithoutServiceRequestsInput, UserUncheckedCreateWithoutServiceRequestsInput>
  }

  export type UserUpdateWithoutServiceRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumEnhancedUserRoleFieldUpdateOperationsInput | EnhancedUserRole
    permissions?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agency?: AgencyUpdateOneRequiredWithoutUsersNestedInput
    createdChats?: ChatUpdateManyWithoutCreatorNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    auditLogs?: AgencyAuditLogUpdateManyWithoutUserNestedInput
    providerReviews?: ProviderReviewUpdateManyWithoutReviewerNestedInput
    serviceReviews?: ServiceReviewUpdateManyWithoutReviewerNestedInput
  }

  export type UserUncheckedUpdateWithoutServiceRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    role?: EnumEnhancedUserRoleFieldUpdateOperationsInput | EnhancedUserRole
    permissions?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdChats?: ChatUncheckedUpdateManyWithoutCreatorNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AgencyAuditLogUncheckedUpdateManyWithoutUserNestedInput
    providerReviews?: ProviderReviewUncheckedUpdateManyWithoutReviewerNestedInput
    serviceReviews?: ServiceReviewUncheckedUpdateManyWithoutReviewerNestedInput
  }

  export type ServiceCategoryUpsertWithoutServiceRequestsInput = {
    update: XOR<ServiceCategoryUpdateWithoutServiceRequestsInput, ServiceCategoryUncheckedUpdateWithoutServiceRequestsInput>
    create: XOR<ServiceCategoryCreateWithoutServiceRequestsInput, ServiceCategoryUncheckedCreateWithoutServiceRequestsInput>
  }

  export type ServiceCategoryUpdateWithoutServiceRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    basePricing?: NullableJsonNullValueInput | InputJsonValue
    complexityFactors?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: ServiceCategoryUpdateOneWithoutChildrenNestedInput
    children?: ServiceCategoryUpdateManyWithoutParentNestedInput
    providers?: ServiceProviderUpdateManyWithoutCategoryNestedInput
  }

  export type ServiceCategoryUncheckedUpdateWithoutServiceRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    basePricing?: NullableJsonNullValueInput | InputJsonValue
    complexityFactors?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: ServiceCategoryUncheckedUpdateManyWithoutParentNestedInput
    providers?: ServiceProviderUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type ServiceProviderUpsertWithoutServiceRequestsInput = {
    update: XOR<ServiceProviderUpdateWithoutServiceRequestsInput, ServiceProviderUncheckedUpdateWithoutServiceRequestsInput>
    create: XOR<ServiceProviderCreateWithoutServiceRequestsInput, ServiceProviderUncheckedCreateWithoutServiceRequestsInput>
  }

  export type ServiceProviderUpdateWithoutServiceRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    capabilities?: JsonNullValueInput | InputJsonValue
    qualityRating?: FloatFieldUpdateOperationsInput | number
    completionRate?: FloatFieldUpdateOperationsInput | number
    averageRating?: FloatFieldUpdateOperationsInput | number
    totalCompletions?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    maxConcurrent?: IntFieldUpdateOperationsInput | number
    currentLoad?: IntFieldUpdateOperationsInput | number
    pricingOverride?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agency?: AgencyUpdateOneRequiredWithoutServiceProvidersNestedInput
    category?: ServiceCategoryUpdateOneRequiredWithoutProvidersNestedInput
    reviews?: ProviderReviewUpdateManyWithoutProviderNestedInput
  }

  export type ServiceProviderUncheckedUpdateWithoutServiceRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    capabilities?: JsonNullValueInput | InputJsonValue
    qualityRating?: FloatFieldUpdateOperationsInput | number
    completionRate?: FloatFieldUpdateOperationsInput | number
    averageRating?: FloatFieldUpdateOperationsInput | number
    totalCompletions?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    maxConcurrent?: IntFieldUpdateOperationsInput | number
    currentLoad?: IntFieldUpdateOperationsInput | number
    pricingOverride?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: ProviderReviewUncheckedUpdateManyWithoutProviderNestedInput
  }

  export type ServiceReviewUpsertWithWhereUniqueWithoutServiceRequestInput = {
    where: ServiceReviewWhereUniqueInput
    update: XOR<ServiceReviewUpdateWithoutServiceRequestInput, ServiceReviewUncheckedUpdateWithoutServiceRequestInput>
    create: XOR<ServiceReviewCreateWithoutServiceRequestInput, ServiceReviewUncheckedCreateWithoutServiceRequestInput>
  }

  export type ServiceReviewUpdateWithWhereUniqueWithoutServiceRequestInput = {
    where: ServiceReviewWhereUniqueInput
    data: XOR<ServiceReviewUpdateWithoutServiceRequestInput, ServiceReviewUncheckedUpdateWithoutServiceRequestInput>
  }

  export type ServiceReviewUpdateManyWithWhereWithoutServiceRequestInput = {
    where: ServiceReviewScalarWhereInput
    data: XOR<ServiceReviewUpdateManyMutationInput, ServiceReviewUncheckedUpdateManyWithoutReviewsInput>
  }

  export type ServiceProviderCreateWithoutReviewsInput = {
    id?: string
    agentId: string
    capabilities: JsonNullValueInput | InputJsonValue
    qualityRating?: number
    completionRate?: number
    averageRating?: number
    totalCompletions?: number
    isActive?: boolean
    maxConcurrent?: number
    currentLoad?: number
    pricingOverride?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    agency: AgencyCreateNestedOneWithoutServiceProvidersInput
    category: ServiceCategoryCreateNestedOneWithoutProvidersInput
    serviceRequests?: ServiceRequestCreateNestedManyWithoutProviderInput
  }

  export type ServiceProviderUncheckedCreateWithoutReviewsInput = {
    id?: string
    agencyId: string
    agentId: string
    categoryId: string
    capabilities: JsonNullValueInput | InputJsonValue
    qualityRating?: number
    completionRate?: number
    averageRating?: number
    totalCompletions?: number
    isActive?: boolean
    maxConcurrent?: number
    currentLoad?: number
    pricingOverride?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    serviceRequests?: ServiceRequestUncheckedCreateNestedManyWithoutProviderInput
  }

  export type ServiceProviderCreateOrConnectWithoutReviewsInput = {
    where: ServiceProviderWhereUniqueInput
    create: XOR<ServiceProviderCreateWithoutReviewsInput, ServiceProviderUncheckedCreateWithoutReviewsInput>
  }

  export type UserCreateWithoutProviderReviewsInput = {
    id?: string
    email: string
    name?: string | null
    passwordHash: string
    role?: EnhancedUserRole
    permissions?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    onboardingCompleted?: boolean
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    agency: AgencyCreateNestedOneWithoutUsersInput
    createdChats?: ChatCreateNestedManyWithoutCreatorInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    auditLogs?: AgencyAuditLogCreateNestedManyWithoutUserInput
    serviceRequests?: ServiceRequestCreateNestedManyWithoutUserInput
    serviceReviews?: ServiceReviewCreateNestedManyWithoutReviewerInput
  }

  export type UserUncheckedCreateWithoutProviderReviewsInput = {
    id?: string
    email: string
    name?: string | null
    passwordHash: string
    agencyId: string
    role?: EnhancedUserRole
    permissions?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    onboardingCompleted?: boolean
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdChats?: ChatUncheckedCreateNestedManyWithoutCreatorInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AgencyAuditLogUncheckedCreateNestedManyWithoutUserInput
    serviceRequests?: ServiceRequestUncheckedCreateNestedManyWithoutUserInput
    serviceReviews?: ServiceReviewUncheckedCreateNestedManyWithoutReviewerInput
  }

  export type UserCreateOrConnectWithoutProviderReviewsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProviderReviewsInput, UserUncheckedCreateWithoutProviderReviewsInput>
  }

  export type ServiceProviderUpsertWithoutReviewsInput = {
    update: XOR<ServiceProviderUpdateWithoutReviewsInput, ServiceProviderUncheckedUpdateWithoutReviewsInput>
    create: XOR<ServiceProviderCreateWithoutReviewsInput, ServiceProviderUncheckedCreateWithoutReviewsInput>
  }

  export type ServiceProviderUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    capabilities?: JsonNullValueInput | InputJsonValue
    qualityRating?: FloatFieldUpdateOperationsInput | number
    completionRate?: FloatFieldUpdateOperationsInput | number
    averageRating?: FloatFieldUpdateOperationsInput | number
    totalCompletions?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    maxConcurrent?: IntFieldUpdateOperationsInput | number
    currentLoad?: IntFieldUpdateOperationsInput | number
    pricingOverride?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agency?: AgencyUpdateOneRequiredWithoutServiceProvidersNestedInput
    category?: ServiceCategoryUpdateOneRequiredWithoutProvidersNestedInput
    serviceRequests?: ServiceRequestUpdateManyWithoutProviderNestedInput
  }

  export type ServiceProviderUncheckedUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    capabilities?: JsonNullValueInput | InputJsonValue
    qualityRating?: FloatFieldUpdateOperationsInput | number
    completionRate?: FloatFieldUpdateOperationsInput | number
    averageRating?: FloatFieldUpdateOperationsInput | number
    totalCompletions?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    maxConcurrent?: IntFieldUpdateOperationsInput | number
    currentLoad?: IntFieldUpdateOperationsInput | number
    pricingOverride?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceRequests?: ServiceRequestUncheckedUpdateManyWithoutProviderNestedInput
  }

  export type UserUpsertWithoutProviderReviewsInput = {
    update: XOR<UserUpdateWithoutProviderReviewsInput, UserUncheckedUpdateWithoutProviderReviewsInput>
    create: XOR<UserCreateWithoutProviderReviewsInput, UserUncheckedCreateWithoutProviderReviewsInput>
  }

  export type UserUpdateWithoutProviderReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumEnhancedUserRoleFieldUpdateOperationsInput | EnhancedUserRole
    permissions?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agency?: AgencyUpdateOneRequiredWithoutUsersNestedInput
    createdChats?: ChatUpdateManyWithoutCreatorNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    auditLogs?: AgencyAuditLogUpdateManyWithoutUserNestedInput
    serviceRequests?: ServiceRequestUpdateManyWithoutUserNestedInput
    serviceReviews?: ServiceReviewUpdateManyWithoutReviewerNestedInput
  }

  export type UserUncheckedUpdateWithoutProviderReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    role?: EnumEnhancedUserRoleFieldUpdateOperationsInput | EnhancedUserRole
    permissions?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdChats?: ChatUncheckedUpdateManyWithoutCreatorNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AgencyAuditLogUncheckedUpdateManyWithoutUserNestedInput
    serviceRequests?: ServiceRequestUncheckedUpdateManyWithoutUserNestedInput
    serviceReviews?: ServiceReviewUncheckedUpdateManyWithoutReviewerNestedInput
  }

  export type ServiceRequestCreateWithoutReviewsInput = {
    id?: string
    title: string
    description: string
    requirements?: NullableJsonNullValueInput | InputJsonValue
    status?: ServiceRequestStatus
    priority?: RequestPriority
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    qualityScore?: number | null
    clientSatisfaction?: number | null
    requestedAt?: Date | string
    assignedAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate?: Date | string | null
    deliverables?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
    agency: AgencyCreateNestedOneWithoutServiceRequestsInput
    user: UserCreateNestedOneWithoutServiceRequestsInput
    category: ServiceCategoryCreateNestedOneWithoutServiceRequestsInput
    provider?: ServiceProviderCreateNestedOneWithoutServiceRequestsInput
  }

  export type ServiceRequestUncheckedCreateWithoutReviewsInput = {
    id?: string
    agencyId: string
    userId: string
    categoryId: string
    providerId?: string | null
    title: string
    description: string
    requirements?: NullableJsonNullValueInput | InputJsonValue
    status?: ServiceRequestStatus
    priority?: RequestPriority
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    qualityScore?: number | null
    clientSatisfaction?: number | null
    requestedAt?: Date | string
    assignedAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate?: Date | string | null
    deliverables?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
  }

  export type ServiceRequestCreateOrConnectWithoutReviewsInput = {
    where: ServiceRequestWhereUniqueInput
    create: XOR<ServiceRequestCreateWithoutReviewsInput, ServiceRequestUncheckedCreateWithoutReviewsInput>
  }

  export type UserCreateWithoutServiceReviewsInput = {
    id?: string
    email: string
    name?: string | null
    passwordHash: string
    role?: EnhancedUserRole
    permissions?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    onboardingCompleted?: boolean
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    agency: AgencyCreateNestedOneWithoutUsersInput
    createdChats?: ChatCreateNestedManyWithoutCreatorInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    auditLogs?: AgencyAuditLogCreateNestedManyWithoutUserInput
    serviceRequests?: ServiceRequestCreateNestedManyWithoutUserInput
    providerReviews?: ProviderReviewCreateNestedManyWithoutReviewerInput
  }

  export type UserUncheckedCreateWithoutServiceReviewsInput = {
    id?: string
    email: string
    name?: string | null
    passwordHash: string
    agencyId: string
    role?: EnhancedUserRole
    permissions?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    onboardingCompleted?: boolean
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdChats?: ChatUncheckedCreateNestedManyWithoutCreatorInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AgencyAuditLogUncheckedCreateNestedManyWithoutUserInput
    serviceRequests?: ServiceRequestUncheckedCreateNestedManyWithoutUserInput
    providerReviews?: ProviderReviewUncheckedCreateNestedManyWithoutReviewerInput
  }

  export type UserCreateOrConnectWithoutServiceReviewsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutServiceReviewsInput, UserUncheckedCreateWithoutServiceReviewsInput>
  }

  export type ServiceRequestUpsertWithoutReviewsInput = {
    update: XOR<ServiceRequestUpdateWithoutReviewsInput, ServiceRequestUncheckedUpdateWithoutReviewsInput>
    create: XOR<ServiceRequestCreateWithoutReviewsInput, ServiceRequestUncheckedCreateWithoutReviewsInput>
  }

  export type ServiceRequestUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requirements?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumServiceRequestStatusFieldUpdateOperationsInput | ServiceRequestStatus
    priority?: EnumRequestPriorityFieldUpdateOperationsInput | RequestPriority
    estimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    clientSatisfaction?: NullableFloatFieldUpdateOperationsInput | number | null
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliverables?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    agency?: AgencyUpdateOneRequiredWithoutServiceRequestsNestedInput
    user?: UserUpdateOneRequiredWithoutServiceRequestsNestedInput
    category?: ServiceCategoryUpdateOneRequiredWithoutServiceRequestsNestedInput
    provider?: ServiceProviderUpdateOneWithoutServiceRequestsNestedInput
  }

  export type ServiceRequestUncheckedUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requirements?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumServiceRequestStatusFieldUpdateOperationsInput | ServiceRequestStatus
    priority?: EnumRequestPriorityFieldUpdateOperationsInput | RequestPriority
    estimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    clientSatisfaction?: NullableFloatFieldUpdateOperationsInput | number | null
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliverables?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUpsertWithoutServiceReviewsInput = {
    update: XOR<UserUpdateWithoutServiceReviewsInput, UserUncheckedUpdateWithoutServiceReviewsInput>
    create: XOR<UserCreateWithoutServiceReviewsInput, UserUncheckedCreateWithoutServiceReviewsInput>
  }

  export type UserUpdateWithoutServiceReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumEnhancedUserRoleFieldUpdateOperationsInput | EnhancedUserRole
    permissions?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agency?: AgencyUpdateOneRequiredWithoutUsersNestedInput
    createdChats?: ChatUpdateManyWithoutCreatorNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    auditLogs?: AgencyAuditLogUpdateManyWithoutUserNestedInput
    serviceRequests?: ServiceRequestUpdateManyWithoutUserNestedInput
    providerReviews?: ProviderReviewUpdateManyWithoutReviewerNestedInput
  }

  export type UserUncheckedUpdateWithoutServiceReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    role?: EnumEnhancedUserRoleFieldUpdateOperationsInput | EnhancedUserRole
    permissions?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdChats?: ChatUncheckedUpdateManyWithoutCreatorNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AgencyAuditLogUncheckedUpdateManyWithoutUserNestedInput
    serviceRequests?: ServiceRequestUncheckedUpdateManyWithoutUserNestedInput
    providerReviews?: ProviderReviewUncheckedUpdateManyWithoutReviewerNestedInput
  }

  export type AgencyCreateWithoutSubscriptionsInput = {
    id?: string
    name: string
    subdomain: string
    slug: string
    subscriptionTier?: AgencyTier
    subscriptionStatus?: SubscriptionStatus
    billingEmail: string
    branding?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    userLimit?: number
    agentLimit?: number
    storageLimit?: number
    isActive?: boolean
    trialEndsAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutAgencyInput
    chats?: ChatCreateNestedManyWithoutAgencyInput
    sessions?: SessionCreateNestedManyWithoutAgencyInput
    auditLogs?: AgencyAuditLogCreateNestedManyWithoutAgencyInput
    swarmExecutions?: SwarmExecutionCreateNestedManyWithoutAgencyInput
    serviceRequests?: ServiceRequestCreateNestedManyWithoutAgencyInput
    serviceProviders?: ServiceProviderCreateNestedManyWithoutAgencyInput
  }

  export type AgencyUncheckedCreateWithoutSubscriptionsInput = {
    id?: string
    name: string
    subdomain: string
    slug: string
    subscriptionTier?: AgencyTier
    subscriptionStatus?: SubscriptionStatus
    billingEmail: string
    branding?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    userLimit?: number
    agentLimit?: number
    storageLimit?: number
    isActive?: boolean
    trialEndsAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutAgencyInput
    chats?: ChatUncheckedCreateNestedManyWithoutAgencyInput
    sessions?: SessionUncheckedCreateNestedManyWithoutAgencyInput
    auditLogs?: AgencyAuditLogUncheckedCreateNestedManyWithoutAgencyInput
    swarmExecutions?: SwarmExecutionUncheckedCreateNestedManyWithoutAgencyInput
    serviceRequests?: ServiceRequestUncheckedCreateNestedManyWithoutAgencyInput
    serviceProviders?: ServiceProviderUncheckedCreateNestedManyWithoutAgencyInput
  }

  export type AgencyCreateOrConnectWithoutSubscriptionsInput = {
    where: AgencyWhereUniqueInput
    create: XOR<AgencyCreateWithoutSubscriptionsInput, AgencyUncheckedCreateWithoutSubscriptionsInput>
  }

  export type AgencyUpsertWithoutSubscriptionsInput = {
    update: XOR<AgencyUpdateWithoutSubscriptionsInput, AgencyUncheckedUpdateWithoutSubscriptionsInput>
    create: XOR<AgencyCreateWithoutSubscriptionsInput, AgencyUncheckedCreateWithoutSubscriptionsInput>
  }

  export type AgencyUpdateWithoutSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: EnumAgencyTierFieldUpdateOperationsInput | AgencyTier
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | SubscriptionStatus
    billingEmail?: StringFieldUpdateOperationsInput | string
    branding?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    userLimit?: IntFieldUpdateOperationsInput | number
    agentLimit?: IntFieldUpdateOperationsInput | number
    storageLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutAgencyNestedInput
    chats?: ChatUpdateManyWithoutAgencyNestedInput
    sessions?: SessionUpdateManyWithoutAgencyNestedInput
    auditLogs?: AgencyAuditLogUpdateManyWithoutAgencyNestedInput
    swarmExecutions?: SwarmExecutionUpdateManyWithoutAgencyNestedInput
    serviceRequests?: ServiceRequestUpdateManyWithoutAgencyNestedInput
    serviceProviders?: ServiceProviderUpdateManyWithoutAgencyNestedInput
  }

  export type AgencyUncheckedUpdateWithoutSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: EnumAgencyTierFieldUpdateOperationsInput | AgencyTier
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | SubscriptionStatus
    billingEmail?: StringFieldUpdateOperationsInput | string
    branding?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    userLimit?: IntFieldUpdateOperationsInput | number
    agentLimit?: IntFieldUpdateOperationsInput | number
    storageLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutAgencyNestedInput
    chats?: ChatUncheckedUpdateManyWithoutAgencyNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutAgencyNestedInput
    auditLogs?: AgencyAuditLogUncheckedUpdateManyWithoutAgencyNestedInput
    swarmExecutions?: SwarmExecutionUncheckedUpdateManyWithoutAgencyNestedInput
    serviceRequests?: ServiceRequestUncheckedUpdateManyWithoutAgencyNestedInput
    serviceProviders?: ServiceProviderUncheckedUpdateManyWithoutAgencyNestedInput
  }

  export type AgencyCreateWithoutAuditLogsInput = {
    id?: string
    name: string
    subdomain: string
    slug: string
    subscriptionTier?: AgencyTier
    subscriptionStatus?: SubscriptionStatus
    billingEmail: string
    branding?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    userLimit?: number
    agentLimit?: number
    storageLimit?: number
    isActive?: boolean
    trialEndsAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutAgencyInput
    chats?: ChatCreateNestedManyWithoutAgencyInput
    sessions?: SessionCreateNestedManyWithoutAgencyInput
    subscriptions?: AgencySubscriptionCreateNestedManyWithoutAgencyInput
    swarmExecutions?: SwarmExecutionCreateNestedManyWithoutAgencyInput
    serviceRequests?: ServiceRequestCreateNestedManyWithoutAgencyInput
    serviceProviders?: ServiceProviderCreateNestedManyWithoutAgencyInput
  }

  export type AgencyUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    name: string
    subdomain: string
    slug: string
    subscriptionTier?: AgencyTier
    subscriptionStatus?: SubscriptionStatus
    billingEmail: string
    branding?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    userLimit?: number
    agentLimit?: number
    storageLimit?: number
    isActive?: boolean
    trialEndsAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutAgencyInput
    chats?: ChatUncheckedCreateNestedManyWithoutAgencyInput
    sessions?: SessionUncheckedCreateNestedManyWithoutAgencyInput
    subscriptions?: AgencySubscriptionUncheckedCreateNestedManyWithoutAgencyInput
    swarmExecutions?: SwarmExecutionUncheckedCreateNestedManyWithoutAgencyInput
    serviceRequests?: ServiceRequestUncheckedCreateNestedManyWithoutAgencyInput
    serviceProviders?: ServiceProviderUncheckedCreateNestedManyWithoutAgencyInput
  }

  export type AgencyCreateOrConnectWithoutAuditLogsInput = {
    where: AgencyWhereUniqueInput
    create: XOR<AgencyCreateWithoutAuditLogsInput, AgencyUncheckedCreateWithoutAuditLogsInput>
  }

  export type UserCreateWithoutAuditLogsInput = {
    id?: string
    email: string
    name?: string | null
    passwordHash: string
    role?: EnhancedUserRole
    permissions?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    onboardingCompleted?: boolean
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    agency: AgencyCreateNestedOneWithoutUsersInput
    createdChats?: ChatCreateNestedManyWithoutCreatorInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    serviceRequests?: ServiceRequestCreateNestedManyWithoutUserInput
    providerReviews?: ProviderReviewCreateNestedManyWithoutReviewerInput
    serviceReviews?: ServiceReviewCreateNestedManyWithoutReviewerInput
  }

  export type UserUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    email: string
    name?: string | null
    passwordHash: string
    agencyId: string
    role?: EnhancedUserRole
    permissions?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    onboardingCompleted?: boolean
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdChats?: ChatUncheckedCreateNestedManyWithoutCreatorInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    serviceRequests?: ServiceRequestUncheckedCreateNestedManyWithoutUserInput
    providerReviews?: ProviderReviewUncheckedCreateNestedManyWithoutReviewerInput
    serviceReviews?: ServiceReviewUncheckedCreateNestedManyWithoutReviewerInput
  }

  export type UserCreateOrConnectWithoutAuditLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
  }

  export type AgencyUpsertWithoutAuditLogsInput = {
    update: XOR<AgencyUpdateWithoutAuditLogsInput, AgencyUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<AgencyCreateWithoutAuditLogsInput, AgencyUncheckedCreateWithoutAuditLogsInput>
  }

  export type AgencyUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: EnumAgencyTierFieldUpdateOperationsInput | AgencyTier
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | SubscriptionStatus
    billingEmail?: StringFieldUpdateOperationsInput | string
    branding?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    userLimit?: IntFieldUpdateOperationsInput | number
    agentLimit?: IntFieldUpdateOperationsInput | number
    storageLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutAgencyNestedInput
    chats?: ChatUpdateManyWithoutAgencyNestedInput
    sessions?: SessionUpdateManyWithoutAgencyNestedInput
    subscriptions?: AgencySubscriptionUpdateManyWithoutAgencyNestedInput
    swarmExecutions?: SwarmExecutionUpdateManyWithoutAgencyNestedInput
    serviceRequests?: ServiceRequestUpdateManyWithoutAgencyNestedInput
    serviceProviders?: ServiceProviderUpdateManyWithoutAgencyNestedInput
  }

  export type AgencyUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: EnumAgencyTierFieldUpdateOperationsInput | AgencyTier
    subscriptionStatus?: EnumSubscriptionStatusFieldUpdateOperationsInput | SubscriptionStatus
    billingEmail?: StringFieldUpdateOperationsInput | string
    branding?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    userLimit?: IntFieldUpdateOperationsInput | number
    agentLimit?: IntFieldUpdateOperationsInput | number
    storageLimit?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutAgencyNestedInput
    chats?: ChatUncheckedUpdateManyWithoutAgencyNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutAgencyNestedInput
    subscriptions?: AgencySubscriptionUncheckedUpdateManyWithoutAgencyNestedInput
    swarmExecutions?: SwarmExecutionUncheckedUpdateManyWithoutAgencyNestedInput
    serviceRequests?: ServiceRequestUncheckedUpdateManyWithoutAgencyNestedInput
    serviceProviders?: ServiceProviderUncheckedUpdateManyWithoutAgencyNestedInput
  }

  export type UserUpsertWithoutAuditLogsInput = {
    update: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
  }

  export type UserUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumEnhancedUserRoleFieldUpdateOperationsInput | EnhancedUserRole
    permissions?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agency?: AgencyUpdateOneRequiredWithoutUsersNestedInput
    createdChats?: ChatUpdateManyWithoutCreatorNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    serviceRequests?: ServiceRequestUpdateManyWithoutUserNestedInput
    providerReviews?: ProviderReviewUpdateManyWithoutReviewerNestedInput
    serviceReviews?: ServiceReviewUpdateManyWithoutReviewerNestedInput
  }

  export type UserUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    role?: EnumEnhancedUserRoleFieldUpdateOperationsInput | EnhancedUserRole
    permissions?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdChats?: ChatUncheckedUpdateManyWithoutCreatorNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    serviceRequests?: ServiceRequestUncheckedUpdateManyWithoutUserNestedInput
    providerReviews?: ProviderReviewUncheckedUpdateManyWithoutReviewerNestedInput
    serviceReviews?: ServiceReviewUncheckedUpdateManyWithoutReviewerNestedInput
  }

  export type UserCreateManyAgencyInput = {
    id?: string
    email: string
    name?: string | null
    passwordHash: string
    role?: EnhancedUserRole
    permissions?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    onboardingCompleted?: boolean
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChatCreateManyAgencyInput = {
    id?: string
    title?: string | null
    createdBy: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionCreateManyAgencyInput = {
    id?: string
    userId: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type AgencySubscriptionCreateManyAgencyInput = {
    id?: string
    tier: AgencyTier
    status?: SubscriptionStatus
    billingCycle?: BillingCycle
    pricePerMonth: Decimal | DecimalJsLike | number | string
    currency?: string
    startedAt?: Date | string
    endsAt?: Date | string | null
    renewedAt?: Date | string | null
    cancelledAt?: Date | string | null
    stripeSubscriptionId?: string | null
    paymentMethodId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AgencyAuditLogCreateManyAgencyInput = {
    id?: string
    userId?: string | null
    action: string
    entityType: string
    entityId?: string | null
    changes?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type SwarmExecutionCreateManyAgencyInput = {
    id?: string
    serviceRequestId?: string | null
    status?: SwarmExecutionStatus
    qualityScore?: number | null
    activeAgents: JsonNullValueInput | InputJsonValue
    executionPlan: JsonNullValueInput | InputJsonValue
    results?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string
    completedAt?: Date | string | null
  }

  export type ServiceRequestCreateManyAgencyInput = {
    id?: string
    userId: string
    categoryId: string
    providerId?: string | null
    title: string
    description: string
    requirements?: NullableJsonNullValueInput | InputJsonValue
    status?: ServiceRequestStatus
    priority?: RequestPriority
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    qualityScore?: number | null
    clientSatisfaction?: number | null
    requestedAt?: Date | string
    assignedAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate?: Date | string | null
    deliverables?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
  }

  export type ServiceProviderCreateManyAgencyInput = {
    id?: string
    agentId: string
    categoryId: string
    capabilities: JsonNullValueInput | InputJsonValue
    qualityRating?: number
    completionRate?: number
    averageRating?: number
    totalCompletions?: number
    isActive?: boolean
    maxConcurrent?: number
    currentLoad?: number
    pricingOverride?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateWithoutAgencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumEnhancedUserRoleFieldUpdateOperationsInput | EnhancedUserRole
    permissions?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdChats?: ChatUpdateManyWithoutCreatorNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    auditLogs?: AgencyAuditLogUpdateManyWithoutUserNestedInput
    serviceRequests?: ServiceRequestUpdateManyWithoutUserNestedInput
    providerReviews?: ProviderReviewUpdateManyWithoutReviewerNestedInput
    serviceReviews?: ServiceReviewUpdateManyWithoutReviewerNestedInput
  }

  export type UserUncheckedUpdateWithoutAgencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumEnhancedUserRoleFieldUpdateOperationsInput | EnhancedUserRole
    permissions?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdChats?: ChatUncheckedUpdateManyWithoutCreatorNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AgencyAuditLogUncheckedUpdateManyWithoutUserNestedInput
    serviceRequests?: ServiceRequestUncheckedUpdateManyWithoutUserNestedInput
    providerReviews?: ProviderReviewUncheckedUpdateManyWithoutReviewerNestedInput
    serviceReviews?: ServiceReviewUncheckedUpdateManyWithoutReviewerNestedInput
  }

  export type UserUncheckedUpdateManyWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumEnhancedUserRoleFieldUpdateOperationsInput | EnhancedUserRole
    permissions?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatUpdateWithoutAgencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutCreatedChatsNestedInput
  }

  export type ChatUncheckedUpdateWithoutAgencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatUncheckedUpdateManyWithoutChatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUpdateWithoutAgencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateWithoutAgencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgencySubscriptionUpdateWithoutAgencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tier?: EnumAgencyTierFieldUpdateOperationsInput | AgencyTier
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | SubscriptionStatus
    billingCycle?: EnumBillingCycleFieldUpdateOperationsInput | BillingCycle
    pricePerMonth?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    renewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentMethodId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgencySubscriptionUncheckedUpdateWithoutAgencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tier?: EnumAgencyTierFieldUpdateOperationsInput | AgencyTier
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | SubscriptionStatus
    billingCycle?: EnumBillingCycleFieldUpdateOperationsInput | BillingCycle
    pricePerMonth?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    renewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentMethodId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgencySubscriptionUncheckedUpdateManyWithoutSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tier?: EnumAgencyTierFieldUpdateOperationsInput | AgencyTier
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | SubscriptionStatus
    billingCycle?: EnumBillingCycleFieldUpdateOperationsInput | BillingCycle
    pricePerMonth?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    renewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentMethodId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgencyAuditLogUpdateWithoutAgencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    changes?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutAuditLogsNestedInput
  }

  export type AgencyAuditLogUncheckedUpdateWithoutAgencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    changes?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgencyAuditLogUncheckedUpdateManyWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    changes?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SwarmExecutionUpdateWithoutAgencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceRequestId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSwarmExecutionStatusFieldUpdateOperationsInput | SwarmExecutionStatus
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    activeAgents?: JsonNullValueInput | InputJsonValue
    executionPlan?: JsonNullValueInput | InputJsonValue
    results?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    executionSteps?: ExecutionStepUpdateManyWithoutSwarmExecutionNestedInput
    messages?: SwarmMessageUpdateManyWithoutSwarmExecutionNestedInput
  }

  export type SwarmExecutionUncheckedUpdateWithoutAgencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceRequestId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSwarmExecutionStatusFieldUpdateOperationsInput | SwarmExecutionStatus
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    activeAgents?: JsonNullValueInput | InputJsonValue
    executionPlan?: JsonNullValueInput | InputJsonValue
    results?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    executionSteps?: ExecutionStepUncheckedUpdateManyWithoutSwarmExecutionNestedInput
    messages?: SwarmMessageUncheckedUpdateManyWithoutSwarmExecutionNestedInput
  }

  export type SwarmExecutionUncheckedUpdateManyWithoutSwarmExecutionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceRequestId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSwarmExecutionStatusFieldUpdateOperationsInput | SwarmExecutionStatus
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    activeAgents?: JsonNullValueInput | InputJsonValue
    executionPlan?: JsonNullValueInput | InputJsonValue
    results?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ServiceRequestUpdateWithoutAgencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requirements?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumServiceRequestStatusFieldUpdateOperationsInput | ServiceRequestStatus
    priority?: EnumRequestPriorityFieldUpdateOperationsInput | RequestPriority
    estimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    clientSatisfaction?: NullableFloatFieldUpdateOperationsInput | number | null
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliverables?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutServiceRequestsNestedInput
    category?: ServiceCategoryUpdateOneRequiredWithoutServiceRequestsNestedInput
    provider?: ServiceProviderUpdateOneWithoutServiceRequestsNestedInput
    reviews?: ServiceReviewUpdateManyWithoutServiceRequestNestedInput
  }

  export type ServiceRequestUncheckedUpdateWithoutAgencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requirements?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumServiceRequestStatusFieldUpdateOperationsInput | ServiceRequestStatus
    priority?: EnumRequestPriorityFieldUpdateOperationsInput | RequestPriority
    estimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    clientSatisfaction?: NullableFloatFieldUpdateOperationsInput | number | null
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliverables?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reviews?: ServiceReviewUncheckedUpdateManyWithoutServiceRequestNestedInput
  }

  export type ServiceRequestUncheckedUpdateManyWithoutServiceRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requirements?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumServiceRequestStatusFieldUpdateOperationsInput | ServiceRequestStatus
    priority?: EnumRequestPriorityFieldUpdateOperationsInput | RequestPriority
    estimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    clientSatisfaction?: NullableFloatFieldUpdateOperationsInput | number | null
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliverables?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ServiceProviderUpdateWithoutAgencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    capabilities?: JsonNullValueInput | InputJsonValue
    qualityRating?: FloatFieldUpdateOperationsInput | number
    completionRate?: FloatFieldUpdateOperationsInput | number
    averageRating?: FloatFieldUpdateOperationsInput | number
    totalCompletions?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    maxConcurrent?: IntFieldUpdateOperationsInput | number
    currentLoad?: IntFieldUpdateOperationsInput | number
    pricingOverride?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: ServiceCategoryUpdateOneRequiredWithoutProvidersNestedInput
    serviceRequests?: ServiceRequestUpdateManyWithoutProviderNestedInput
    reviews?: ProviderReviewUpdateManyWithoutProviderNestedInput
  }

  export type ServiceProviderUncheckedUpdateWithoutAgencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    capabilities?: JsonNullValueInput | InputJsonValue
    qualityRating?: FloatFieldUpdateOperationsInput | number
    completionRate?: FloatFieldUpdateOperationsInput | number
    averageRating?: FloatFieldUpdateOperationsInput | number
    totalCompletions?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    maxConcurrent?: IntFieldUpdateOperationsInput | number
    currentLoad?: IntFieldUpdateOperationsInput | number
    pricingOverride?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceRequests?: ServiceRequestUncheckedUpdateManyWithoutProviderNestedInput
    reviews?: ProviderReviewUncheckedUpdateManyWithoutProviderNestedInput
  }

  export type ServiceProviderUncheckedUpdateManyWithoutServiceProvidersInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    capabilities?: JsonNullValueInput | InputJsonValue
    qualityRating?: FloatFieldUpdateOperationsInput | number
    completionRate?: FloatFieldUpdateOperationsInput | number
    averageRating?: FloatFieldUpdateOperationsInput | number
    totalCompletions?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    maxConcurrent?: IntFieldUpdateOperationsInput | number
    currentLoad?: IntFieldUpdateOperationsInput | number
    pricingOverride?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatCreateManyCreatorInput = {
    id?: string
    agencyId: string
    title?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionCreateManyUserInput = {
    id?: string
    agencyId: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type AgencyAuditLogCreateManyUserInput = {
    id?: string
    agencyId: string
    action: string
    entityType: string
    entityId?: string | null
    changes?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type ServiceRequestCreateManyUserInput = {
    id?: string
    agencyId: string
    categoryId: string
    providerId?: string | null
    title: string
    description: string
    requirements?: NullableJsonNullValueInput | InputJsonValue
    status?: ServiceRequestStatus
    priority?: RequestPriority
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    qualityScore?: number | null
    clientSatisfaction?: number | null
    requestedAt?: Date | string
    assignedAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate?: Date | string | null
    deliverables?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
  }

  export type ProviderReviewCreateManyReviewerInput = {
    id?: string
    providerId: string
    rating: number
    comment?: string | null
    criteria?: NullableJsonNullValueInput | InputJsonValue
    serviceType?: string | null
    createdAt?: Date | string
  }

  export type ServiceReviewCreateManyReviewerInput = {
    id?: string
    serviceRequestId: string
    overallRating: number
    qualityRating?: number | null
    speedRating?: number | null
    communicationRating?: number | null
    comment?: string | null
    recommendations?: string | null
    createdAt?: Date | string
  }

  export type ChatUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agency?: AgencyUpdateOneRequiredWithoutChatsNestedInput
  }

  export type ChatUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatUncheckedUpdateManyWithoutCreatedChatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agency?: AgencyUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgencyAuditLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    changes?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agency?: AgencyUpdateOneRequiredWithoutAuditLogsNestedInput
  }

  export type AgencyAuditLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    changes?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceRequestUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requirements?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumServiceRequestStatusFieldUpdateOperationsInput | ServiceRequestStatus
    priority?: EnumRequestPriorityFieldUpdateOperationsInput | RequestPriority
    estimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    clientSatisfaction?: NullableFloatFieldUpdateOperationsInput | number | null
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliverables?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    agency?: AgencyUpdateOneRequiredWithoutServiceRequestsNestedInput
    category?: ServiceCategoryUpdateOneRequiredWithoutServiceRequestsNestedInput
    provider?: ServiceProviderUpdateOneWithoutServiceRequestsNestedInput
    reviews?: ServiceReviewUpdateManyWithoutServiceRequestNestedInput
  }

  export type ServiceRequestUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requirements?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumServiceRequestStatusFieldUpdateOperationsInput | ServiceRequestStatus
    priority?: EnumRequestPriorityFieldUpdateOperationsInput | RequestPriority
    estimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    clientSatisfaction?: NullableFloatFieldUpdateOperationsInput | number | null
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliverables?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reviews?: ServiceReviewUncheckedUpdateManyWithoutServiceRequestNestedInput
  }

  export type ProviderReviewUpdateWithoutReviewerInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    criteria?: NullableJsonNullValueInput | InputJsonValue
    serviceType?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: ServiceProviderUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ProviderReviewUncheckedUpdateWithoutReviewerInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    criteria?: NullableJsonNullValueInput | InputJsonValue
    serviceType?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProviderReviewUncheckedUpdateManyWithoutProviderReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    criteria?: NullableJsonNullValueInput | InputJsonValue
    serviceType?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceReviewUpdateWithoutReviewerInput = {
    id?: StringFieldUpdateOperationsInput | string
    overallRating?: IntFieldUpdateOperationsInput | number
    qualityRating?: NullableIntFieldUpdateOperationsInput | number | null
    speedRating?: NullableIntFieldUpdateOperationsInput | number | null
    communicationRating?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceRequest?: ServiceRequestUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ServiceReviewUncheckedUpdateWithoutReviewerInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceRequestId?: StringFieldUpdateOperationsInput | string
    overallRating?: IntFieldUpdateOperationsInput | number
    qualityRating?: NullableIntFieldUpdateOperationsInput | number | null
    speedRating?: NullableIntFieldUpdateOperationsInput | number | null
    communicationRating?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceReviewUncheckedUpdateManyWithoutServiceReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceRequestId?: StringFieldUpdateOperationsInput | string
    overallRating?: IntFieldUpdateOperationsInput | number
    qualityRating?: NullableIntFieldUpdateOperationsInput | number | null
    speedRating?: NullableIntFieldUpdateOperationsInput | number | null
    communicationRating?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExecutionStepCreateManySwarmExecutionInput = {
    id?: string
    stepId: string
    agentId: string
    action: string
    input?: NullableJsonNullValueInput | InputJsonValue
    output?: NullableJsonNullValueInput | InputJsonValue
    status?: ExecutionStepStatus
    qualityScore?: number | null
    confidence?: number | null
    startedAt?: Date | string
    completedAt?: Date | string | null
  }

  export type SwarmMessageCreateManySwarmExecutionInput = {
    id?: string
    fromAgentId: string
    toAgentId?: string | null
    type?: MessageType
    priority?: MessagePriority
    content: JsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    status?: MessageStatus
    processedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type ExecutionStepUpdateWithoutSwarmExecutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    stepId?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    input?: NullableJsonNullValueInput | InputJsonValue
    output?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumExecutionStepStatusFieldUpdateOperationsInput | ExecutionStepStatus
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ExecutionStepUncheckedUpdateWithoutSwarmExecutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    stepId?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    input?: NullableJsonNullValueInput | InputJsonValue
    output?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumExecutionStepStatusFieldUpdateOperationsInput | ExecutionStepStatus
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ExecutionStepUncheckedUpdateManyWithoutExecutionStepsInput = {
    id?: StringFieldUpdateOperationsInput | string
    stepId?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    input?: NullableJsonNullValueInput | InputJsonValue
    output?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumExecutionStepStatusFieldUpdateOperationsInput | ExecutionStepStatus
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SwarmMessageUpdateWithoutSwarmExecutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromAgentId?: StringFieldUpdateOperationsInput | string
    toAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumMessageTypeFieldUpdateOperationsInput | MessageType
    priority?: EnumMessagePriorityFieldUpdateOperationsInput | MessagePriority
    content?: JsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumMessageStatusFieldUpdateOperationsInput | MessageStatus
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SwarmMessageUncheckedUpdateWithoutSwarmExecutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromAgentId?: StringFieldUpdateOperationsInput | string
    toAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumMessageTypeFieldUpdateOperationsInput | MessageType
    priority?: EnumMessagePriorityFieldUpdateOperationsInput | MessagePriority
    content?: JsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumMessageStatusFieldUpdateOperationsInput | MessageStatus
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SwarmMessageUncheckedUpdateManyWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromAgentId?: StringFieldUpdateOperationsInput | string
    toAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumMessageTypeFieldUpdateOperationsInput | MessageType
    priority?: EnumMessagePriorityFieldUpdateOperationsInput | MessagePriority
    content?: JsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumMessageStatusFieldUpdateOperationsInput | MessageStatus
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceCategoryCreateManyParentInput = {
    id?: string
    name: string
    description?: string | null
    slug: string
    isActive?: boolean
    requiresApproval?: boolean
    estimatedDuration?: number | null
    basePricing?: NullableJsonNullValueInput | InputJsonValue
    complexityFactors?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServiceRequestCreateManyCategoryInput = {
    id?: string
    agencyId: string
    userId: string
    providerId?: string | null
    title: string
    description: string
    requirements?: NullableJsonNullValueInput | InputJsonValue
    status?: ServiceRequestStatus
    priority?: RequestPriority
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    qualityScore?: number | null
    clientSatisfaction?: number | null
    requestedAt?: Date | string
    assignedAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate?: Date | string | null
    deliverables?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
  }

  export type ServiceProviderCreateManyCategoryInput = {
    id?: string
    agencyId: string
    agentId: string
    capabilities: JsonNullValueInput | InputJsonValue
    qualityRating?: number
    completionRate?: number
    averageRating?: number
    totalCompletions?: number
    isActive?: boolean
    maxConcurrent?: number
    currentLoad?: number
    pricingOverride?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServiceCategoryUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    basePricing?: NullableJsonNullValueInput | InputJsonValue
    complexityFactors?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: ServiceCategoryUpdateManyWithoutParentNestedInput
    serviceRequests?: ServiceRequestUpdateManyWithoutCategoryNestedInput
    providers?: ServiceProviderUpdateManyWithoutCategoryNestedInput
  }

  export type ServiceCategoryUncheckedUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    basePricing?: NullableJsonNullValueInput | InputJsonValue
    complexityFactors?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: ServiceCategoryUncheckedUpdateManyWithoutParentNestedInput
    serviceRequests?: ServiceRequestUncheckedUpdateManyWithoutCategoryNestedInput
    providers?: ServiceProviderUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type ServiceCategoryUncheckedUpdateManyWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    requiresApproval?: BoolFieldUpdateOperationsInput | boolean
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    basePricing?: NullableJsonNullValueInput | InputJsonValue
    complexityFactors?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceRequestUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requirements?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumServiceRequestStatusFieldUpdateOperationsInput | ServiceRequestStatus
    priority?: EnumRequestPriorityFieldUpdateOperationsInput | RequestPriority
    estimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    clientSatisfaction?: NullableFloatFieldUpdateOperationsInput | number | null
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliverables?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    agency?: AgencyUpdateOneRequiredWithoutServiceRequestsNestedInput
    user?: UserUpdateOneRequiredWithoutServiceRequestsNestedInput
    provider?: ServiceProviderUpdateOneWithoutServiceRequestsNestedInput
    reviews?: ServiceReviewUpdateManyWithoutServiceRequestNestedInput
  }

  export type ServiceRequestUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requirements?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumServiceRequestStatusFieldUpdateOperationsInput | ServiceRequestStatus
    priority?: EnumRequestPriorityFieldUpdateOperationsInput | RequestPriority
    estimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    clientSatisfaction?: NullableFloatFieldUpdateOperationsInput | number | null
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliverables?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reviews?: ServiceReviewUncheckedUpdateManyWithoutServiceRequestNestedInput
  }

  export type ServiceProviderUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    capabilities?: JsonNullValueInput | InputJsonValue
    qualityRating?: FloatFieldUpdateOperationsInput | number
    completionRate?: FloatFieldUpdateOperationsInput | number
    averageRating?: FloatFieldUpdateOperationsInput | number
    totalCompletions?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    maxConcurrent?: IntFieldUpdateOperationsInput | number
    currentLoad?: IntFieldUpdateOperationsInput | number
    pricingOverride?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agency?: AgencyUpdateOneRequiredWithoutServiceProvidersNestedInput
    serviceRequests?: ServiceRequestUpdateManyWithoutProviderNestedInput
    reviews?: ProviderReviewUpdateManyWithoutProviderNestedInput
  }

  export type ServiceProviderUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    capabilities?: JsonNullValueInput | InputJsonValue
    qualityRating?: FloatFieldUpdateOperationsInput | number
    completionRate?: FloatFieldUpdateOperationsInput | number
    averageRating?: FloatFieldUpdateOperationsInput | number
    totalCompletions?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    maxConcurrent?: IntFieldUpdateOperationsInput | number
    currentLoad?: IntFieldUpdateOperationsInput | number
    pricingOverride?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceRequests?: ServiceRequestUncheckedUpdateManyWithoutProviderNestedInput
    reviews?: ProviderReviewUncheckedUpdateManyWithoutProviderNestedInput
  }

  export type ServiceProviderUncheckedUpdateManyWithoutProvidersInput = {
    id?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    capabilities?: JsonNullValueInput | InputJsonValue
    qualityRating?: FloatFieldUpdateOperationsInput | number
    completionRate?: FloatFieldUpdateOperationsInput | number
    averageRating?: FloatFieldUpdateOperationsInput | number
    totalCompletions?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    maxConcurrent?: IntFieldUpdateOperationsInput | number
    currentLoad?: IntFieldUpdateOperationsInput | number
    pricingOverride?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceRequestCreateManyProviderInput = {
    id?: string
    agencyId: string
    userId: string
    categoryId: string
    title: string
    description: string
    requirements?: NullableJsonNullValueInput | InputJsonValue
    status?: ServiceRequestStatus
    priority?: RequestPriority
    estimatedCost?: Decimal | DecimalJsLike | number | string | null
    actualCost?: Decimal | DecimalJsLike | number | string | null
    qualityScore?: number | null
    clientSatisfaction?: number | null
    requestedAt?: Date | string
    assignedAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate?: Date | string | null
    deliverables?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
  }

  export type ProviderReviewCreateManyProviderInput = {
    id?: string
    reviewerId: string
    rating: number
    comment?: string | null
    criteria?: NullableJsonNullValueInput | InputJsonValue
    serviceType?: string | null
    createdAt?: Date | string
  }

  export type ServiceRequestUpdateWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requirements?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumServiceRequestStatusFieldUpdateOperationsInput | ServiceRequestStatus
    priority?: EnumRequestPriorityFieldUpdateOperationsInput | RequestPriority
    estimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    clientSatisfaction?: NullableFloatFieldUpdateOperationsInput | number | null
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliverables?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    agency?: AgencyUpdateOneRequiredWithoutServiceRequestsNestedInput
    user?: UserUpdateOneRequiredWithoutServiceRequestsNestedInput
    category?: ServiceCategoryUpdateOneRequiredWithoutServiceRequestsNestedInput
    reviews?: ServiceReviewUpdateManyWithoutServiceRequestNestedInput
  }

  export type ServiceRequestUncheckedUpdateWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requirements?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumServiceRequestStatusFieldUpdateOperationsInput | ServiceRequestStatus
    priority?: EnumRequestPriorityFieldUpdateOperationsInput | RequestPriority
    estimatedCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    clientSatisfaction?: NullableFloatFieldUpdateOperationsInput | number | null
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliverables?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reviews?: ServiceReviewUncheckedUpdateManyWithoutServiceRequestNestedInput
  }

  export type ProviderReviewUpdateWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    criteria?: NullableJsonNullValueInput | InputJsonValue
    serviceType?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewer?: UserUpdateOneRequiredWithoutProviderReviewsNestedInput
  }

  export type ProviderReviewUncheckedUpdateWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    reviewerId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    criteria?: NullableJsonNullValueInput | InputJsonValue
    serviceType?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProviderReviewUncheckedUpdateManyWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    reviewerId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    criteria?: NullableJsonNullValueInput | InputJsonValue
    serviceType?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceReviewCreateManyServiceRequestInput = {
    id?: string
    reviewerId: string
    overallRating: number
    qualityRating?: number | null
    speedRating?: number | null
    communicationRating?: number | null
    comment?: string | null
    recommendations?: string | null
    createdAt?: Date | string
  }

  export type ServiceReviewUpdateWithoutServiceRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    overallRating?: IntFieldUpdateOperationsInput | number
    qualityRating?: NullableIntFieldUpdateOperationsInput | number | null
    speedRating?: NullableIntFieldUpdateOperationsInput | number | null
    communicationRating?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewer?: UserUpdateOneRequiredWithoutServiceReviewsNestedInput
  }

  export type ServiceReviewUncheckedUpdateWithoutServiceRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    reviewerId?: StringFieldUpdateOperationsInput | string
    overallRating?: IntFieldUpdateOperationsInput | number
    qualityRating?: NullableIntFieldUpdateOperationsInput | number | null
    speedRating?: NullableIntFieldUpdateOperationsInput | number | null
    communicationRating?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceReviewUncheckedUpdateManyWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    reviewerId?: StringFieldUpdateOperationsInput | string
    overallRating?: IntFieldUpdateOperationsInput | number
    qualityRating?: NullableIntFieldUpdateOperationsInput | number | null
    speedRating?: NullableIntFieldUpdateOperationsInput | number | null
    communicationRating?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}