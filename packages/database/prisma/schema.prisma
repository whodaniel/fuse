// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Task {
  id          String      @id @default(uuid())
  title       String
  description String?
  status      TaskStatus  @default(PENDING)
  priority    TaskPriority @default(MEDIUM)
  type        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  dueDate     DateTime?
  assignedTo  String?
  createdBy   String
  metadata    Json?
  tags        String[]    @default([])
  dependencies String[]   @default([])
  error       String?
  completedAt DateTime?

  @@map("tasks")
}

model Agent {
  id          String      @id @default(uuid())
  name        String
  description String?
  type        String
  status      AgentStatus @default(IDLE)
  capabilities String[]
  provider    String
  lastActive  DateTime    @default(now())
  metadata    Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Agency Association (optional for backward compatibility)
  agencyId    String?
  
  // Service Provider Relations
  serviceProviders ServiceProvider[]
  
  @@index([agencyId])
  @@map("agents")
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum AgentStatus {
  IDLE
  BUSY
  ERROR
  OFFLINE
}

// =====================================================
// AGENCY HUB MODELS
// =====================================================

model Agency {
  id String @id @default(uuid())
  
  // Basic Info
  name      String
  subdomain String @unique
  slug      String @unique
  
  // Subscription & Billing
  subscriptionTier   AgencyTier           @default(TRIAL)
  subscriptionStatus SubscriptionStatus   @default(TRIAL)
  billingEmail       String
  
  // Customization
  branding Json? // { logo, primaryColor, secondaryColor, favicon, fonts }
  settings Json? // { allowedFeatures, integrations, customDomain }
  
  // Limits & Quotas
  userLimit    Int @default(5)
  agentLimit   Int @default(10)
  storageLimit Int @default(1000) // MB
  
  // Lifecycle
  isActive    Boolean   @default(true)
  trialEndsAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  users         User[]
  chats         Chat[]
  sessions      Session[]
  subscriptions AgencySubscription[]
  auditLogs     AgencyAuditLog[]
  
  // Swarm Orchestration Relations
  swarmExecutions SwarmExecution[]
  serviceRequests ServiceRequest[]
  serviceProviders ServiceProvider[]
  
  @@map("agencies")
}

model User {
  id           String   @id @default(cuid())
  email        String   
  name         String?
  passwordHash String
  
  // Agency Scoping
  agencyId String
  agency   Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  
  // Enhanced Role System
  role        EnhancedUserRole @default(AGENCY_USER)
  permissions Json?            // Agency-specific permissions override
  
  // Lifecycle
  isActive            Boolean   @default(true)
  onboardingCompleted Boolean   @default(false)
  emailVerified       Boolean   @default(false)
  lastLoginAt         DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  createdChats   Chat[]    @relation("ChatCreator")
  sessions       Session[]
  auditLogs      AgencyAuditLog[] @relation("AuditUser")
  serviceRequests ServiceRequest[]
  providerReviews ProviderReview[]
  serviceReviews  ServiceReview[]
  
  @@unique([email, agencyId])
  @@index([agencyId])
  @@index([email])
  @@map("users")
}

model Chat {
  id       String @id @default(uuid())
  agencyId String
  agency   Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  
  title     String?
  createdBy String
  creator   User   @relation("ChatCreator", fields: [createdBy], references: [id])
  
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([agencyId])
  @@index([createdBy])
  @@map("chats")
}

model Session {
  id       String @id @default(uuid())
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  agencyId String
  agency   Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  @@index([userId])
  @@index([agencyId])
  @@index([token])
  @@map("sessions")
}

// =====================================================
// SWARM ORCHESTRATION MODELS
// =====================================================

model SwarmExecution {
  id String @id @default(uuid())
  
  // Core Info
  serviceRequestId String?
  agencyId         String
  agency           Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  
  // Execution State
  status        SwarmExecutionStatus @default(INITIALIZING)
  qualityScore  Float?               @default(0.0)
  
  // Agent Assignment
  activeAgents Json // Array of agent IDs
  
  // Execution Plan & Results
  executionPlan Json // Array of ExecutionStep objects
  results       Json? // Final consolidated results
  
  // Timing
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  
  // Relations
  executionSteps ExecutionStep[]
  messages       SwarmMessage[]
  
  @@index([agencyId])
  @@index([status])
  @@index([startedAt])
  @@map("swarm_executions")
}

model ExecutionStep {
  id String @id @default(uuid())
  
  // Execution Reference
  swarmExecutionId String
  swarmExecution   SwarmExecution @relation(fields: [swarmExecutionId], references: [id], onDelete: Cascade)
  
  // Step Details
  stepId       String
  agentId      String
  action       String
  status       ExecutionStepStatus @default(PENDING)
  dependencies Json                // Array of step IDs this step depends on
  
  // Results & Metrics
  results      Json?
  qualityScore Float?   @default(0.0)
  duration     Int?     // milliseconds
  retryCount   Int      @default(0)
  maxRetries   Int      @default(3)
  
  // Error Handling
  error        String?
  
  // Timing
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([swarmExecutionId])
  @@index([agentId])
  @@index([status])
  @@map("execution_steps")
}

model SwarmMessage {
  id String @id @default(uuid())
  
  // Execution Reference
  swarmExecutionId String?
  swarmExecution   SwarmExecution? @relation(fields: [swarmExecutionId], references: [id], onDelete: Cascade)
  
  // Message Details
  queueName    String
  messageType  String           @default("coordination")
  fromAgentId  String?
  toAgentId    String?
  priority     MessagePriority  @default(NORMAL)
  
  // Content
  content      Json
  metadata     Json?
  
  // Processing State
  status       MessageStatus    @default(PENDING)
  processedAt  DateTime?
  retryCount   Int              @default(0)
  maxRetries   Int              @default(3)
  
  // Timing
  createdAt    DateTime         @default(now())
  expiresAt    DateTime?
  
  @@index([queueName])
  @@index([status])
  @@index([fromAgentId])
  @@index([toAgentId])
  @@index([createdAt])
  @@map("swarm_messages")
}

// =====================================================
// SERVICE CATEGORY & PROVIDER MODELS
// =====================================================

model ServiceCategory {
  id String @id @default(uuid())
  
  // Basic Info
  name        String @unique
  description String
  slug        String @unique
  
  // Hierarchy
  parentCategoryId String?
  parentCategory   ServiceCategory? @relation("CategoryHierarchy", fields: [parentCategoryId], references: [id])
  subcategories    ServiceCategory[] @relation("CategoryHierarchy")
  
  // Configuration
  complexityLevel      ServiceComplexity @default(MODERATE)
  requiredCapabilities Json              // Array of required capability names
  estimatedDuration    Json              // { min, max, typical } in hours
  
  // Pricing
  baseRate        Decimal @db.Decimal(10, 2) @default(100.00)
  currency        String  @default("USD")
  tierMultipliers Json    // { TRIAL: 1.0, STARTER: 1.2, ... }
  
  // Quality Thresholds
  qualityThresholds Json // { minimum, target, exceptional }
  
  // Metadata
  metadata  Json?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  serviceRequests ServiceRequest[]
  providers       ServiceProvider[]
  
  @@index([parentCategoryId])
  @@index([isActive])
  @@map("service_categories")
}

model ServiceProvider {
  id String @id @default(uuid())
  
  // Core References
  agentId  String
  agent    Agent  @relation(fields: [agentId], references: [id], onDelete: Cascade)
  agencyId String
  agency   Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  
  // Service Categories
  categoryId String
  category   ServiceCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  // Capabilities & Skills
  capabilities Json // Array of capability objects
  skills       Json // Array of skill names with proficiency levels
  tools        Json // Array of available tool configurations
  
  // Performance Metrics
  performanceRating    Float   @default(0.0) // 0-5 scale
  completionRate       Float   @default(0.0) // 0-1 scale
  averageResponseTime  Int     @default(0)   // minutes
  totalTasksCompleted  Int     @default(0)
  totalTasksFailed     Int     @default(0)
  customerSatisfaction Float   @default(0.0) // 0-5 scale
  
  // Availability
  isAvailable       Boolean   @default(true)
  availabilityHours Json?     // { start, end, timezone, days }
  currentLoad       Int       @default(0)     // Number of active tasks
  maxLoad           Int       @default(5)     // Maximum concurrent tasks
  
  // Pricing
  hourlyRate     Decimal               @db.Decimal(10, 2) @default(50.00)
  currency       String                @default("USD")
  pricingModel   ProviderPricingModel  @default(HOURLY)
  discountRules  Json?                 // Array of discount configurations
  
  // Location & Preferences
  location        Json? // { country, region, timezone }
  workPreferences Json? // { communication, reporting, methodology }
  
  // Certification & Experience
  experienceLevel ProviderExperienceLevel @default(INTERMEDIATE)
  certifications  Json?                   // Array of certification objects
  portfolio       Json?                   // Array of portfolio items
  
  // Status
  status    ProviderStatus @default(ACTIVE)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  
  // Relations
  serviceRequests ServiceRequest[]
  reviews         ProviderReview[]
  
  @@unique([agentId, categoryId])
  @@index([agencyId])
  @@index([categoryId])
  @@index([isAvailable])
  @@index([performanceRating])
  @@index([status])
  @@map("service_providers")
}

model ServiceRequest {
  id String @id @default(uuid())
  
  // Core References
  categoryId String
  category   ServiceCategory @relation(fields: [categoryId], references: [id])
  agencyId   String
  agency     Agency          @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  requesterId String
  requester   User           @relation(fields: [requesterId], references: [id])
  
  // Assigned Provider
  providerId String?
  provider   ServiceProvider? @relation(fields: [providerId], references: [id])
  
  // Request Details
  title        String
  description  String
  requirements Json   // Structured requirements object
  priority     RequestPriority @default(NORMAL)
  
  // Constraints
  budget   Json? // { min, max, currency }
  timeline Json? // { startDate, deadline, flexibility }
  location Json? // { required, regions, timezone }
  
  // Preferences
  preferences Json? // { providerType, communication, reporting }
  
  // Status & Progress
  status        ServiceRequestStatus @default(PENDING)
  progress      Int           @default(0) // 0-100 percentage
  qualityScore  Float?        @default(0.0)
  
  // Results
  deliverables  Json?
  finalResults  Json?
  
  // Timing
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  assignedAt    DateTime?
  startedAt     DateTime?
  completedAt   DateTime?
  
  // Relations
  swarmExecutions SwarmExecution[]
  reviews         ServiceReview[]
  
  @@index([agencyId])
  @@index([categoryId])
  @@index([requesterId])
  @@index([providerId])
  @@index([status])
  @@index([priority])
  @@index([createdAt])
  @@map("service_requests")
}

model ProviderReview {
  id String @id @default(uuid())
  
  // References
  providerId String
  provider   ServiceProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  reviewerId String
  reviewer   User            @relation(fields: [reviewerId], references: [id])
  
  // Review Content
  rating      Float  // 1-5 scale
  title       String?
  comment     String?
  
  // Detailed Ratings
  qualityRating       Float? // 1-5 scale
  communicationRating Float? // 1-5 scale
  timelinessRating    Float? // 1-5 scale
  professionalismRating Float? // 1-5 scale
  
  // Verification
  isVerified  Boolean  @default(false)
  verifiedAt  DateTime?
  
  // Metadata
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([providerId])
  @@index([reviewerId])
  @@index([rating])
  @@index([createdAt])
  @@map("provider_reviews")
}

model ServiceReview {
  id String @id @default(uuid())
  
  // References
  serviceRequestId String
  serviceRequest   ServiceRequest @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
  reviewerId       String
  reviewer         User           @relation(fields: [reviewerId], references: [id])
  
  // Review Content
  rating      Float  // 1-5 scale
  title       String?
  comment     String?
  
  // Detailed Ratings
  overallSatisfaction Float? // 1-5 scale
  qualityRating       Float? // 1-5 scale
  valueRating         Float? // 1-5 scale
  experienceRating    Float? // 1-5 scale
  
  // Recommendations
  wouldRecommend Boolean @default(false)
  wouldUseAgain  Boolean @default(false)
  
  // Metadata
  metadata   Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@index([serviceRequestId])
  @@index([reviewerId])
  @@index([rating])
  @@index([createdAt])
  @@map("service_reviews")
}

// =====================================================
// ENUMS
// =====================================================

enum AgencyTier {
  TRIAL
  BASIC
  PROFESSIONAL
  ENTERPRISE
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PAST_DUE
  CANCELLED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  UNPAID
}

enum BillingCycle {
  MONTHLY
  QUARTERLY
  YEARLY
}

enum EnhancedUserRole {
  SUPER_ADMIN
  AGENCY_OWNER
  AGENCY_ADMIN
  AGENCY_MANAGER
  AGENCY_USER
  AGENT_OPERATOR
}

enum SwarmExecutionStatus {
  INITIALIZING
  PLANNING
  EXECUTING
  COORDINATING
  FINALIZING
  COMPLETED
  FAILED
  CANCELLED
}

enum ExecutionStepStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  SKIPPED
  RETRYING
}

enum MessageType {
  TASK_ASSIGNMENT
  STATUS_UPDATE
  RESULT_SHARING
  COORDINATION
  ERROR_REPORT
  RESOURCE_REQUEST
}

enum MessagePriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum MessageStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum ServiceRequestStatus {
  PENDING
  ASSIGNED
  IN_PROGRESS
  REVIEW
  COMPLETED
  CANCELLED
  FAILED
}

enum RequestPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

// =====================================================
// AGENCY HUB EXTENSION - SWARM ORCHESTRATION MODELS
// =====================================================

model SwarmExecution {
  id String @id @default(uuid())
  
  // Core Info
  serviceRequestId String
  agencyId         String
  agency           Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  
  // Execution State
  status        SwarmExecutionStatus @default(INITIALIZING)
  qualityScore  Float?               @default(0.0)
  
  // Agent Assignment
  activeAgents Json // Array of agent IDs
  
  // Execution Plan & Results
  executionPlan Json // Array of ExecutionStep objects
  results       Json? // Final consolidated results
  
  // Timing
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  
  // Relations
  executionSteps ExecutionStep[]
  messages       SwarmMessage[]
  
  @@index([agencyId])
  @@index([status])
  @@index([startedAt])
  @@map("swarm_executions")
}

model ExecutionStep {
  id String @id @default(uuid())
  
  // Execution Reference
  swarmExecutionId String
  swarmExecution   SwarmExecution @relation(fields: [swarmExecutionId], references: [id], onDelete: Cascade)
  
  // Step Details
  stepId       String
  agentId      String
  action       String
  status       ExecutionStepStatus @default(PENDING)
  dependencies Json                // Array of step IDs this step depends on
  
  // Results & Metrics
  results      Json?
  qualityScore Float?   @default(0.0)
  duration     Int?     // milliseconds
  retryCount   Int      @default(0)
  maxRetries   Int      @default(3)
  
  // Error Handling
  error        String?
  
  // Timing
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([swarmExecutionId])
  @@index([agentId])
  @@index([status])
  @@map("execution_steps")
}

model SwarmMessage {
  id String @id @default(uuid())
  
  // Execution Reference
  swarmExecutionId String?
  swarmExecution   SwarmExecution? @relation(fields: [swarmExecutionId], references: [id], onDelete: Cascade)
  
  // Message Details
  queueName    String
  messageType  String           @default("coordination")
  fromAgentId  String?
  toAgentId    String?
  priority     MessagePriority  @default(NORMAL)
  
  // Content
  content      Json
  metadata     Json?
  
  // Processing State
  status       MessageStatus    @default(PENDING)
  processedAt  DateTime?
  retryCount   Int              @default(0)
  maxRetries   Int              @default(3)
  
  // Timing
  createdAt    DateTime         @default(now())
  expiresAt    DateTime?
  
  @@index([queueName])
  @@index([status])
  @@index([fromAgentId])
  @@index([toAgentId])
  @@index([createdAt])
  @@map("swarm_messages")
}

// =====================================================
// SERVICE CATEGORY & PROVIDER MODELS
// =====================================================

model ServiceCategory {
  id String @id @default(uuid())
  
  // Basic Info
  name        String @unique
  description String
  slug        String @unique
  
  // Hierarchy
  parentCategoryId String?
  parentCategory   ServiceCategory? @relation("CategoryHierarchy", fields: [parentCategoryId], references: [id])
  subcategories    ServiceCategory[] @relation("CategoryHierarchy")
  
  // Configuration
  complexityLevel      ServiceComplexity @default(MODERATE)
  requiredCapabilities Json              // Array of required capability names
  estimatedDuration    Json              // { min, max, typical } in hours
  
  // Pricing
  baseRate        Decimal @db.Decimal(10, 2) @default(100.00)
  currency        String  @default("USD")
  tierMultipliers Json    // { TRIAL: 1.0, STARTER: 1.2, ... }
  
  // Quality Thresholds
  qualityThresholds Json // { minimum, target, exceptional }
  
  // Metadata
  metadata  Json?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  serviceRequests ServiceRequest[]
  providers       ServiceProvider[]
  
  @@index([parentCategoryId])
  @@index([isActive])
  @@map("service_categories")
}

model ServiceProvider {
  id String @id @default(uuid())
  
  // Core References
  agentId  String
  agent    Agent  @relation(fields: [agentId], references: [id], onDelete: Cascade)
  agencyId String
  agency   Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  
  // Service Categories
  categoryId String
  category   ServiceCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  // Capabilities & Skills
  capabilities Json // Array of capability objects
  skills       Json // Array of skill names with proficiency levels
  tools        Json // Array of available tool configurations
  
  // Performance Metrics
  performanceRating    Float   @default(0.0) // 0-5 scale
  completionRate       Float   @default(0.0) // 0-1 scale
  averageResponseTime  Int     @default(0)   // minutes
  totalTasksCompleted  Int     @default(0)
  totalTasksFailed     Int     @default(0)
  customerSatisfaction Float   @default(0.0) // 0-5 scale
  
  // Availability
  isAvailable       Boolean   @default(true)
  availabilityHours Json?     // { start, end, timezone, days }
  currentLoad       Int       @default(0)     // Number of active tasks
  maxLoad           Int       @default(5)     // Maximum concurrent tasks
  
  // Pricing
  hourlyRate     Decimal               @db.Decimal(10, 2) @default(50.00)
  currency       String                @default("USD")
  pricingModel   ProviderPricingModel  @default(HOURLY)
  discountRules  Json?                 // Array of discount configurations
  
  // Location & Preferences
  location        Json? // { country, region, timezone }
  workPreferences Json? // { communication, reporting, methodology }
  
  // Certification & Experience
  experienceLevel ProviderExperienceLevel @default(INTERMEDIATE)
  certifications  Json?                   // Array of certification objects
  portfolio       Json?                   // Array of portfolio items
  
  // Status
  status    ProviderStatus @default(ACTIVE)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  
  // Relations
  serviceRequests ServiceRequest[]
  reviews         ProviderReview[]
  
  @@unique([agentId, categoryId])
  @@index([agencyId])
  @@index([categoryId])
  @@index([isAvailable])
  @@index([performanceRating])
  @@index([status])
  @@map("service_providers")
}

model ServiceRequest {
  id String @id @default(uuid())
  
  // Core References
  categoryId String
  category   ServiceCategory @relation(fields: [categoryId], references: [id])
  agencyId   String
  agency     Agency          @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  requesterId String
  requester   User           @relation(fields: [requesterId], references: [id])
  
  // Assigned Provider
  providerId String?
  provider   ServiceProvider? @relation(fields: [providerId], references: [id])
  
  // Request Details
  title        String
  description  String
  requirements Json   // Structured requirements object
  priority     RequestPriority @default(NORMAL)
  
  // Constraints
  budget   Json? // { min, max, currency }
  timeline Json? // { startDate, deadline, flexibility }
  location Json? // { required, regions, timezone }
  
  // Preferences
  preferences Json? // { providerType, communication, reporting }
  
  // Status & Progress
  status        ServiceRequestStatus @default(PENDING)
  progress      Int           @default(0) // 0-100 percentage
  qualityScore  Float?        @default(0.0)
  
  // Results
  deliverables  Json?
  finalResults  Json?
  
  // Timing
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  assignedAt    DateTime?
  startedAt     DateTime?
  completedAt   DateTime?
  
  // Relations
  swarmExecutions SwarmExecution[]
  reviews         ServiceReview[]
  
  @@index([agencyId])
  @@index([categoryId])
  @@index([requesterId])
  @@index([providerId])
  @@index([status])
  @@index([priority])
  @@index([createdAt])
  @@map("service_requests")
}

model ProviderReview {
  id String @id @default(uuid())
  
  // References
  providerId String
  provider   ServiceProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  reviewerId String
  reviewer   User            @relation(fields: [reviewerId], references: [id])
  
  // Review Content
  rating      Float  // 1-5 scale
  title       String?
  comment     String?
  
  // Detailed Ratings
  qualityRating       Float? // 1-5 scale
  communicationRating Float? // 1-5 scale
  timelinessRating    Float? // 1-5 scale
  professionalismRating Float? // 1-5 scale
  
  // Verification
  isVerified  Boolean  @default(false)
  verifiedAt  DateTime?
  
  // Metadata
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([providerId])
  @@index([reviewerId])
  @@index([rating])
  @@index([createdAt])
  @@map("provider_reviews")
}

model ServiceReview {
  id String @id @default(uuid())
  
  // References
  serviceRequestId String
  serviceRequest   ServiceRequest @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
  reviewerId       String
  reviewer         User           @relation(fields: [reviewerId], references: [id])
  
  // Review Content
  rating      Float  // 1-5 scale
  title       String?
  comment     String?
  
  // Detailed Ratings
  overallSatisfaction Float? // 1-5 scale
  qualityRating       Float? // 1-5 scale
  valueRating         Float? // 1-5 scale
  experienceRating    Float? // 1-5 scale
  
  // Recommendations
  wouldRecommend Boolean @default(false)
  wouldUseAgain  Boolean @default(false)
  
  // Metadata
  metadata   Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@index([serviceRequestId])
  @@index([reviewerId])
  @@index([rating])
  @@index([createdAt])
  @@map("service_reviews")
}

// =====================================================
// AGENCY HUB EXTENSION ENUMS
// =====================================================

enum SwarmExecutionStatus {
  INITIALIZING
  ROUTING
  EXECUTING
  REVIEWING
  COMPLETED
  FAILED
  CANCELLED
}

enum ServiceComplexity {
  SIMPLE
  MODERATE
  COMPLEX
  EXPERT
}

enum ProviderStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_APPROVAL
}

enum ProviderPricingModel {
  HOURLY
  FIXED
  PERFORMANCE
  SUBSCRIPTION
}

enum ProviderExperienceLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
  MASTER
}

enum ServiceRequestStatus {
  PENDING
  ASSIGNED
  IN_PROGRESS
  REVIEW
  COMPLETED
  CANCELLED
  FAILED
}
