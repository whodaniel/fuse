// Agency Hub Prisma Schema Extension
// This file contains the updated Prisma models for multi-tenant agency architecture
// To be integrated with existing schema files

// =====================================================
// CORE AGENCY MODELS
// =====================================================

model Agency {
  id String @id @default(uuid())
  
  // Basic Info
  name      String
  subdomain String @unique
  slug      String @unique
  
  // Subscription & Billing
  subscriptionTier   AgencyTier           @default(TRIAL)
  subscriptionStatus SubscriptionStatus   @default(TRIAL)
  billingEmail       String
  
  // Customization
  branding Json? // { logo, primaryColor, secondaryColor, favicon, fonts }
  settings Json? // { allowedFeatures, integrations, customDomain }
  
  // Limits & Quotas
  userLimit    Int @default(5)
  agentLimit   Int @default(10)
  storageLimit Int @default(1000) // MB
  
  // Lifecycle
  isActive    Boolean   @default(true)
  trialEndsAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  users         User[]
  agents        Agent[]
  chats         Chat[]
  sessions      Session[]
  subscriptions AgencySubscription[]
  auditLogs     AgencyAuditLog[]
  
  @@map("agencies")
}

model AgencySubscription {
  id       String @id @default(uuid())
  agencyId String
  agency   Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  
  // Subscription Details
  tier         AgencyTier
  status       SubscriptionStatus @default(ACTIVE)
  billingCycle BillingCycle       @default(MONTHLY)
  
  // Pricing
  pricePerMonth Decimal @db.Decimal(10, 2)
  currency      String  @default("USD")
  
  // Lifecycle
  startedAt  DateTime  @default(now())
  endsAt     DateTime?
  renewedAt  DateTime?
  cancelledAt DateTime?
  
  // Payment Integration
  stripeSubscriptionId String?
  paymentMethodId      String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([agencyId])
  @@index([status])
  @@index([stripeSubscriptionId])
  @@map("agency_subscriptions")
}

// =====================================================
// ENHANCED USER MODEL
// =====================================================

model User {
  id           String   @id @default(cuid())
  email        String   
  name         String?
  passwordHash String
  
  // Agency Scoping
  agencyId String
  agency   Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  
  // Enhanced Role System
  role        EnhancedUserRole @default(AGENCY_USER)
  permissions Json?            // Agency-specific permissions override
  
  // Lifecycle
  isActive            Boolean   @default(true)
  onboardingCompleted Boolean   @default(false)
  onboardingData      Json?
  lastLoginAt         DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  // Relations
  chats    Chat[]
  sessions Session[]
  
  // Allow same email across different agencies
  @@unique([email, agencyId])
  @@index([agencyId])
  @@index([agencyId, role])
  @@map("users")
}

// =====================================================
// ENHANCED AGENT MODEL
// =====================================================

model Agent {
  id                String            @id @default(uuid())
  name              String
  type              AgentType
  
  // Agency Scoping
  agencyId String
  agency   Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  
  // Agency-Specific Configuration
  allowedFeatures String[] @default([]) // Features this agent can access
  resourceLimits  Json?                 // { maxCpuTime, maxMemory, maxApiCalls }
  
  // Standard Agent Fields
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  metadata          AgentMetadata?
  chats             Chat[]
  codeExecutions    CodeExecutionUsage[]
  
  @@index([agencyId])
  @@index([agencyId, type])
  @@map("agents")
}

// =====================================================
// ENHANCED EXISTING MODELS
// =====================================================

model Chat {
  id        String   @id @default(uuid())
  title     String?
  userId    String
  agentId   String
  
  // Agency Scoping
  agencyId String
  agency   Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  agent    Agent     @relation(fields: [agentId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]
  
  @@index([agencyId])
  @@index([agencyId, userId])
  @@map("chats")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  
  // Agency Scoping
  agencyId String
  agency   Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([agencyId])
  @@map("sessions")
}

// =====================================================
// AUDIT AND SECURITY MODELS
// =====================================================

model AgencyAuditLog {
  id       String @id @default(uuid())
  agencyId String
  agency   Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  
  // Action Details
  action     String // CREATE_AGENCY, SUSPEND_AGENCY, CREATE_USER, etc.
  actorId    String?
  actorRole  String?
  
  // Resource Context
  resourceType String? // USER, AGENT, AGENCY, etc.
  resourceId   String?
  
  // Change Details
  oldValues Json?
  newValues Json?
  metadata  Json? @default("{}")
  
  // Request Context
  ipAddress String?
  userAgent String?
  
  createdAt DateTime @default(now())
  
  @@index([agencyId])
  @@index([createdAt])
  @@index([action])
  @@map("agency_audit_logs")
}

model CrossTenantAccessLog {
  id String @id @default(uuid())
  
  // Access Details
  requestingAgencyId String?
  targetAgencyId     String?
  userId             String?
  
  // Request Details
  endpoint     String
  method       String
  resourceType String?
  resourceId   String?
  
  // Result
  accessGranted Boolean @default(false)
  denialReason  String?
  
  // Context
  ipAddress String?
  userAgent String?
  
  createdAt DateTime @default(now())
  
  @@index([requestingAgencyId])
  @@index([targetAgencyId])
  @@index([createdAt])
  @@map("cross_tenant_access_logs")
}

// =====================================================
// ENUMS
// =====================================================

enum AgencyTier {
  TRIAL
  STARTER
  PROFESSIONAL
  ENTERPRISE
  WHITE_LABEL
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  SUSPENDED
  CANCELLED
  OVERDUE
}

enum BillingCycle {
  MONTHLY
  YEARLY
}

enum EnhancedUserRole {
  MASTER_ADMIN     // Platform-wide control
  AGENCY_ADMIN     // Full agency management
  AGENCY_MANAGER   // Limited agency oversight
  AGENCY_USER      // Standard user within agency
  AGENCY_VIEWER    // Read-only access
}

// =====================================================
// EXISTING ENUMS (Updated)
// =====================================================

enum AgentType {
  CHAT
  TASK
  ANALYSIS
  WORKFLOW
  INTEGRATION
}

enum MessageRole {
  USER
  AGENT
  SYSTEM
}

// =====================================================
// UNCHANGED MODELS (Reference)
// =====================================================

// These models remain largely unchanged but may need agency scoping in implementation:

model Message {
  id        String      @id @default(uuid())
  content   String
  role      MessageRole
  chatId    String
  createdAt DateTime    @default(now())
  
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  
  @@map("messages")
}

model AgentMetadata {
  id                 String   @id @default(uuid())
  agentId            String   @unique
  version            String
  lastActive         DateTime @default(now())
  capabilities       Json     @default("{}")
  personalityTraits  Json     @default("{}")
  communicationStyle String   @default("NEUTRAL")
  expertiseAreas     Json     @default("{}")
  config             Json?
  currentState       Json?
  
  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)
  
  @@map("agent_metadata")
}

model CodeExecutionUsage {
  id              String                @id @default(uuid())
  agentId         String
  clientId        String
  executionId     String                @unique
  language        CodeExecutionLanguage
  code            String
  result          Json?
  output          Json
  error           Json?
  executionTime   Int                   // in milliseconds
  memoryUsage     Int                   // in bytes
  computeUnits    Float
  cost            Float
  tier            CodeExecutionTier
  environment     String
  status          CodeExecutionStatus
  createdAt       DateTime              @default(now())
  completedAt     DateTime?
  
  agent Agent @relation(fields: [agentId], references: [id])
  
  @@index([agentId])
  @@index([clientId])
  @@index([createdAt])
  @@index([language])
  @@index([tier])
  @@index([status])
  @@map("code_execution_usage")
}

enum CodeExecutionLanguage {
  JAVASCRIPT
  TYPESCRIPT
  PYTHON
  RUBY
  SHELL
  HTML
  CSS
}

enum CodeExecutionTier {
  BASIC
  STANDARD
  PREMIUM
  ENTERPRISE
}

enum CodeExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  TIMEOUT
  CANCELLED
}

model CodeExecutionSession {
  id              String    @id @default(uuid())
  name            String
  description     String?
  ownerId         String
  collaborators   String[]
  isPublic        Boolean   @default(false)
  files           Json      // Array of file objects
  environment     Json      // Environment configuration
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  expiresAt       DateTime?
  storageUsage    Int       @default(0) // in bytes
  
  @@map("code_execution_sessions")
}
