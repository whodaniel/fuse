/**
 * Core enums used throughout the application
 * Centralizes all enum definitions to avoid redundancy
 */
export declare enum TaskStatus {
    PENDING = "pending",
    RUNNING = "running",
    COMPLETED = "completed",
    FAILED = "failed",
    CANCELLED = "cancelled",
    TODO = "todo",
    IN_PROGRESS = "in_progress",
    DONE = "done"
}
export declare enum TaskPriority {
    LOW = "low",
    MEDIUM = "medium",
    HIGH = "high",
    CRITICAL = "critical"
}
export declare enum TaskType {
    ROUTINE = "routine",
    ONETIME = "onetime",
    RECURRING = "recurring",
    DEPENDENT = "dependent",
    BACKGROUND = "background",
    FEATURE = "feature",
    BUG = "bug",
    IMPROVEMENT = "improvement"
}
export declare enum WorkflowStatus {
    PENDING = "pending",
    STARTED = "started",
    RUNNING = "running",
    COMPLETED = "completed",
    FAILED = "failed",
    CANCELLED = "cancelled",
    PAUSED = "paused",
    STOPPED = "stopped",
    ACTIVE = "active"
}
export declare enum WorkflowStepType {
    TASK = "task",
    CONDITION = "condition",
    LOOP = "loop",
    PARALLEL = "parallel",
    SEQUENCE = "sequence",
    ERROR_HANDLER = "error_handler",
    NOTIFICATION = "notification",
    CUSTOM = "custom",
    TRANSFORM = "transform",
    VALIDATE = "validate",
    PROCESS = "process",
    ANALYSIS = "analysis",
    SECURITY = "security",
    ACCESSIBILITY = "accessibility",
    I18N = "i18n",
    DATA_FLOW = "data_flow",
    DOCUMENTATION = "documentation",
    REPORT = "report",
    ANALYZE = "analyze"
}
export declare enum AnalysisType {
    DEPENDENCY = "dependency",
    SECURITY = "security",
    PERFORMANCE = "performance",
    CODE_QUALITY = "code_quality",
    CUSTOM = "custom",
    SECURITY_SCAN = "security_scan"
}
export declare enum AnalysisStatus {
    IN_PROGRESS = "in_progress",
    SUCCESS = "success",
    FAILED = "failed",
    PENDING = "pending",
    RUNNING = "running",
    COMPLETED = "completed"
}
export declare enum Severity {
    LOW = "low",
    MEDIUM = "medium",
    HIGH = "high",
    CRITICAL = "critical"
}
export declare enum SecuritySeverity {
    LOW = "low",
    MEDIUM = "medium",
    HIGH = "high",
    CRITICAL = "critical"
}
export declare enum MessageType {
    COMMAND = "command",
    RESPONSE = "response",
    ERROR = "error",
    EVENT = "event",
    NOTIFICATION = "notification",
    REQUEST = "request",
    STATUS = "status",
    LOG = "log",
    METRIC = "metric",
    ALERT = "alert",
    HEARTBEAT = "heartbeat",
    INFO = "info",
    WARNING = "warning",
    TEXT = "text"
}
export declare enum Priority {
    LOW = "low",
    MEDIUM = "medium",
    HIGH = "high",
    CRITICAL = "critical"
}
export declare enum ErrorSeverity {
    LOW = "low",
    MEDIUM = "medium",
    HIGH = "high",
    CRITICAL = "critical"
}
export declare enum SuggestionStatus {
    OPEN = "open",
    IN_PROGRESS = "in_progress",
    IMPLEMENTED = "implemented",
    CLOSED = "closed",
    REJECTED = "rejected",
    DEFERRED = "deferred"
}
export declare enum SuggestionPriority {
    LOW = "low",
    MEDIUM = "medium",
    HIGH = "high",
    CRITICAL = "critical"
}
export declare enum FeatureStage {
    PLANNING = "planning",
    DEVELOPMENT = "development",
    TESTING = "testing",
    DEPLOYED = "deployed"
}
export declare enum AgentStatus {
    ACTIVE = "active",
    INACTIVE = "inactive",
    PENDING = "pending",
    DELETED = "deleted"
}
export declare enum StateEventType {
    CREATION = "creation",
    UPDATE = "update",
    DELETION = "deletion",
    SNAPSHOT = "snapshot",
    TRANSACTION = "transaction",
    SYNC = "sync"
}
export declare enum ListingType {
    SALE = "sale",
    AUCTION = "auction",
    LEASE = "lease"
}
export declare enum ListingStatus {
    ACTIVE = "active",
    SOLD = "sold",
    CANCELLED = "cancelled",
    EXPIRED = "expired"
}
export declare enum TransactionStatus {
    PENDING = "pending",
    COMPLETED = "completed",
    FAILED = "failed",
    REFUNDED = "refunded"
}
export declare enum PaymentMethod {
    ETH = "eth",
    SOL = "sol",
    USDC = "usdc",
    CUSTOM_TOKEN = "custom_token"
}
//# sourceMappingURL=enums.d.ts.map