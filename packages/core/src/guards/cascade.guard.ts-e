import { Injectable, CanActivate, ExecutionContext, ForbiddenException } from '@nestjs/common';
import { Reflector } from '@nestjs/core';
import { CascadeService } from '../services/CascadeService';
import { REQUIRES_CASCADE_MODE, REQUIRES_CASCADE_STATE, CASCADE_CONTROLLER_ID } from '../decorators/cascade.decorators';

@Injectable()
export class CascadeGuard implements CanActivate {
  constructor(
    private readonly reflector: Reflector,
    private readonly cascadeService: CascadeService
  ) {}

  async canActivate(): Promise<void> (context: ExecutionContext): Promise<boolean> {
    const requiredMode: unknown) {
      return true;
    }

    const controller  = this.reflector.get(REQUIRES_CASCADE_MODE, context.getHandler(): unknown) {
      throw new ForbiddenException(`Cascade controller '${controllerId}' not found`);
    }

    if (requiredMode && controller.getMode() !== requiredMode) {
      throw new ForbiddenException(
        `Operation requires Cascade mode '${requiredMode}' but current mode is '${controller.getMode()}'`
      );
    }

    if (requiredState && controller.getState() !== requiredState) {
      throw new ForbiddenException(
        `Operation requires Cascade state '${requiredState}' but current state is '${controller.getState()}'`
      );
    }

    return true;
  }
}
