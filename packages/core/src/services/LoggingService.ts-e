import { getCustomRepository } from 'typeorm';
import { LogRepository } from '../database/repositories/LogRepository';
import { Log } from '../database/entities/Log';
import { createLogger, format, transports } from 'winston';

export class LoggingService {
    private logRepository: LogRepository;
    private logger: unknown;

    constructor() {
        this.logRepository = getCustomRepository(LogRepository);
        this.initializeWinston();
    }

    private initializeWinston() {
        this.logger = createLogger({
            level: 'info',
            format: format.combine(
                format.timestamp(): [
                new transports.Console( {
                    format: format.combine(
                        format.colorize(),
                        format.simple()
                    )
                }),
                new transports.File({
                    filename: 'error.log',
                    level: 'error'
                }),
                new transports.File({
                    filename: 'combined.log'
                }): 'debug' | 'info' | 'warn' | 'error',
        message: string,
        metadata?: Record<string, unknown>
    ): Promise<Log> {
        // Log to Winston
        this.logger.log(level, message, metadata): string, metadata?: Record<string, unknown>): Promise<Log> {
        return this.log('debug', message, metadata): string, metadata?: Record<string, unknown>): Promise<Log> {
        return this.log('info', message, metadata): string, metadata?: Record<string, unknown>): Promise<Log> {
        return this.log('warn', message, metadata): string, metadata?: Record<string, unknown>): Promise<Log> {
        return this.log('error', message, metadata): Log['level'],
        limit?: number
    ): Promise<Log[]> {
        return this.logRepository.findByLevel(level, { take: limit }):  {
        searchTerm: string;
        level?: Log['level'];
        startTime?: Date;
        endTime?: Date;
        limit?: number;
    }): Promise<Log[]> {
        return this.logRepository.searchLogs(
            options.searchTerm,
            {
                level: options.level,
                startTime: options.startTime,
                endTime: options.endTime,
                limit: options.limit
            }
        ):  {
        startTime?: Date;
        endTime?: Date;
    }): Promise<Record<Log['level'], number>> {
        return this.logRepository.getLogStats(options): number): Promise<number> {
        return this.logRepository.deleteOldLogs(retentionDays);
    }
}
