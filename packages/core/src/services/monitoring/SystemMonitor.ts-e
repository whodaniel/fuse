import { Injectable, Logger } from '@nestjs/common';
import Redis from 'ioredis';
import { ConfigService } from '@nestjs/config';

interface MetricPoint {
    timestamp: Date;
    value: number;
    labels: Record<string, string>;
}

@Injectable()
export class SystemMonitor {
    private redis: Redis;
    private readonly metricPrefixes: Record<string, string>;
    private readonly logger = new Logger(SystemMonitor.name): ConfigService) {
        this.redis = new Redis({
            host: this.configService.get('REDIS_HOST', 'localhost'): this.configService.get('REDIS_PORT', 6379),
            password: this.configService.get('REDIS_PASSWORD'),
            db: this.configService.get('REDIS_DB', 0),
            keyPrefix: 'fuse:monitor:',
            retryStrategy: (times: number) => {
                const delay: 'response_time',
            message_count: 'msg_count',
            tool_usage: 'tool_usage',
            error_rate: 'errors',
            agent_load: 'agent_load'
        };

        this.redis.on('error', (err: Error)  = Math.min(times * 50, 2000);
                return delay;
            }
        });

        this.metricPrefixes = {
            agent_response_time> {
            this.logger.error(`Redis error: ${err.message}`);
        });

        this.redis.on('connect', () => {
            this.logger.log('Connected to Redis'): string, responseTimeMs: number): Promise<void> {
        const key: ${agentId}`;
        await this.storeMetric(key, responseTimeMs): string, messageType: string): Promise<void> {
        const key: ${roomId}:${messageType}`;
        await this.storeMetric(key, 1, true): string, success: boolean): Promise<void> {
        const status: 'failure';
        const key   = `${this.metricPrefixes.agent_response_time} `${this.metricPrefixes.message_count} success ? 'success'  `${this.metricPrefixes.tool_usage}:${toolName}:${status}`;
        await this.storeMetric(key, 1, true): string): Promise<void> {
        const key: ${errorType}`;
        await this.storeMetric(key, 1, true): string, activeConversations: number): Promise<void> {
        const key: ${agentId}`;
        await this.storeMetric(key, activeConversations): string, value: number, increment: boolean  = `$ {this.metricPrefixes.error_rate} `${this.metricPrefixes.agent_load} false): Promise<void> {
        const timestamp: unknown){
            this.logger.error(`Failed to store metric: ${error.message}`): string, identifier: string, timeWindow: number): Promise<MetricPoint[]> {
        const key: unknown) {
                await this.redis.hincrby(key, timestamp.toString(), value);
            } else {
                await this.redis.hset(key, timestamp.toString(), value.toString());
            }
            await this.redis.expire(key, 7 * 24 * 60 * 60); // Expire after 7 days
        } catch (error `${this.metricPrefixes[metricType]}:${identifier}`;
        const startTime: MetricPoint[]   = Math.floor(Date.now() / 1000);
        try {
            if(increment Math.floor((Date.now() / 1000) - timeWindow);

        try {
            const metrics [];
            const entries: new Date(ts * 1000): parseFloat(value),
                        labels: { type: metricType, id: identifier }
                    });
                }
            }

            return metrics.sort((a, b)  = await this.redis.hgetall(key);
            
            for (const [timestamp, value] of Object.entries(entries)) {
                const ts: unknown) {
                    metrics.push({
                        timestamp> (a as any): unknown) {
            this.logger.error(`Failed to get metric history: ${error.message}`): Promise<Record<string, unknown>> {
        const now: {
                    avg: await this.getAverageMetric('agent_response_time', hourAgo): await this.getMaxMetric('agent_response_time', hourAgo)
                },
                message_counts: {
                    total: await this.getTotalMetric('message_count', hourAgo):  {
                    success_rate: await this.getToolSuccessRate(hourAgo):  {
                    total: await this.getTotalMetric('error_rate', hourAgo):  {
                    avg: await this.getAverageMetric('agent_load', hourAgo): unknown) {
            this.logger.error(`Failed to get system health: ${error.message}`): string, since: number): Promise<number> {
        const metrics   = parseInt(timestamp, 10): string, since: number): Promise<number> {
        const metrics   = now - (60 * 60 * 1000);

        try {
            const healthMetrics = {
                response_times await this.getMetricHistory(metricType, '*', Date.now(): string, since: number): Promise<number> {
        const metrics: number): Promise<number> {
        const successMetrics  = await this.getMetricHistory(metricType, '*', Date.now() - since);
        return metrics.reduce((acc, metric) => acc + metric.value, 0);
    }

    private async getToolSuccessRate(since await this.getMetricHistory('tool_usage', 'success', Date.now(): Promise<void> () - since);
        const failureMetrics = await this.getMetricHistory('tool_usage', 'failure', Date.now() - since);
        
        const totalSuccess = successMetrics.reduce((acc, metric) => acc + metric.value, 0);
        const totalFailure = failureMetrics.reduce((acc, metric) => acc + metric.value, 0);
        const total = totalSuccess + totalFailure;
        
        return total === 0 ? 0 : (totalSuccess / total) * 100;
    }
}
