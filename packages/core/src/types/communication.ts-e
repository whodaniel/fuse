"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommunicationRecord = exports.TransactionType = exports.ChainType = exports.SecurityLevel = exports.MessagePriority = exports.CommunicationPattern = exports.ProtocolType = exports.ParticipantType = exports.ResourceType = exports.WalletType = exports.TokenType = exports.ModelType = exports.PlatformType = exports.ContentType = void 0;
const uuid_1 = require("uuid");
// Content Types
var ContentType;
(function (ContentType) {
    // Basic Types
    ContentType["TEXT"] = "text";
    ContentType["CODE"] = "code";
    ContentType["MARKDOWN"] = "markdown";
    ContentType["IMAGE"] = "image";
    ContentType["VIDEO"] = "video";
    ContentType["AUDIO"] = "audio";
    ContentType["DOCUMENT"] = "document";
    ContentType["URL"] = "url";
    ContentType["EMBED"] = "embed";
    // Blockchain Types
    ContentType["SMART_CONTRACT"] = "smart_contract";
    ContentType["TRANSACTION"] = "transaction";
    ContentType["TOKEN"] = "token";
    ContentType["NFT"] = "nft";
    ContentType["FUNGIBLE_TOKEN"] = "fungible_token";
    ContentType["SEMI_FUNGIBLE_TOKEN"] = "semi_fungible_token";
    ContentType["WALLET"] = "wallet";
    // AI/ML Types
    ContentType["MODEL_INTERACTION"] = "model_interaction";
    ContentType["MODEL_INFERENCE"] = "model_inference";
    ContentType["MODEL_TRAINING"] = "model_training";
    ContentType["PROMPT"] = "prompt";
    ContentType["COMPLETION"] = "completion";
    ContentType["EMBEDDING"] = "embedding";
    // Resource Types
    ContentType["COMPUTE_RESOURCE"] = "compute_resource";
    ContentType["STORAGE_RESOURCE"] = "storage_resource";
    ContentType["NETWORK_RESOURCE"] = "network_resource";
    ContentType["API_RESOURCE"] = "api_resource";
})(ContentType || (exports.ContentType = ContentType = {}));
// Platform Types
var PlatformType;
(function (PlatformType) {
    // Social Media
    PlatformType["TWITTER"] = "twitter";
    PlatformType["FACEBOOK"] = "facebook";
    PlatformType["LINKEDIN"] = "linkedin";
    PlatformType["INSTAGRAM"] = "instagram";
    PlatformType["DISCORD"] = "discord";
    PlatformType["SLACK"] = "slack";
    // Development
    PlatformType["GITHUB"] = "github";
    PlatformType["GITLAB"] = "gitlab";
    PlatformType["STACKOVERFLOW"] = "stackoverflow";
    // Communication
    PlatformType["EMAIL"] = "email";
    PlatformType["SMS"] = "sms";
    PlatformType["CHAT"] = "chat";
    PlatformType["FORUM"] = "forum";
    PlatformType["BLOG"] = "blog";
    // Video/Audio
    PlatformType["ZOOM"] = "zoom";
    PlatformType["TEAMS"] = "teams";
    PlatformType["MEET"] = "meet";
    // Blockchain
    PlatformType["ETHEREUM"] = "ethereum";
    PlatformType["POLYGON"] = "polygon";
    PlatformType["SOLANA"] = "solana";
    PlatformType["BINANCE"] = "binance";
    PlatformType["ARBITRUM"] = "arbitrum";
    PlatformType["OPTIMISM"] = "optimism";
    PlatformType["AVALANCHE"] = "avalanche";
    PlatformType["COSMOS"] = "cosmos";
    PlatformType["CARDANO"] = "cardano";
    // DeFi
    PlatformType["UNISWAP"] = "uniswap";
    PlatformType["AAVE"] = "aave";
    PlatformType["COMPOUND"] = "compound";
    PlatformType["CURVE"] = "curve";
    PlatformType["BALANCER"] = "balancer";
    // NFT Marketplaces
    PlatformType["OPENSEA"] = "opensea";
    PlatformType["RARIBLE"] = "rarible";
    PlatformType["FOUNDATION"] = "foundation";
    PlatformType["BLUR"] = "blur";
    PlatformType["X2Y2"] = "x2y2";
    // AI/ML Platforms
    PlatformType["OPENAI"] = "openai";
    PlatformType["ANTHROPIC"] = "anthropic";
    PlatformType["COHERE"] = "cohere";
    PlatformType["HUGGINGFACE"] = "huggingface";
    PlatformType["REPLICATE"] = "replicate";
    PlatformType["STABILITY_AI"] = "stability_ai";
    PlatformType["CUSTOM_MODEL"] = "custom_model";
    // Custom
    PlatformType["API"] = "api";
    PlatformType["CUSTOM"] = "custom";
})(PlatformType || (exports.PlatformType = PlatformType = {}));
// Model Types for AI/ML
var ModelType;
(function (ModelType) {
    // Language Models
    ModelType["GPT4"] = "gpt4";
    ModelType["GPT35"] = "gpt35";
    ModelType["CLAUDE"] = "claude";
    ModelType["LLAMA"] = "llama";
    ModelType["MISTRAL"] = "mistral";
    ModelType["PALM"] = "palm";
    // Image Models
    ModelType["DALLE"] = "dalle";
    ModelType["STABLE_DIFFUSION"] = "stable_diffusion";
    ModelType["MIDJOURNEY"] = "midjourney";
    // Audio Models
    ModelType["WHISPER"] = "whisper";
    ModelType["MUSICGEN"] = "musicgen";
    // Embedding Models
    ModelType["ADA"] = "ada";
    ModelType["BERT"] = "bert";
    // Custom/Unknown
    ModelType["CUSTOM"] = "custom";
    ModelType["UNKNOWN"] = "unknown";
})(ModelType || (exports.ModelType = ModelType = {}));
// Token Types
var TokenType;
(function (TokenType) {
    // Fungible
    TokenType["ERC20"] = "erc20";
    TokenType["ERC223"] = "erc223";
    TokenType["BEP20"] = "bep20";
    // Non-Fungible
    TokenType["ERC721"] = "erc721";
    TokenType["ERC1155"] = "erc1155";
    // Semi-Fungible
    TokenType["ERC1155_SEMI"] = "erc1155_semi";
    // Other Standards
    TokenType["SPL"] = "spl";
    TokenType["COSMOS_TOKEN"] = "cosmos_token";
    TokenType["CARDANO_TOKEN"] = "cardano_token";
    // Custom
    TokenType["CUSTOM"] = "custom";
})(TokenType || (exports.TokenType = TokenType = {}));
// Wallet Types
var WalletType;
(function (WalletType) {
    // Non-Custodial
    WalletType["NON_CUSTODIAL"] = "non_custodial";
    WalletType["HARDWARE"] = "hardware";
    WalletType["PAPER"] = "paper";
    // Custodial
    WalletType["CUSTODIAL"] = "custodial";
    WalletType["EXCHANGE"] = "exchange";
    // Smart Contract
    WalletType["SMART_CONTRACT_WALLET"] = "smart_contract_wallet";
    WalletType["MULTISIG"] = "multisig";
    // Types
    WalletType["HOT"] = "hot";
    WalletType["COLD"] = "cold";
    // Custom
    WalletType["CUSTOM"] = "custom";
})(WalletType || (exports.WalletType = WalletType = {}));
// Resource Types
var ResourceType;
(function (ResourceType) {
    // Compute
    ResourceType["CPU"] = "cpu";
    ResourceType["GPU"] = "gpu";
    ResourceType["TPU"] = "tpu";
    ResourceType["MEMORY"] = "memory";
    // Storage
    ResourceType["DISK"] = "disk";
    ResourceType["OBJECT_STORAGE"] = "object_storage";
    ResourceType["IPFS"] = "ipfs";
    ResourceType["ARWEAVE"] = "arweave";
    // Network
    ResourceType["BANDWIDTH"] = "bandwidth";
    ResourceType["LATENCY"] = "latency";
    // Custom
    ResourceType["CUSTOM"] = "custom";
})(ResourceType || (exports.ResourceType = ResourceType = {}));
// Participant Types
var ParticipantType;
(function (ParticipantType) {
    ParticipantType["HUMAN"] = "human";
    ParticipantType["AI_AGENT"] = "ai_agent";
    ParticipantType["SYSTEM"] = "system";
    ParticipantType["SERVICE"] = "service";
    ParticipantType["BOT"] = "bot";
    ParticipantType["SMART_CONTRACT"] = "smart_contract";
    ParticipantType["DAO"] = "dao";
    ParticipantType["UNKNOWN"] = "unknown";
})(ParticipantType || (exports.ParticipantType = ParticipantType = {}));
// Protocol Types
var ProtocolType;
(function (ProtocolType) {
    ProtocolType["HTTP"] = "http";
    ProtocolType["HTTPS"] = "https";
    ProtocolType["WS"] = "ws";
    ProtocolType["WSS"] = "wss";
    ProtocolType["REDIS"] = "redis";
    ProtocolType["MQTT"] = "mqtt";
    ProtocolType["AMQP"] = "amqp";
    ProtocolType["GRPC"] = "grpc";
    ProtocolType["TCP"] = "tcp";
    ProtocolType["UDP"] = "udp";
    // Blockchain Protocols
    ProtocolType["EVM"] = "evm";
    ProtocolType["SOLANA_PROTOCOL"] = "solana_protocol";
    ProtocolType["COSMOS"] = "cosmos";
    ProtocolType["POLKADOT"] = "polkadot";
    // DeFi Protocols
    ProtocolType["ERC20"] = "erc20";
    ProtocolType["ERC721"] = "erc721";
    ProtocolType["ERC1155"] = "erc1155";
    ProtocolType["UNISWAP_V2"] = "uniswap_v2";
    ProtocolType["UNISWAP_V3"] = "uniswap_v3";
    ProtocolType["CUSTOM"] = "custom";
})(ProtocolType || (exports.ProtocolType = ProtocolType = {}));
// Communication Patterns
var CommunicationPattern;
(function (CommunicationPattern) {
    CommunicationPattern["DIRECT"] = "direct";
    CommunicationPattern["BROADCAST"] = "broadcast";
    CommunicationPattern["REQUEST_RESPONSE"] = "request_response";
    CommunicationPattern["PUBLISH_SUBSCRIBE"] = "publish_subscribe";
    CommunicationPattern["PIPELINE"] = "pipeline";
    CommunicationPattern["ORCHESTRATOR"] = "orchestrator";
    CommunicationPattern["SMART_CONTRACT_EVENT"] = "smart_contract_event";
    CommunicationPattern["ORACLE"] = "oracle";
    CommunicationPattern["CROSS_CHAIN"] = "cross_chain";
})(CommunicationPattern || (exports.CommunicationPattern = CommunicationPattern = {}));
// Message Priority
var MessagePriority;
(function (MessagePriority) {
    MessagePriority["CRITICAL"] = "critical";
    MessagePriority["HIGH"] = "high";
    MessagePriority["MEDIUM"] = "medium";
    MessagePriority["LOW"] = "low";
})(MessagePriority || (exports.MessagePriority = MessagePriority = {}));
// Security Level
var SecurityLevel;
(function (SecurityLevel) {
    SecurityLevel["HIGH"] = "high";
    SecurityLevel["MEDIUM"] = "medium";
    SecurityLevel["LOW"] = "low";
})(SecurityLevel || (exports.SecurityLevel = SecurityLevel = {}));
// Blockchain-specific Types
var ChainType;
(function (ChainType) {
    ChainType["MAINNET"] = "mainnet";
    ChainType["TESTNET"] = "testnet";
    ChainType["DEVNET"] = "devnet";
})(ChainType || (exports.ChainType = ChainType = {}));
var TransactionType;
(function (TransactionType) {
    TransactionType["TRANSFER"] = "transfer";
    TransactionType["SWAP"] = "swap";
    TransactionType["MINT"] = "mint";
    TransactionType["BURN"] = "burn";
    TransactionType["STAKE"] = "stake";
    TransactionType["UNSTAKE"] = "unstake";
    TransactionType["GOVERNANCE"] = "governance";
    TransactionType["SMART_CONTRACT_INTERACTION"] = "smart_contract_interaction";
})(TransactionType || (exports.TransactionType = TransactionType = {}));
// Communication Record
class CommunicationRecord {
    constructor(context) {
        this.id = (0, uuid_1.v4)();
        this.createdAt = new Date().toISOString();
        this.updatedAt = this.createdAt;
        this.context = {
            id: (0, uuid_1.v4)(),
            timestamp: new Date().toISOString(),
            participants: {
                sender: {
                    id: '',
                    type: ParticipantType.UNKNOWN
                },
                receivers: []
            },
            platform: {
                type: PlatformType.CUSTOM
            },
            protocol: {
                type: ProtocolType.CUSTOM
            },
            content: {
                type: ContentType.TEXT,
                value: ''
            },
            pattern: {
                type: CommunicationPattern.DIRECT
            },
            security: {
                level: SecurityLevel.LOW
            },
            ...context
        };
    }
    update(updates) {
        const updatedContext = {
            ...this.context,
            ...updates,
            metadata: {
                ...this.context.metadata,
                ...updates.metadata
            }
        };
        return new CommunicationRecord(updatedContext);
    }
    toJSON() {
        return {
            id: this.id,
            context: this.context,
            createdAt: this.createdAt,
            updatedAt: this.updatedAt
        };
    }
}
exports.CommunicationRecord = CommunicationRecord;
//# sourceMappingURL=communication.js.mapexport {};
