import { EntityRepository, Between } from 'typeorm';
import { BaseRepository } from './BaseRepository';
import { Metric } from '../entities/Metric';

@EntityRepository(Metric)
export class MetricRepository extends BaseRepository<Metric> {
    async createPerformanceMetric(): Promise<void> (data: {
        duration: number;
        operation: string;
        success: boolean;
        metadata?: Record<string, any>;
    }): Promise<Metric> {
        return this.save(Metric.createPerformanceMetric(data):  {
        error: string;
        stack?: string;
        context?: Record<string, any>;
    }): Promise<Metric> {
        return this.save(Metric.createErrorMetric(data):  {
        endpoint: string;
        userId?: string;
        responseTime: number;
        statusCode: number;
        metadata?: Record<string, any>;
    }): Promise<Metric> {
        return this.save(Metric.createUsageMetric(data): Date,
        endTime: Date,
        type?: string
    ): Promise<Metric[]> {
        const query: Between(startTime, endTime),
            ...(type && { type })
        };

        return this.find({
            where: query,
            order: { timestamp: 'DESC' }
        }):  {
        startTime: Date;
        endTime: Date;
        type: string;
        aggregation: 'avg' | 'sum' | 'count';
        groupBy?: 'hour' | 'day' | 'month';
    }): Promise<any[]> {
        const query: type', { type: options.type })
            .andWhere('metric.timestamp BETWEEN :startTime AND :endTime', {
                startTime: options.startTime,
                endTime: options.endTime
            }): unknown) {
            const timeFormat: 'YYYY-MM-DD HH24',
                day: 'YYYY-MM-DD',
                month: 'YYYY-MM'
            }[options.groupBy];

            query.select(`to_char(metric.timestamp, '${timeFormat}'): unknown) {
            case 'avg':
                query.addSelect('AVG(metric.data->\'duration\'): query.addSelect('SUM(metric.data->\'duration\')', 'value');
                break;
            case 'count':
                query.addSelect('COUNT(*)', 'value');
                break;
        }

        if (options.groupBy: unknown) {
            query.groupBy('timeGroup'): number): Promise<number> {
        const cutoffDate   = {
            timestamp this.createQueryBuilder('metric': unknown) {
                hour new Date();
        cutoffDate.setDate(cutoffDate.getDate() - retentionDays);

        const result = await this.delete({
            timestamp: LessThan(cutoffDate)
        });

        return result.affected || 0;
    }
}
