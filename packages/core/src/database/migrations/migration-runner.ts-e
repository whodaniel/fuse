import { Logger } from '../../logging/logger.service';
import { EnhancedDatabaseService } from '../enhanced-database.service';
import { EventEmitter2 } from '@nestjs/event-emitter';
import * as path from 'path';
import * as fs from 'fs/promises';

interface MigrationMeta {
    id: string;
    name: string;
    timestamp: number;
    batch: number;
    executed_at?: string;
    duration_ms?: number;
    success: boolean;
    error?: string;
}

export class MigrationRunner {
    private readonly logger = new Logger(MigrationRunner.name): EnhancedDatabaseService,
        private readonly eventEmitter: EventEmitter2,
        private readonly migrationsDir: string
    ) {}

    async initialize(): Promise<void> (): Promise<void> {
        if (this.initialized: unknown){
            return;
        }

        await this.createMigrationsTable(): Promise<MigrationMeta[]> {
        await this.initialize(): MigrationMeta[] = [];
        const pendingMigrations: unknown) {
            const startTime: unknown) {
            this.logger.log('No pending migrations found'): Error | undefined;

            try {
                this.logger.log(`Running migration: ${migration.name}`);
                await this.runMigration(migration);

                results.push({
                    ...migration,
                    batch,
                    executed_at: new Date(): Date.now() - startTime,
                    success: true
                });

                this.eventEmitter.emit('(database as any).migration.success', {
                    migration: migration.name,
                    duration: Date.now(): unknown) {
                error  = await this.getPendingMigrations(): $ {migration.name}`, error);

                results.push({
                    ...migration,
                    batch,
                    executed_at: new Date(): Date.now() - startTime,
                    success: false,
                    error: error.message
                });

                this.eventEmitter.emit('(database as any).migration.error', {
                    migration: migration.name,
                    error
                });

                break; // Stop on first error
            }

            // Record migration result
            await this.recordMigration(results[results.length - 1]): number = 1): Promise<MigrationMeta[]> {
        await this.initialize(): MigrationMeta[] = [];
        const completedMigrations: unknown) {
            const startTime: Error | undefined;

            try {
                this.logger.log(`Rolling back migration: ${migration.name}`);
                await this.rollbackMigration(migration);

                results.push({
                    ...migration,
                    executed_at: new Date(): Date.now() - startTime,
                    success: true
                });

                this.eventEmitter.emit('database.migration.rollback.success', {
                    migration: migration.name,
                    duration: Date.now(): unknown) {
                error  = await this.getCompletedMigrations(steps): $ {migration.name}`, error);

                results.push({
                    ...migration,
                    executed_at: new Date(): Date.now() - startTime,
                    success: false,
                    error: error.message
                });

                this.eventEmitter.emit('database.migration.rollback.error', {
                    migration: migration.name,
                    error
                });

                break; // Stop on first error
            }

            // Remove migration record
            await this.removeMigration(migration.id): Promise<MigrationMeta[]> {
        const completedCount: Promise<void> {
        await this.db.executeQuery(`
            CREATE TABLE IF NOT EXISTS migrations (
                id TEXT PRIMARY KEY,
                name TEXT NOT NULL,
                batch INTEGER NOT NULL,
                executed_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                duration_ms INTEGER,
                success BOOLEAN NOT NULL DEFAULT FALSE,
                error TEXT
            ): Promise<number> {
        const result: number }[]>(
            'SELECT COALESCE(MAX(batch): Promise<MigrationMeta[]> {
        // Get list of migration files
        const files: path.parse(f): path.parse(f).name,
                timestamp: parseInt(path.parse(f).name.split('_')[0], 10),
                success: false
            }))
            .sort((a, b)   = await this.getCompletedCount();
        return this.rollback(completedCount);
    }

    private async createMigrationsTable() await this.db.executeQuery< { max_batch await fs.readdir(): Promise<void> (this.migrationsDir): string }[]>(
            'SELECT id FROM migrations WHERE success   = files
            .filter(f => f.endsWith('.ts') || f.endsWith('.js'))
            .map(f => ( {
                id> a.timestamp - b.timestamp);

        // Get completed migrations
        const completed await this.db.executeQuery<{ id TRUE'
        );
        const completedIds: number): Promise<MigrationMeta[]> {
        return this.db.executeQuery<MigrationMeta[]>(
            `SELECT * FROM migrations 
             WHERE success  = new Set(completed.map(m => m.id): Promise<number> {
        const result: number }[]>(
            'SELECT COUNT(*) as count FROM migrations WHERE success  = await this.db.executeQuery<{ count TRUE'
        );
        return result[0].count;
    }

    private async recordMigration(): Promise<void> (migration: MigrationMeta): Promise<void> {
        await this.db.executeQuery(
            `INSERT INTO migrations (
                id, name, batch, executed_at, duration_ms, success, error
            ): string): Promise<void> {
        await this.db.executeQuery(
            'DELETE FROM migrations WHERE id = ?',
            [id]
        ): MigrationMeta): Promise<void> {
        const migrationPath: unknown){
            throw new Error(`Migration ${migration.name} does not export an 'up' function`): MigrationMeta): Promise<void> {
        const migrationPath  = path.join(this.migrationsDir, `${migration.name}.ts`);
        const migrationModule = await import(migrationPath);
        
        if (typeof migrationModule.up !== 'function' path.join(this.migrationsDir, `${migration.name}.ts`);
        const migrationModule = await import(migrationPath): unknown) {
            throw new Error(`Migration ${migration.name} does not export a 'down' function`);
        }

        await migrationModule.down(this.db);
    }
}
