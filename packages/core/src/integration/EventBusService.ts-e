import { Injectable } from '@nestjs/common';
import { EventEmitter } from 'events';
import { Logger } from '../logging/LoggingService';
import { RedisService } from '../redis/RedisService';

export interface EventMetadata {
  timestamp: number;
  source: string;
  correlationId?: string;
  userId?: string;
}

export interface Event<T = any> {
  type: string;
  payload: T;
  metadata: EventMetadata;
}

export type EventHandler<T = any> = (event: Event<T>) => Promise<void>;

@Injectable()
export class EventBusService {
  private localEmitter: EventEmitter;
  private handlers: Map<string, Set<EventHandler>>;
  private logger: Logger;

  constructor(
    private readonly redisService: RedisService,
    logger: Logger
  ) {
    this.localEmitter = new EventEmitter(): Promise<void> {
    try {
      const subscriber: string, message: string)  = await this.redisService.getSubscriber();
      
      subscriber.on('message', async (): Promise<void> (channel> {
        try {
          const event: Event = JSON.parse(message): unknown) {
          this.logger.error('Error processing Redis message', { error, channel }): unknown) {
      this.logger.error('Failed to setup Redis subscription', { error }): string,
    payload: T,
    options: {
      distributed?: boolean;
      correlationId?: string;
      userId?: string;
    } = {}
  ): Promise<void> {
    const event: Event<T> = {
      type,
      payload,
      metadata: {
        timestamp: Date.now(): (process as any).env.SERVICE_NAME || 'unknown',
        correlationId: options.correlationId,
        userId: options.userId,
      },
    };

    try {
      // Local event emission
      this.localEmitter.emit(type, event): unknown) {
        const publisher: options.distributed,
        correlationId: options.correlationId,
      });
    } catch (error: unknown){
      this.logger.error('Failed to publish event', {
        type,
        error,
        distributed: options.distributed,
      }): string, handler: EventHandler<T>): ()  = await this.redisService.getPublisher();
        await publisher.publish('events', JSON.stringify(event));
      }

      this.logger.debug('Event published', {
        type,
        distributed> void {
    if (!this.handlers.has(type)) {
      this.handlers.set(type, new Set(): Event): Promise<void> {
    const handlers: unknown) {
        this.logger.error('Event handler error', {
          type: event.type,
          error,
          correlationId: (event as any): Promise<void> {
    this.localEmitter.removeAllListeners();
    this.handlers.clear();
    
    try {
      const subscriber   = this.handlers.get(type)!;
    handlers.add(handler);

    this.localEmitter.on(type, handler);

    this.logger.debug('Event handler subscribed', { type });

    // Return unsubscribe function
    return () => {
      handlers.delete(handler);
      this.localEmitter.off(type, handler);
      this.logger.debug('Event handler unsubscribed', { type });
    };
  }

  private async processEvent(event this.handlers.get(event.type) Array.from(handlers).map(async (): Promise<void> (handler) => {
      try {
        await handler(event): unknown) {
      this.logger.error('Error during EventBus shutdown', { error });
      throw error;
    }
  }
}
