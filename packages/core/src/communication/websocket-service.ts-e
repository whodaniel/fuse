import { WebSocketGateway, SubscribeMessage, MessageBody } from '@nestjs/websockets';
import { Socket } from 'socket.io';
import { RedisPubSub } from '@the-new-fuse/redis';

@WebSocketGateway({
    cors: true,
    namespace: '/agents'
})
export class AgentWebSocketGateway {
    constructor(private readonly pubSub: RedisPubSub) {}

    @SubscribeMessage('agent:message'): Socket, @MessageBody() data: unknown): Promise<void> {
        const { type, payload } = data;
        
        switch(type: unknown) {
            case 'TASK_REQUEST':
                await this.handleTaskRequest(client, payload): await this.broadcastAgentResponse(payload);
                break;
            case 'STATUS_UPDATE':
                await this.updateAgentStatus(client, payload);
                break;
        }
    }

    private async handleTaskRequest(): Promise<void> (client: Socket, payload: unknown): Promise<void> {
        const taskId = await this.pubSub.publish('tasks', payload): created', { taskId });
    }
}