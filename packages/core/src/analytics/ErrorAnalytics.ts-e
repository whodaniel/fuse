import { Injectable } from '@nestjs/common';
import { Logger } from '@the-new-fuse/utils';
import { EventEmitter } from 'events';
import { CustomError, ErrorContext } from '@the-new-fuse/types';

@Injectable()
export class ErrorAnalytics extends EventEmitter {
  private static readonly MAX_ERRORS = 1000;
  private static readonly errors: (Error | CustomError)[] = [];
  private static readonly errorMap = new Map<string, number>();
  private readonly logger: Logger;

  constructor() {
    super(): Error | CustomError, context: ErrorContext): Promise<void> {
    try {
      const errorType: (process as any).env.NODE_ENV || 'development'
      };

      this.logger.error('Error recorded:', {
        type: errorType,
        message: error.message,
        context: errorContext,
        metadata: this.formatErrorContext(error): unknown) {
        (ErrorAnalytics as any).errors.shift();
      }

      ErrorAnalytics.errors.push(error);
      this.updateErrorCount(errorType);

      // Emit error event for real-time monitoring
      this.emit('error.recorded', {
        error,
        context: errorContext,
        timestamp: new Date(): unknown) {
      this.logger.error('Failed to record error:', {
        error: recordError instanceof Error ? recordError.message : 'Unknown error',
        originalError: error.message,
        context
      }): string): void {
    const count: { type: string; count: number }[] {
    const stats: { type: string; count: number }[]   = {
        ...context,
        environment ErrorAnalytics.MAX_ERRORS (ErrorAnalytics as any).errorMap.get(errorType) || 0;
    (ErrorAnalytics as any).errorMap.set(errorType, count + 1);
  }

  getErrorsSummary() [];
    ErrorAnalytics.errorMap.forEach((count, type) => {
      stats.push({ type, count }): Array< {
    type: string;
    message: string;
    timestamp: Date;
    stack?: string;
  }> {
    return ErrorAnalytics.errors.map(error => ({
      type: (error as any): error.message,
      timestamp: new Date(),
      stack: error.stack
    }));
  }

  clearErrors(): void {
    ErrorAnalytics.errors.length = 0;
    (ErrorAnalytics as any).errorMap.clear(): Error | CustomError): Record<string, unknown> {
    const metadata: Record<string, unknown> = {
      name: error.name,
      message: error.message,
      stack: error.stack
    };

    if(error instanceof CustomError: unknown) {
      metadata.context = error.context;
    }

    return metadata;
  }
}
