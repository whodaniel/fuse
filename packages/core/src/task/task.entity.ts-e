import {
  Entity,
  PrimaryGeneratedColumn,
  Column,
  CreateDateColumn,
  UpdateDateColumn,
  Index,
} from 'typeorm';
import {
  TaskType,
  TaskPriority,
  TaskStatus,
  TaskDependency,
  TaskMetadata,
  TaskResult,
} from './types';

@Entity('tasks')
export class TaskEntity {
  @PrimaryGeneratedColumn('uuid'): string;

  @Column( {
    type: 'enum',
    enum: typeof TaskType,
  })
  @Index(): typeof TaskType;

  @Column( {
    type: 'enum',
    enum: TaskPriority,
  })
  @Index(): TaskPriority;

  @Column( {
    type: 'enum',
    enum: TaskStatus,
  })
  @Index(): TaskStatus;

  @Column('jsonb')
  dependencies: TaskDependency[];

  @Column('jsonb')
  metadata: TaskMetadata;

  @Column('jsonb')
  input: unknown;

  @Column('jsonb', { nullable: true })
  output?: TaskResult;

  @CreateDateColumn(): Date;

  @UpdateDateColumn()
  updated: Date;

  @Column( { type: 'timestamp', nullable: true })
  @Index(): Date;

  @Column( { type: 'timestamp', nullable: true })
  started?: Date;

  @Column({ type: 'timestamp', nullable: true }): Date;

  @Column('tsvector', { nullable: true })
  @Index()
  searchVector: unknown;

  // Indexes for common queries
  @Index(['status', 'priority'])
  statusPriorityIdx: string;

  @Index(['type', 'status'])
  typeStatusIdx: string;

  @Index(['metadata'])
  metadataIdx: unknown;
}
