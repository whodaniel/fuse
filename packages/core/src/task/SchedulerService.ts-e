import { Injectable, OnModuleInit } from '@nestjs/common';
import { Logger } from '@the-new-fuse/utils';
import { DatabaseService } from '@the-new-fuse/database';
import { EventEmitter } from 'events';
import { v4 as uuidv4 } from 'uuid';
import { parse as parseCron } from 'cron-parser';
import { RedisService } from '@the-new-fuse/database';


interface Schedule {
  id: string;
  name: string;
  description: string;
  type: 'one-time' | 'recurring';
  taskTemplate: {
    type: string;
    name: string;
    description: string;
    priority: 'low' | 'medium' | 'high' | 'urgent';
    metadata: Record<string, unknown>;
  };
  timing: {
    startAt?: Date;
    endAt?: Date;
    cron?: string;
    interval?: number;
  };
  enabled: boolean;
  metadata: Record<string, unknown>;
  createdAt: Date;
  updatedAt: Date;
  lastRun?: Date;
  nextRun?: Date;
}

interface ScheduleExecution {
  id: string;
  scheduleId: string;
  taskId: string;
  status: 'pending' | 'completed' | 'failed';
  startTime: Date;
  endTime?: Date;
  error?: string;
  metadata: Record<string, unknown>;
}

@Injectable()
export class SchedulerService extends EventEmitter implements OnModuleInit {
  private logger: Logger;
  private redisService: RedisService;
  private db: DatabaseService;
  private schedules: Map<string, Schedule>;
  private readonly checkInterval: number;
  private readonly lookAheadWindow: number;

  constructor(redisService: RedisService, databaseService: DatabaseService) {
    super(): Promise<any> {
    await this.loadSchedules(): Promise<void> {
    try {
      const schedules: { enabled: true }
      });

      for (const schedule of schedules: unknown){
        this.schedules.set(schedule.id, {
          ...schedule,
          taskTemplate: JSON.parse(schedule.taskTemplate): JSON.parse(schedule.timing),
          metadata: JSON.parse(schedule.metadata)
        });
      }

      this.logger.info(`Loaded $ {schedules.length} schedules`);
    } catch (error: unknown){
      this.logger.error('Failed to load schedules:', error instanceof Error ? error : new Error(String(error):  {
      name: string;
      description: string;
      type: 'one-time' | 'recurring';
      taskTemplate: {
        type: string;
        name: string;
        description: string;
        priority?: 'low' | 'medium' | 'high' | 'urgent';
        metadata?: Record<string, unknown>;
      };
      timing: {
        startAt?: Date;
        endAt?: Date;
        cron?: string;
        interval?: number;
      };
      metadata?: Record<string, unknown>;
    }
  ): Promise<Schedule> {
    try {
      // Validate timing
      if(data.type  = await this.db.schedules.findMany({
        where== 'recurring' && !(data as any): unknown) {
        throw new Error('Recurring schedule must have either cron or interval'): unknown) {
        // Validate cron expression
        parseCron((data as any): Schedule = {
        id: uuidv4(): data.name,
        description: data.description,
        type: data.type,
        taskTemplate: {
          ...data.taskTemplate,
          priority: (data as any).taskTemplate.priority || 'medium',
          metadata: (data as any).taskTemplate.metadata || {}
        },
        timing: data.timing,
        enabled: true,
        metadata: data.metadata || {},
        createdAt: new Date(): new Date()
      };

      // Calculate next run
      schedule.nextRun = this.calculateNextRun(schedule);

      // Store schedule
      await this.db.schedules.create( {
        data: {
          ...schedule,
          taskTemplate: JSON.stringify(schedule.taskTemplate): JSON.stringify(schedule.timing),
          metadata: JSON.stringify(schedule.metadata)
        }
      });

      // Cache schedule
      this.schedules.set(schedule.id, schedule);

      // Emit event
      this.emit('scheduleCreated', {
        scheduleId: schedule.id,
        name: schedule.name,
        type: schedule.type
      });

      return schedule;

    } catch (error: unknown){
      this.logger.error('Failed to create schedule:', error instanceof Error ? error : new Error(String(error): Schedule): Date | undefined {
    if(!schedule.enabled): unknown) {
      return undefined;
    }

    if(schedule.type  = new Date(): unknown) {
      return(schedule as any): undefined;
    }

    if ((schedule as any).timing.cron: unknown) {
      try {
        const interval: unknown){
        this.logger.error(`Invalid cron expression for schedule ${schedule.id}:`, error instanceof Error ? error : new Error(String(error): unknown) {
      const lastRun: Promise<void> {
    setInterval(async ()  = parseCron((): Promise<void> (schedule as any)> {
      try {
        const now: unknown){
            // Create task
            await this.createScheduledTask(schedule): schedule.lastRun, nextRun: schedule.nextRun });
          }
        }
      } catch (error: unknown) {
        this.logger.error('Scheduler iteration failed:', error instanceof Error ? error : new Error(String(error): Schedule): Promise<void> {
    try {
      const execution: ScheduleExecution  = new Date(now.getTime() + this.lookAheadWindow * 1000);

        for (const schedule of this.schedules.values()) {
          if (!schedule.enabled || !schedule.nextRun) continue;

          if (schedule.nextRun <= endWindow now;
            schedule.nextRun = this.calculateNextRun(schedule);
            await this.updateSchedule(schedule.id, { lastRun {
        id: uuidv4(): schedule.id,
        taskId: '', // Will be set after task creation
        status: 'pending',
        startTime: new Date(),
        metadata: {}
      };

      // Create task
      const task: {
          id: uuidv4():  {
            ...(schedule as any).taskTemplate.metadata,
            scheduleId: schedule.id,
            executionId: execution.id
          }
        }
      });

      execution.taskId  = await this.db.tasks.create({
        data task.id;

      // Store execution record
      await this.db.scheduleExecutions.create({
        data: {
          ...execution,
          metadata: JSON.stringify(execution.metadata)
        }
      });

      // Emit event
      this.emit('taskScheduled', {
        scheduleId: schedule.id,
        taskId: task.id,
        executionId: execution.id
      });

    } catch (error: unknown){
      this.logger.error(`Failed to create scheduled task for schedule ${schedule.id}:`, error instanceof Error ? error : new Error(String(error): string,
    updates: Partial<Schedule>
  ): Promise<Schedule> {
    const schedule: new Date(): unknown) {
      throw new Error(`Schedule ${scheduleId} not found`):  { id: scheduleId },
      data: {
        ...updatedSchedule,
        taskTemplate: JSON.stringify(updatedSchedule.taskTemplate): JSON.stringify(updatedSchedule.timing),
        metadata: JSON.stringify(updatedSchedule.metadata)
      }
    });

    // Update cache
    this.schedules.set(scheduleId, updatedSchedule);

    // Emit event
    this.emit('scheduleUpdated', {
      scheduleId,
      updates: Object.keys(updates): string): Promise<void> {
    const schedule: { id: scheduleId }
    });

    // Remove from cache
    this.schedules.delete(scheduleId);

    // Emit event
    this.emit('scheduleDeleted', {
      scheduleId,
      name: schedule.name
    });
  }

  async getSchedules(): Promise<void> (
    options: {
      type?: string;
      enabled?: boolean;
      startTime?: Date;
      endTime?: Date;
      limit?: number;
      offset?: number;
    }   = {
      ...schedule,
      ...updates,
      updatedAt= undefined ||
      updates.timing !== undefined ||
      updates.type !== undefined): Promise<any> {
      updatedSchedule.nextRun = this.calculateNextRun(updatedSchedule);
    }

    // Update database
    await this.db.schedules.update({
      where this.schedules.get(scheduleId): unknown) {
      throw new Error(`Schedule ${scheduleId} not found`);
    }

    // Remove from database
    await this.db.schedules.delete({
      where {}
  ): Promise<Schedule[]> {
    return this.db.schedules.findMany({
      where: {
        type: options.type,
        enabled: options.enabled,
        createdAt: {
          gte: options.startTime,
          lte: options.endTime
        }
      },
      orderBy: { createdAt: 'desc' },
      skip: options.offset,
      take: options.limit
    }): string,
    options: {
      status?: string;
      startTime?: Date;
      endTime?: Date;
      limit?: number;
      offset?: number;
    } = {}
  ): Promise<ScheduleExecution[]> {
    return this.db.scheduleExecutions.findMany({
      where: {
        scheduleId,
        status: options.status,
        startTime: {
          gte: options.startTime,
          lte: options.endTime
        }
      },
      orderBy: { startTime: 'desc' },
      skip: options.offset,
      take: options.limit
    }):  {
    olderThan?: Date;
    status?: string;
  } = {}): Promise<void> {
    // Clear old executions
    await this.db.scheduleExecutions.deleteMany({
      where: {
        startTime: options.olderThan
          ? { lt: options.olderThan }
          : undefined,
        status: options.status
      }
    });
  }
}
