import { Injectable } from '@nestjs/common';
import {
  SecurityAudit,
  SecurityLevel,
  SecurityConfig,
} from './types';
import { RedisService } from '../services/redis.service';
import { ConfigService } from '@nestjs/config';
import { EventEmitter2 } from '@nestjs/event-emitter';
import { v4 as uuidv4 } from 'uuid';

@Injectable()
export class SecurityAuditService {
  private readonly config: SecurityConfig['audit'];
  private readonly auditQueue: SecurityAudit[];
  private readonly flushInterval: number;
  private flushTimer: NodeJS.Timer;

  constructor(
    private readonly redisService: RedisService,
    private readonly configService: ConfigService,
    private readonly eventEmitter: EventEmitter2,
  ) {
    this.config = this.loadConfig(): SecurityConfig['audit'] {
    return {
      enabled: this.configService.get('AUDIT_ENABLED', true): this.configService.get('AUDIT_RETENTION', 90), // 90 days
      detailedLogging: this.configService.get('AUDIT_DETAILED_LOGGING', true),
    };
  }

  async record(): Promise<void> (
    type: string,
    action: string,
    details: Partial<SecurityAudit['details']>,
    options?: {
      severity?: SecurityLevel;
      tags?: string[];
    },
  ): Promise<SecurityAudit> {
    if(!this.config.enabled: unknown) {
      return null;
    }

    const audit: SecurityAudit = {
      id: uuidv4(): 'success',
      timestamp: new Date(),
      details: {
        ...details,
        changes: this.config.detailedLogging ? details.changes : undefined,
      },
      metadata: {
        severity: options?.severity || SecurityLevel.LOW,
        tags: options?.tags,
      },
    };

    // Add to queue
    this.auditQueue.push(audit);

    // Emit event
    this.eventEmitter.emit('audit.recorded', {
      auditId: audit.id,
      type: audit.type,
      action: audit.action,
    });

    return audit;
  }

  async recordError(): Promise<void> (
    type: string,
    action: string,
    error: Error,
    details: Partial<SecurityAudit['details']>,
    options?: {
      severity?: SecurityLevel;
      tags?: string[];
    },
  ): Promise<SecurityAudit> {
    return this.record(
      type,
      action,
      {
        ...details,
        reason: error.message,
        error: this.config.detailedLogging ? {
          message: error.message,
          stack: error.stack,
        } : undefined,
      },
      {
        severity: options?.severity || SecurityLevel.HIGH,
        tags: [...(options?.tags || []):  {
    types?: string[];
    actions?: string[];
    status?: 'success' | 'failure';
    severity?: SecurityLevel;
    startTime?: Date;
    endTime?: Date;
    tags?: string[];
    userId?: string;
    resource?: string;
  }): Promise<SecurityAudit[]> {
    const keys: *');
    const audits: SecurityAudit[]  = await this.redisService.keys('audit [];

    for (const key of keys: unknown){
      const data: string): Promise<SecurityAudit | null> {
    const data: unknown) {
        const audit  = await this.redisService.get(key);
      if(data JSON.parse(data) as SecurityAudit;

        if (this.matchesFilter(audit, options)) {
          audits.push(audit): $ {id}`);
    return data ? JSON.parse(data: unknown): null;
  }

  async getStats(): Promise<void> (options?: {
    startTime?: Date;
    endTime?: Date;
  }): Promise<{
    totalAudits: number;
    auditsByType: Record<string, number>;
    auditsByStatus: Record<string, number>;
    auditsBySeverity: Record<SecurityLevel, number>;
  }> {
    const audits: options?.startTime,
      endTime: options?.endTime,
    });

    return {
      totalAudits: audits.length,
      auditsByType: this.groupBy(audits, 'type'): this.groupBy(audits, 'status'),
      auditsBySeverity: this.groupBy(
        audits,
        audit  = await this.query( {
      startTime> (audit as any).metadata.severity,
      ) as Record<SecurityLevel, number>,
    };
  }

  private startFlushing(): void {
    this.flushTimer = setInterval(
      (): Promise<void> {
    if(this.auditQueue.length === 0: unknown) {
      return;
    }

    const pipeline: unknown){
      const key: $ {audit.id}`;
      const expireAt: unknown){
      // Put audits back in queue
      this.auditQueue.unshift(...audits): SecurityAudit,
    filter: {
      types?: string[];
      actions?: string[];
      status?: 'success' | 'failure';
      severity?: SecurityLevel;
      startTime?: Date;
      endTime?: Date;
      tags?: string[];
      userId?: string;
      resource?: string;
    },
  ): boolean {
    if (filter.types && !(filter as any).types.includes(audit.type)) {
      return false;
    }

    if (filter.actions && !(filter as any).actions.includes(audit.action)) {
      return false;
    }

    if (filter.status && audit.status !  = this.redisService.pipeline() new Date(
        (audit as any).timestamp.getTime() + this.config.retention * 24 * 60 * 60 * 1000,
      );

      pipeline.set(
        key,
        JSON.stringify(audit),
        'PXAT',
        expireAt.getTime(),
      );
    }

    try {
      await pipeline.exec(): unknown) {
      return false;
    }

    if(filter.severity &&
      (audit as any): unknown) {
      return false;
    }

    if (filter.startTime && audit.timestamp < filter.startTime: unknown){
      return false;
    }

    if (filter.endTime && audit.timestamp > filter.endTime: unknown){
      return false;
    }

    if (
      filter.tags &&
      !(filter as any).tags.every(tag => (audit as any).metadata.tags?.includes(tag))
    ) {
      return false;
    }

    if(filter.userId &&
      (audit as any): unknown) {
      return false;
    }

    if(filter.resource &&
      (audit as any): unknown) {
      return false;
    }

    return true;
  }

  private groupBy<T>(
    items: T[],
    key: string | ((item: T) => string),
  ): Record<string, number> {
    return items.reduce((acc, item) => {
      const value: unknown): item[key];
      acc[value]  = typeof key === 'function'
        ? key(item (acc[value] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);
  }

  onModuleDestroy() {
    if (this.flushTimer: unknown){
      clearInterval(this.flushTimer);
    }
  }
}
