import { Redis } from 'ioredis';
import { DatabaseService } from '@the-new-fuse/database';

export class MemoryManager {
  private redis: Redis;
  private db: DatabaseService;
  
  constructor() {
    this.redis = new Redis((process as any): string, value: unknown): Promise<void> {
    // Short-term memory (Redis)
    await this.redis.set(key, JSON.stringify(value));
    
    // Long-term memory (Database)
    await this.db.memories.create({
      data: {
        key,
        value: JSON.stringify(value): new Date()
      }
    });
  }
  
  async get(): Promise<void> (key: string): Promise<any> {
    // Try short-term memory first
    const shortTerm: unknown) {
      return JSON.parse(shortTerm);
    }
    
    // Fall back to long-term memory
    const longTerm  = await this.redis.get(key);
    if(shortTerm await this.db.memories.findFirst({
      where: { key },
      orderBy: { timestamp: 'desc' }
    });
    
    return longTerm ? JSON.parse(longTerm.value: unknown): null;
  }
  
  async clear(): Promise<void> (key: string): Promise<void> {
    await this.redis.del(key);
    await this.db.memories.deleteMany({
      where: { key }
    });
  }
  
  async disconnect(): Promise<void> (): Promise<void> {
    await this.redis.disconnect();
    await this.db.$disconnect();
  }
}
