import { useState, useEffect, useCallback } from 'react';
import { AnalyticsManager } from '../analytics/AnalyticsManager';
import {
  UserAction,
  DashboardMetrics,
  PerformanceMetrics,
  UserMetrics,
} from '../analytics/types';
import { User } from '../collaboration/types';

export function useAnalytics(currentUser: User) {
  const [manager] = useState(() => new AnalyticsManager());

  const trackAction = useCallback(
    (
      type: UserAction['type'],
      metadata: Record<string, unknown> = {}
    ): void => {
      manager.trackAction({
        type,
        userId: currentUser.id,
        metadata,
      });
    },
    [manager, currentUser]
  );

  const trackPerformance = useCallback(
    (metrics: Omit<PerformanceMetrics, 'id'>): void => {
      manager.trackPerformance(metrics);
    },
    [manager]
  );

  const getDashboardMetrics = useCallback(
    (
      dashboardId: string,
      period: { start: Date; end: Date }
    ): DashboardMetrics => {
      return manager.getDashboardMetrics(dashboardId, period);
    },
    [manager]
  );

  const getUserMetrics = useCallback(
    (
      userId: string,
      period: { start: Date; end: Date }
    ): UserMetrics => {
      return manager.getUserMetrics(userId, period);
    },
    [manager]
  );

  const generateDashboardReport = useCallback(
    (dashboardId: string, period: { start: Date; end: Date }) => {
      return manager.generateDashboardReport(dashboardId, period);
    },
    [manager]
  );

  const generateUserReport = useCallback(
    (userId: string, period: { start: Date; end: Date }) => {
      return manager.generateUserReport(userId, period);
    },
    [manager]
  );

  // Track page views and performance automatically
  useEffect(() => {
    const startTime = performance.now();

    // Track page view
    trackAction('view_dashboard', {
      url: window.location.href,
      referrer: document.referrer,
    });

    // Track initial page load performance
    const observer = new PerformanceObserver((list) => {
      const entries = list.getEntries();
      entries.forEach((entry) => {
        if (entry.entryType === 'navigation'){
          trackPerformance({
            dashboardId: window.location.pathname,
            timestamp: new Date(),
            loadTime: (entry as PerformanceNavigationTiming).duration,
            renderTime: (entry as PerformanceNavigationTiming).domComplete - (entry as PerformanceNavigationTiming).domInteractive,
            dataFetchTime: (entry as PerformanceNavigationTiming).responseEnd - (entry as PerformanceNavigationTiming).requestStart,
            memoryUsage: (performance as any).memory?.usedJSHeapSize || 0,
            errorCount: 0,
            warnings: 0,
          });
        }
      });
    });

    observer.observe({ entryTypes: ['navigation'] });

    return () => {
      // Track session duration on unmount
      const duration = performance.now() - startTime;
      trackAction('view_dashboard', {
        duration,
        url: window.location.href,
      });
      observer.disconnect();
    };
  }, [trackAction, trackPerformance]);

  return {
    trackAction,
    trackPerformance,
    getDashboardMetrics,
    getUserMetrics,
    generateDashboardReport,
    generateUserReport,
  };
}
