import React, { FC } from "react";
import { Message, ChatControls, MessageList, InputArea } from '@the-new-fuse/components';
import { useChatState } from '@the-new-fuse/hooks/useChatState';
import { useMessageHandler } from '@the-new-fuse/hooks/useMessageHandler';

export interface ChatCoreProps {
  initialMessages?: Message[];
  participants?: string[];
  threadId?: string;
  enableVoice?: boolean;
  enableVideo?: boolean;
  enableAttachments?: boolean;
  onSend?: (message: Message) => void;
  onTyping?: (isTyping: boolean) => void;
  className?: string;
  theme?: 'light' | 'dark';
}

export interface Message {
  id: string;
  content: string;
  sender: string;
  timestamp: Date;
  type: 'text' | 'code' | 'file' | 'system';
  attachments?: Attachment[];
  metadata?: Record<string, unknown>;
}

export interface Attachment {
  id: string;
  type: 'image' | 'file' | 'code';
  url: string;
  name: string;
  size?: number;
  metadata?: Record<string, unknown>;
}

export const ChatCore: FC<ChatCoreProps> = ({
  initialMessages = [],
  participants = [],
  threadId,
  enableVoice = false,
  enableVideo = false,
  enableAttachments = false,
  onSend,
  onTyping,
  className = '',
  theme = 'light'
}) => {
  const { messages, addMessage, updateMessage } = useChatState(initialMessages);
  const { handleMessage, handleTyping } = useMessageHandler({
    onSend,
    onTyping,
    threadId
  });

  return (
    <div className={`chat-core flex flex-col h-full ${className}`}>
      <MessageList 
        messages={messages}
        participants={participants}
      />
      <ChatControls
        enableVoice={enableVoice}
        enableVideo={enableVideo}
      />
      <InputArea
        onSend={handleMessage}
        onTyping={handleTyping}
        enableAttachments={enableAttachments}
      />
    </div>
  );
};