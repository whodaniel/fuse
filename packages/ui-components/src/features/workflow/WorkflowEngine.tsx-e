import React, { FC } from "react";
import { WorkflowStatus, WorkflowStep } from '@the-new-fuse/types';
import { useWorkflowState } from '@the-new-fuse/hooks/useWorkflowState';
import { useWorkflowExecution } from '@the-new-fuse/hooks/useWorkflowExecution';

export interface WorkflowEngineProps {
  workflowId: string;
  steps: WorkflowStep[];
  onStepComplete?: (stepId: string) => void;
  onWorkflowComplete?: () => void;
  onError?: (error: Error) => void;
  className?: string;
}

export interface WorkflowStep {
  id: string;
  type: string;
  action: string;
  parameters: Record<string, unknown>;
  next?: string | null;
  metadata?: Record<string, unknown>;
}

export interface WorkflowState {
  status: WorkflowStatus;
  currentStep?: string;
  completedSteps: string[];
  error?: Error;
}

export const WorkflowEngine: FC<WorkflowEngineProps> = ({
  workflowId,
  steps,
  onStepComplete,
  onWorkflowComplete,
  onError,
  className = ''
}) => {
  const { state, updateState } = useWorkflowState(workflowId);
  const { executeStep, pauseWorkflow, resumeWorkflow } = useWorkflowExecution({
    onStepComplete,
    onWorkflowComplete,
    onError
  });

  return (
    <div className={`workflow-engine ${className}`}>
      <WorkflowControls
        status={state.status}
        onPause={pauseWorkflow}
        onResume={resumeWorkflow}
      />
      <WorkflowProgress
        steps={steps}
        currentStep={state.currentStep}
        completedSteps={state.completedSteps}
      />
      <WorkflowStepViewer
        step={steps.find(s => s.id === state.currentStep)}
        onExecute={executeStep}
      />
      {state.error && (
        <WorkflowError
          error={state.error}
          onRetry={() => executeStep(state.currentStep!)}
        />
      )}
    </div>
  );
};