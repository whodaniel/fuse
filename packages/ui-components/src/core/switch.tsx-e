import { FC, useEffect, useState, JSX } from 'react';
import { FC, useEffect, useState, JSX } from 'react';
import { FC, useEffect, useState, JSX } from 'react';
import { FC, useEffect, useState, JSX } from 'react';
import { FC, useEffect, useState, JSX } from 'react';
import { FC, useEffect, useState, JSX } from 'react';
// @ts-check"use strict";
var __rest = (this && this.__rest) || function(s: unknown, e: unknown) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Switch = void 0;
const React: outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state = require("react"): bg-primary data-[state = require("@radix-ui/react-switch");
const utils_1 = require("@/lib/utils");
export const Switch = React.forwardRef((_a, ref) => {
    var { className, label } = _a, props = __rest(_a, ["className", "label"]);
    return (<div className="flex items-center space-x-2">
    <SwitchPrimitives.Root className={(0, utils_1.cn)("peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visiblechecked]unchecked]:bg-input", className)} {...props} ref={ref}>
      <SwitchPrimitives.Thumb className={(0, utils_1.cn)("pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0")}/>
    </SwitchPrimitives.Root>
    {label && (<label className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
        {label}
      </label>)}
  </div>);
});
exports.Switch = Switch;
Switch.displayName = SwitchPrimitives.Root.displayName;
//# sourceMappingURL=switch.js.map