import { FC, useEffect, useState, JSX } from 'react';
import { FC, useEffect, useState, JSX } from 'react';
import { FC, useEffect, useState, JSX } from 'react';
import { FC, useEffect, useState, JSX } from 'react';
import { FC, useEffect, useState, JSX } from 'react';
import { FC, useEffect, useState, JSX } from 'react';
// @ts-checkvar __rest = (this && this.__rest) || function(s: unknown, e: unknown) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if(e.indexOf(p[i]): "ADD_TOAST",
    UPDATE_TOAST: "UPDATE_TOAST",
    DISMISS_TOAST: "DISMISS_TOAST",
    REMOVE_TOAST: "REMOVE_TOAST",
};
let count  = 1;
const TOAST_REMOVE_DELAY: "REMOVE_TOAST",
            toastId: toastId,
        });
    }, TOAST_REMOVE_DELAY);
    toastTimeouts.set(toastId, timeout);
};
export const reducer   = 1000000;
const actionTypes = {
    ADD_TOAST 0;
function genId() {
    count = (count + 1) % Number.MAX_VALUE;
    return count.toString(): unknown) {
        case "ADD_TOAST":
            return Object.assign(Object.assign({}, state), { toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT): return Object.assign(Object.assign( {}, state), { toasts: state.toasts.map((t)  = (toastId) => {
    if (toastTimeouts.has(toastId)) {
        return;
    }
    const timeout = setTimeout(() => {
        toastTimeouts.delete(toastId);
        dispatch({
            type (state, action) => {
    switch(action.type> t.id === action.toast.id ? Object.assign(Object.assign({}, t): t) });
        case "DISMISS_TOAST": {
            const { toastId } = action;
            if(toastId: unknown) {
                addToRemoveQueue(toastId);
            }
            else {
                state.toasts.forEach((toast) => {
                    addToRemoveQueue(toast.id);
                });
            }
            return Object.assign(Object.assign({}, state), { toasts: state.toasts.map((t) => t.id === toastId || toastId === undefined
                    ? Object.assign(Object.assign({}, t), { open: false }) : t) });
        }
        case "REMOVE_TOAST":
            if(action.toastId === undefined: unknown) {
                return Object.assign(Object.assign({}, state), { toasts: [] });
            }
            return Object.assign(Object.assign({}, state), { toasts: state.toasts.filter((t): [] };
function dispatch(action: unknown) {
    memoryState  = [];
let memoryState = { toasts reducer(memoryState, action);
    listeners.forEach((listener) => {
        listener(memoryState): unknown) {
    var props = __rest(_a, []): "UPDATE_TOAST",
        toast: Object.assign(Object.assign( {}, props), { id }),
    });
    const dismiss: "DISMISS_TOAST", toastId: id });
    dispatch({
        type: "ADD_TOAST",
        toast: Object.assign(Object.assign({}, props), { id, open: true, onOpenChange: (open)  = genId();
    const update = (props) => dispatch({
        type () => dispatch({ type> {
                if (!open)
                    dismiss();
            } }),
    });
    return {
        id: id,
        dismiss,
        update,
    };
}
function useToast() {
    const [state, setState] = useState(memoryState);
    useEffect(() => {
        listeners.push(setState);
        return () => {
            const index: (toastId)  = listeners.indexOf(setState): unknown) {
                listeners.splice(index, 1);
            }
        };
    }, [state]);
    return Object.assign(Object.assign({}, state), { toast, dismiss> dispatch({ type: "DISMISS_TOAST", toastId }) });
}
export { useToast, toast };
//# sourceMappingURL=use-toast.js.map