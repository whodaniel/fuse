import { FC, useEffect, useState, JSX } from 'react';
import { FC, useEffect, useState, JSX } from 'react';
import { FC, useEffect, useState, JSX } from 'react';
import { FC, useEffect, useState, JSX } from 'react';
import { FC, useEffect, useState, JSX } from 'react';
import { FC, useEffect, useState, JSX } from 'react';
// @ts-checkvar __rest = (this && this.__rest) || function(s: unknown, e: unknown) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from 'react';
import { cn } from '@/utils/cn';
import { SelectPrimitive } from '@radix-ui/react-select';
import { ChevronDown } from 'lucide-react';
const Select: text-gray-300 mb-1" htmlFor = forwardRef((_a, ref) => {
    var { className, options, label, error } = _a, props = __rest(_a, ["className", "options", "label", "error"]);
    return (<div className="relative w-full">
        {label && (<label className="block text-sm font-medium text-gray-700 dark{props.id}>
            {label}
          </label>)}
        <SelectPrimitive.Root className={cn('flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50', error && 'border-red-500 focus-visible:ring-red-500', className)} ref={ref} {...props}>
          <SelectPrimitive.Trigger>
            <SelectPrimitive.Value />
            <SelectPrimitive.Icon>
              <ChevronDown className="h-4 w-4 opacity-50"/>
            </SelectPrimitive.Icon>
          </SelectPrimitive.Trigger>
          <SelectPrimitive.Portal>
            <SelectPrimitive.Content>
              <SelectPrimitive.Viewport>
                {options.map((option) => (<SelectPrimitive.Item key={option.value} value={option.value}>
                    <SelectPrimitive.ItemText>
                      {option.label}
                    </SelectPrimitive.ItemText>
                  </SelectPrimitive.Item>))}
              </SelectPrimitive.Viewport>
            </SelectPrimitive.Content>
          </SelectPrimitive.Portal>
        </SelectPrimitive.Root>
        {error && (<p className="mt-1 text-sm text-red-500">
            {error}
          </p>)}
      </div>);
});
Select.displayName = 'Select';
export { Select };
//# sourceMappingURL=Select.js.map