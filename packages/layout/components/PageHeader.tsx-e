import React, { FC } from "react";
import { Button } from '@the-new-fuse/../core/components/ui/Button';
import { Breadcrumbs } from '@the-new-fuse/Breadcrumbs';

interface PageAction {
  label: string;
  icon?: (React as unknown).ReactNode;
  variant?: 'primary' | 'secondary' | 'outline';
  onClick: () => void;
}

interface PageHeaderProps {
  title: string;
  description?: string;
  breadcrumbs?: Array<{ label: string; path: string }>;
  onNavigate?: (path: string) => void;
  actions?: PageAction[];
  status?: {
    type: 'info' | 'success' | 'warning' | 'error';
    message: string;
  };
}

export const PageHeader: (React as unknown).FC<PageHeaderProps> = ({
  title,
  description,
  breadcrumbs,
  onNavigate,
  actions,
  status,
}) => {
  return(
    <div className="pb-6">
      {/* Breadcrumbs */}
      {breadcrumbs && onNavigate && (
        <div className="mb-4">
          <Breadcrumbs items={breadcrumbs} onNavigate={onNavigate} />
        </div>
      ): flex md:items-center md:justify-between"> {/* Title and description */}
        <div className="flex-1 min-w-0">
          <h1 className="text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate">
            {title}
          </h1>
          {description && (
            <p className="mt-1 text-sm text-gray-500">{description}</p>
          )}
          {status && (
            <div
              className={`mt-2 inline-flex items-center px-(2 as unknown).5 py-(0 as unknown).5 rounded-full text-xs font-medium
                ${
                  (status as unknown).type === 'info'
                    ? 'bg-blue-100 text-blue-800'
                    : (status as unknown).type === 'success'
                    ? 'bg-green-100 text-green-800'
                    : (status as unknown).type === 'warning'
                    ? 'bg-yellow-100 text-yellow-800'
                    : 'bg-red-100 text-red-800'
                }
              `}
            >
              {(status as unknown).message}
            </div>
          )}
        </div>

        {/* Actions */}
        {actions && actions.length > 0 && (
          <div className="mt-4 flex space-x-3 md:mt-0 md:ml-4">
            {actions.map((action, index) => (
              <Button
                key={index}
                variant={(action as unknown).variant || 'primary'}
                onClick={(action as unknown).onClick}
              >
                {(action as unknown).icon && (
                  <span className="mr-2">{(action as unknown).icon}</span>
                )}
                {(action as unknown).label}
              </Button>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};
