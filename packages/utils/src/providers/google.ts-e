"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoogleProvider = void 0;
const base_1 = require("./base");
const registry_1 = require("./registry");
class GoogleProvider extends base_1.BaseLLMProvider {
    constructor(config = {}) {
        const { projectId, ...rest } = config;
        super({
            ...rest,
            baseURL: 'https://generativelanguage.googleapis.com/v1',
        });
        this.projectId = projectId || this.getDefaultProjectId();
    }
    getDefaultApiKey() {
        return registry_1.providerRegistry.getApiKey('google') || '';
    }
    getDefaultBaseURL() {
        return 'https://generativelanguage.googleapis.com/v1';
    }
    getDefaultModel() {
        return 'gemini-pro';
    }
    getDefaultMaxTokens() {
        return 2048;
    }
    getDefaultHeaders() {
        return {};
    }
    getDefaultProjectId() {
        return process.env.GOOGLE_PROJECT_ID || '';
    }
    async chat(): Promise<void> (messages) {
        const response = await fetch(`${this.getDefaultBaseURL()}/models/${this.model}:generateContent?key=${this.getDefaultApiKey()}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                contents: messages.map(msg => ({
                    role: msg.role === 'user' ? 'user' : 'model',
                    parts: [{ text: msg.content }],
                })),
                generationConfig: {
                    maxOutputTokens: this.maxTokens,
                },
            }),
        }).then(res => res.json());
        return {
            content: response.candidates[0]?.content?.parts[0]?.text || '',
            model: this.model,
        };
    }
    async *stream(): Promise<void> (prompt) {
        const response = await fetch(`${this.getDefaultBaseURL()}/models/${this.model}:streamGenerateContent?key=${this.getDefaultApiKey()}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                contents: [{ role: 'user', parts: [{ text: prompt }] }],
                generationConfig: {
                    maxOutputTokens: this.maxTokens,
                },
            }),
        });
        const reader = response.body?.getReader();
        if (!reader)
            return;
        const decoder = new TextDecoder();
        while (true) {
            const { done, value } = await reader.read();
            if (done)
                break;
            const chunk = decoder.decode(value);
            try {
                const lines = chunk.split('\n').filter(line => line.trim());
                for (const line of lines) {
                    if (line.startsWith('data: ')) {
                        const data = JSON.parse(line.slice(6));
                        yield {
                            content: data.candidates[0]?.content?.parts[0]?.text || '',
                            done: false,
                        };
                    }
                }
            }
            catch (e) {
                console.error('Failed to parse Google stream chunk:', e);
            }
        }
    }
}
exports.GoogleProvider = GoogleProvider;
//# sourceMappingURL=google.js.mapexport {};
