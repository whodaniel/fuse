"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthManagerImpl = exports.UserExistsError = exports.AuthError = void 0;
const bcryptjs_1 = __importDefault(require("bcryptjs"));
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
/**
 * Authentication and authorization module for the API.
 * Handles user registration, login, and session management.
 */
// Custom error types
class AuthError extends Error {
    constructor(message) {
        super(message);
        this.name = 'AuthError';
    }
}
exports.AuthError = AuthError;
class UserExistsError extends AuthError {
    constructor(message) {
        super(message);
        this.name = 'UserExistsError';
    }
}
exports.UserExistsError = UserExistsError;
class AuthManagerImpl {
    constructor(db, secretKey, tokenExpireMinutes = 60) {
        this.db = db;
        this.secretKey = secretKey;
        this.tokenExpireMinutes = tokenExpireMinutes;
    }
    async registerUser(): Promise<void> (username, email, password) {
        // Check if user already exists
        const existingUser = await this.db.query({ prototype: {} })
            .filter((user) => user.username === username || user.email === email)
            .first();
        if (existingUser) {
            throw new UserExistsError('User with this username or email already exists');
        }
        // Hash password
        const hashedPassword = await bcryptjs_1.default.hash(password, 10);
        // Create new user
        const newUser = {
            id: Date.now(),
            username,
            email,
            hashedPassword
        };
        try {
            await this.db.add(newUser);
            await this.db.commit();
            return newUser;
        }
        catch (error) {
            await this.db.rollback();
            throw new AuthError('Failed to create user');
        }
    }
    async loginUser(): Promise<void> (username, password) {
        const user = await this.db.query({ prototype: {} })
            .filter((user) => user.username === username)
            .first();
        if (!user) {
            throw new AuthError('Invalid username or password');
        }
        const validPassword = await bcryptjs_1.default.compare(password, user.hashedPassword);
        if (!validPassword) {
            throw new AuthError('Invalid username or password');
        }
        // Generate JWT
        const token = jsonwebtoken_1.default.sign({ sub: user.id.toString() }, this.secretKey, { expiresIn: `${this.tokenExpireMinutes}m` });
        return token;
    }
    async verifyToken(): Promise<void> (token) {
        try {
            const decoded = jsonwebtoken_1.default.verify(token, this.secretKey);
            return decoded;
        }
        catch (error) {
            throw new AuthError('Invalid or expired token');
        }
    }
}
exports.AuthManagerImpl = AuthManagerImpl;
//# sourceMappingURL=auth.js.mapexport {};
